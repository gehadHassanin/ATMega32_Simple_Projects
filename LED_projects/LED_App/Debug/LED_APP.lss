
LED_APP.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002ac2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000020  00800060  00002ac2  00002b36  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00001fd4  00000000  00000000  00002b58  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000bb5  00000000  00000000  00004b2c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000140  00000000  00000000  000056e1  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000170  00000000  00000000  00005821  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c49  00000000  00000000  00005991  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000eeb  00000000  00000000  000075da  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000dad  00000000  00000000  000084c5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000160  00000000  00000000  00009274  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000028d  00000000  00000000  000093d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007ce  00000000  00000000  00009661  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  00009e2f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 ec       	ldi	r30, 0xC2	; 194
      68:	fa e2       	ldi	r31, 0x2A	; 42
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 38       	cpi	r26, 0x80	; 128
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 b7 0b 	call	0x176e	; 0x176e <main>
      7a:	0c 94 5f 15 	jmp	0x2abe	; 0x2abe <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 41 03 	call	0x682	; 0x682 <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 28 15 	jmp	0x2a50	; 0x2a50 <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a0 e6       	ldi	r26, 0x60	; 96
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 44 15 	jmp	0x2a88	; 0x2a88 <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 34 15 	jmp	0x2a68	; 0x2a68 <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 50 15 	jmp	0x2aa0	; 0x2aa0 <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 34 15 	jmp	0x2a68	; 0x2a68 <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 50 15 	jmp	0x2aa0	; 0x2aa0 <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 28 15 	jmp	0x2a50	; 0x2a50 <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	80 e6       	ldi	r24, 0x60	; 96
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 44 15 	jmp	0x2a88	; 0x2a88 <__epilogue_restores__>

00000622 <__gtsf2>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 34 15 	jmp	0x2a68	; 0x2a68 <__prologue_saves__+0x18>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	89 e0       	ldi	r24, 0x09	; 9
     640:	e8 2e       	mov	r14, r24
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     662:	89 85       	ldd	r24, Y+9	; 0x09
     664:	82 30       	cpi	r24, 0x02	; 2
     666:	40 f0       	brcs	.+16     	; 0x678 <__gtsf2+0x56>
     668:	89 89       	ldd	r24, Y+17	; 0x11
     66a:	82 30       	cpi	r24, 0x02	; 2
     66c:	28 f0       	brcs	.+10     	; 0x678 <__gtsf2+0x56>
     66e:	c7 01       	movw	r24, r14
     670:	b8 01       	movw	r22, r16
     672:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     676:	01 c0       	rjmp	.+2      	; 0x67a <__gtsf2+0x58>
     678:	8f ef       	ldi	r24, 0xFF	; 255
     67a:	68 96       	adiw	r28, 0x18	; 24
     67c:	e6 e0       	ldi	r30, 0x06	; 6
     67e:	0c 94 50 15 	jmp	0x2aa0	; 0x2aa0 <__epilogue_restores__+0x18>

00000682 <__gesf2>:
     682:	a8 e1       	ldi	r26, 0x18	; 24
     684:	b0 e0       	ldi	r27, 0x00	; 0
     686:	e7 e4       	ldi	r30, 0x47	; 71
     688:	f3 e0       	ldi	r31, 0x03	; 3
     68a:	0c 94 34 15 	jmp	0x2a68	; 0x2a68 <__prologue_saves__+0x18>
     68e:	69 83       	std	Y+1, r22	; 0x01
     690:	7a 83       	std	Y+2, r23	; 0x02
     692:	8b 83       	std	Y+3, r24	; 0x03
     694:	9c 83       	std	Y+4, r25	; 0x04
     696:	2d 83       	std	Y+5, r18	; 0x05
     698:	3e 83       	std	Y+6, r19	; 0x06
     69a:	4f 83       	std	Y+7, r20	; 0x07
     69c:	58 87       	std	Y+8, r21	; 0x08
     69e:	89 e0       	ldi	r24, 0x09	; 9
     6a0:	e8 2e       	mov	r14, r24
     6a2:	f1 2c       	mov	r15, r1
     6a4:	ec 0e       	add	r14, r28
     6a6:	fd 1e       	adc	r15, r29
     6a8:	ce 01       	movw	r24, r28
     6aa:	01 96       	adiw	r24, 0x01	; 1
     6ac:	b7 01       	movw	r22, r14
     6ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6b2:	8e 01       	movw	r16, r28
     6b4:	0f 5e       	subi	r16, 0xEF	; 239
     6b6:	1f 4f       	sbci	r17, 0xFF	; 255
     6b8:	ce 01       	movw	r24, r28
     6ba:	05 96       	adiw	r24, 0x05	; 5
     6bc:	b8 01       	movw	r22, r16
     6be:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6c2:	89 85       	ldd	r24, Y+9	; 0x09
     6c4:	82 30       	cpi	r24, 0x02	; 2
     6c6:	40 f0       	brcs	.+16     	; 0x6d8 <__gesf2+0x56>
     6c8:	89 89       	ldd	r24, Y+17	; 0x11
     6ca:	82 30       	cpi	r24, 0x02	; 2
     6cc:	28 f0       	brcs	.+10     	; 0x6d8 <__gesf2+0x56>
     6ce:	c7 01       	movw	r24, r14
     6d0:	b8 01       	movw	r22, r16
     6d2:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     6d6:	01 c0       	rjmp	.+2      	; 0x6da <__gesf2+0x58>
     6d8:	8f ef       	ldi	r24, 0xFF	; 255
     6da:	68 96       	adiw	r28, 0x18	; 24
     6dc:	e6 e0       	ldi	r30, 0x06	; 6
     6de:	0c 94 50 15 	jmp	0x2aa0	; 0x2aa0 <__epilogue_restores__+0x18>

000006e2 <__ltsf2>:
     6e2:	a8 e1       	ldi	r26, 0x18	; 24
     6e4:	b0 e0       	ldi	r27, 0x00	; 0
     6e6:	e7 e7       	ldi	r30, 0x77	; 119
     6e8:	f3 e0       	ldi	r31, 0x03	; 3
     6ea:	0c 94 34 15 	jmp	0x2a68	; 0x2a68 <__prologue_saves__+0x18>
     6ee:	69 83       	std	Y+1, r22	; 0x01
     6f0:	7a 83       	std	Y+2, r23	; 0x02
     6f2:	8b 83       	std	Y+3, r24	; 0x03
     6f4:	9c 83       	std	Y+4, r25	; 0x04
     6f6:	2d 83       	std	Y+5, r18	; 0x05
     6f8:	3e 83       	std	Y+6, r19	; 0x06
     6fa:	4f 83       	std	Y+7, r20	; 0x07
     6fc:	58 87       	std	Y+8, r21	; 0x08
     6fe:	89 e0       	ldi	r24, 0x09	; 9
     700:	e8 2e       	mov	r14, r24
     702:	f1 2c       	mov	r15, r1
     704:	ec 0e       	add	r14, r28
     706:	fd 1e       	adc	r15, r29
     708:	ce 01       	movw	r24, r28
     70a:	01 96       	adiw	r24, 0x01	; 1
     70c:	b7 01       	movw	r22, r14
     70e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     712:	8e 01       	movw	r16, r28
     714:	0f 5e       	subi	r16, 0xEF	; 239
     716:	1f 4f       	sbci	r17, 0xFF	; 255
     718:	ce 01       	movw	r24, r28
     71a:	05 96       	adiw	r24, 0x05	; 5
     71c:	b8 01       	movw	r22, r16
     71e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     722:	89 85       	ldd	r24, Y+9	; 0x09
     724:	82 30       	cpi	r24, 0x02	; 2
     726:	40 f0       	brcs	.+16     	; 0x738 <__ltsf2+0x56>
     728:	89 89       	ldd	r24, Y+17	; 0x11
     72a:	82 30       	cpi	r24, 0x02	; 2
     72c:	28 f0       	brcs	.+10     	; 0x738 <__ltsf2+0x56>
     72e:	c7 01       	movw	r24, r14
     730:	b8 01       	movw	r22, r16
     732:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     736:	01 c0       	rjmp	.+2      	; 0x73a <__ltsf2+0x58>
     738:	81 e0       	ldi	r24, 0x01	; 1
     73a:	68 96       	adiw	r28, 0x18	; 24
     73c:	e6 e0       	ldi	r30, 0x06	; 6
     73e:	0c 94 50 15 	jmp	0x2aa0	; 0x2aa0 <__epilogue_restores__+0x18>

00000742 <__fixsfsi>:
     742:	ac e0       	ldi	r26, 0x0C	; 12
     744:	b0 e0       	ldi	r27, 0x00	; 0
     746:	e7 ea       	ldi	r30, 0xA7	; 167
     748:	f3 e0       	ldi	r31, 0x03	; 3
     74a:	0c 94 38 15 	jmp	0x2a70	; 0x2a70 <__prologue_saves__+0x20>
     74e:	69 83       	std	Y+1, r22	; 0x01
     750:	7a 83       	std	Y+2, r23	; 0x02
     752:	8b 83       	std	Y+3, r24	; 0x03
     754:	9c 83       	std	Y+4, r25	; 0x04
     756:	ce 01       	movw	r24, r28
     758:	01 96       	adiw	r24, 0x01	; 1
     75a:	be 01       	movw	r22, r28
     75c:	6b 5f       	subi	r22, 0xFB	; 251
     75e:	7f 4f       	sbci	r23, 0xFF	; 255
     760:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     764:	8d 81       	ldd	r24, Y+5	; 0x05
     766:	82 30       	cpi	r24, 0x02	; 2
     768:	61 f1       	breq	.+88     	; 0x7c2 <__fixsfsi+0x80>
     76a:	82 30       	cpi	r24, 0x02	; 2
     76c:	50 f1       	brcs	.+84     	; 0x7c2 <__fixsfsi+0x80>
     76e:	84 30       	cpi	r24, 0x04	; 4
     770:	21 f4       	brne	.+8      	; 0x77a <__fixsfsi+0x38>
     772:	8e 81       	ldd	r24, Y+6	; 0x06
     774:	88 23       	and	r24, r24
     776:	51 f1       	breq	.+84     	; 0x7cc <__fixsfsi+0x8a>
     778:	2e c0       	rjmp	.+92     	; 0x7d6 <__fixsfsi+0x94>
     77a:	2f 81       	ldd	r18, Y+7	; 0x07
     77c:	38 85       	ldd	r19, Y+8	; 0x08
     77e:	37 fd       	sbrc	r19, 7
     780:	20 c0       	rjmp	.+64     	; 0x7c2 <__fixsfsi+0x80>
     782:	6e 81       	ldd	r22, Y+6	; 0x06
     784:	2f 31       	cpi	r18, 0x1F	; 31
     786:	31 05       	cpc	r19, r1
     788:	1c f0       	brlt	.+6      	; 0x790 <__fixsfsi+0x4e>
     78a:	66 23       	and	r22, r22
     78c:	f9 f0       	breq	.+62     	; 0x7cc <__fixsfsi+0x8a>
     78e:	23 c0       	rjmp	.+70     	; 0x7d6 <__fixsfsi+0x94>
     790:	8e e1       	ldi	r24, 0x1E	; 30
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	82 1b       	sub	r24, r18
     796:	93 0b       	sbc	r25, r19
     798:	29 85       	ldd	r18, Y+9	; 0x09
     79a:	3a 85       	ldd	r19, Y+10	; 0x0a
     79c:	4b 85       	ldd	r20, Y+11	; 0x0b
     79e:	5c 85       	ldd	r21, Y+12	; 0x0c
     7a0:	04 c0       	rjmp	.+8      	; 0x7aa <__fixsfsi+0x68>
     7a2:	56 95       	lsr	r21
     7a4:	47 95       	ror	r20
     7a6:	37 95       	ror	r19
     7a8:	27 95       	ror	r18
     7aa:	8a 95       	dec	r24
     7ac:	d2 f7       	brpl	.-12     	; 0x7a2 <__fixsfsi+0x60>
     7ae:	66 23       	and	r22, r22
     7b0:	b1 f0       	breq	.+44     	; 0x7de <__fixsfsi+0x9c>
     7b2:	50 95       	com	r21
     7b4:	40 95       	com	r20
     7b6:	30 95       	com	r19
     7b8:	21 95       	neg	r18
     7ba:	3f 4f       	sbci	r19, 0xFF	; 255
     7bc:	4f 4f       	sbci	r20, 0xFF	; 255
     7be:	5f 4f       	sbci	r21, 0xFF	; 255
     7c0:	0e c0       	rjmp	.+28     	; 0x7de <__fixsfsi+0x9c>
     7c2:	20 e0       	ldi	r18, 0x00	; 0
     7c4:	30 e0       	ldi	r19, 0x00	; 0
     7c6:	40 e0       	ldi	r20, 0x00	; 0
     7c8:	50 e0       	ldi	r21, 0x00	; 0
     7ca:	09 c0       	rjmp	.+18     	; 0x7de <__fixsfsi+0x9c>
     7cc:	2f ef       	ldi	r18, 0xFF	; 255
     7ce:	3f ef       	ldi	r19, 0xFF	; 255
     7d0:	4f ef       	ldi	r20, 0xFF	; 255
     7d2:	5f e7       	ldi	r21, 0x7F	; 127
     7d4:	04 c0       	rjmp	.+8      	; 0x7de <__fixsfsi+0x9c>
     7d6:	20 e0       	ldi	r18, 0x00	; 0
     7d8:	30 e0       	ldi	r19, 0x00	; 0
     7da:	40 e0       	ldi	r20, 0x00	; 0
     7dc:	50 e8       	ldi	r21, 0x80	; 128
     7de:	b9 01       	movw	r22, r18
     7e0:	ca 01       	movw	r24, r20
     7e2:	2c 96       	adiw	r28, 0x0c	; 12
     7e4:	e2 e0       	ldi	r30, 0x02	; 2
     7e6:	0c 94 54 15 	jmp	0x2aa8	; 0x2aa8 <__epilogue_restores__+0x20>

000007ea <__pack_f>:
     7ea:	df 92       	push	r13
     7ec:	ef 92       	push	r14
     7ee:	ff 92       	push	r15
     7f0:	0f 93       	push	r16
     7f2:	1f 93       	push	r17
     7f4:	fc 01       	movw	r30, r24
     7f6:	e4 80       	ldd	r14, Z+4	; 0x04
     7f8:	f5 80       	ldd	r15, Z+5	; 0x05
     7fa:	06 81       	ldd	r16, Z+6	; 0x06
     7fc:	17 81       	ldd	r17, Z+7	; 0x07
     7fe:	d1 80       	ldd	r13, Z+1	; 0x01
     800:	80 81       	ld	r24, Z
     802:	82 30       	cpi	r24, 0x02	; 2
     804:	48 f4       	brcc	.+18     	; 0x818 <__pack_f+0x2e>
     806:	80 e0       	ldi	r24, 0x00	; 0
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	a0 e1       	ldi	r26, 0x10	; 16
     80c:	b0 e0       	ldi	r27, 0x00	; 0
     80e:	e8 2a       	or	r14, r24
     810:	f9 2a       	or	r15, r25
     812:	0a 2b       	or	r16, r26
     814:	1b 2b       	or	r17, r27
     816:	a5 c0       	rjmp	.+330    	; 0x962 <__stack+0x103>
     818:	84 30       	cpi	r24, 0x04	; 4
     81a:	09 f4       	brne	.+2      	; 0x81e <__pack_f+0x34>
     81c:	9f c0       	rjmp	.+318    	; 0x95c <__stack+0xfd>
     81e:	82 30       	cpi	r24, 0x02	; 2
     820:	21 f4       	brne	.+8      	; 0x82a <__pack_f+0x40>
     822:	ee 24       	eor	r14, r14
     824:	ff 24       	eor	r15, r15
     826:	87 01       	movw	r16, r14
     828:	05 c0       	rjmp	.+10     	; 0x834 <__pack_f+0x4a>
     82a:	e1 14       	cp	r14, r1
     82c:	f1 04       	cpc	r15, r1
     82e:	01 05       	cpc	r16, r1
     830:	11 05       	cpc	r17, r1
     832:	19 f4       	brne	.+6      	; 0x83a <__pack_f+0x50>
     834:	e0 e0       	ldi	r30, 0x00	; 0
     836:	f0 e0       	ldi	r31, 0x00	; 0
     838:	96 c0       	rjmp	.+300    	; 0x966 <__stack+0x107>
     83a:	62 81       	ldd	r22, Z+2	; 0x02
     83c:	73 81       	ldd	r23, Z+3	; 0x03
     83e:	9f ef       	ldi	r25, 0xFF	; 255
     840:	62 38       	cpi	r22, 0x82	; 130
     842:	79 07       	cpc	r23, r25
     844:	0c f0       	brlt	.+2      	; 0x848 <__pack_f+0x5e>
     846:	5b c0       	rjmp	.+182    	; 0x8fe <__stack+0x9f>
     848:	22 e8       	ldi	r18, 0x82	; 130
     84a:	3f ef       	ldi	r19, 0xFF	; 255
     84c:	26 1b       	sub	r18, r22
     84e:	37 0b       	sbc	r19, r23
     850:	2a 31       	cpi	r18, 0x1A	; 26
     852:	31 05       	cpc	r19, r1
     854:	2c f0       	brlt	.+10     	; 0x860 <__stack+0x1>
     856:	20 e0       	ldi	r18, 0x00	; 0
     858:	30 e0       	ldi	r19, 0x00	; 0
     85a:	40 e0       	ldi	r20, 0x00	; 0
     85c:	50 e0       	ldi	r21, 0x00	; 0
     85e:	2a c0       	rjmp	.+84     	; 0x8b4 <__stack+0x55>
     860:	b8 01       	movw	r22, r16
     862:	a7 01       	movw	r20, r14
     864:	02 2e       	mov	r0, r18
     866:	04 c0       	rjmp	.+8      	; 0x870 <__stack+0x11>
     868:	76 95       	lsr	r23
     86a:	67 95       	ror	r22
     86c:	57 95       	ror	r21
     86e:	47 95       	ror	r20
     870:	0a 94       	dec	r0
     872:	d2 f7       	brpl	.-12     	; 0x868 <__stack+0x9>
     874:	81 e0       	ldi	r24, 0x01	; 1
     876:	90 e0       	ldi	r25, 0x00	; 0
     878:	a0 e0       	ldi	r26, 0x00	; 0
     87a:	b0 e0       	ldi	r27, 0x00	; 0
     87c:	04 c0       	rjmp	.+8      	; 0x886 <__stack+0x27>
     87e:	88 0f       	add	r24, r24
     880:	99 1f       	adc	r25, r25
     882:	aa 1f       	adc	r26, r26
     884:	bb 1f       	adc	r27, r27
     886:	2a 95       	dec	r18
     888:	d2 f7       	brpl	.-12     	; 0x87e <__stack+0x1f>
     88a:	01 97       	sbiw	r24, 0x01	; 1
     88c:	a1 09       	sbc	r26, r1
     88e:	b1 09       	sbc	r27, r1
     890:	8e 21       	and	r24, r14
     892:	9f 21       	and	r25, r15
     894:	a0 23       	and	r26, r16
     896:	b1 23       	and	r27, r17
     898:	00 97       	sbiw	r24, 0x00	; 0
     89a:	a1 05       	cpc	r26, r1
     89c:	b1 05       	cpc	r27, r1
     89e:	21 f0       	breq	.+8      	; 0x8a8 <__stack+0x49>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	90 e0       	ldi	r25, 0x00	; 0
     8a4:	a0 e0       	ldi	r26, 0x00	; 0
     8a6:	b0 e0       	ldi	r27, 0x00	; 0
     8a8:	9a 01       	movw	r18, r20
     8aa:	ab 01       	movw	r20, r22
     8ac:	28 2b       	or	r18, r24
     8ae:	39 2b       	or	r19, r25
     8b0:	4a 2b       	or	r20, r26
     8b2:	5b 2b       	or	r21, r27
     8b4:	da 01       	movw	r26, r20
     8b6:	c9 01       	movw	r24, r18
     8b8:	8f 77       	andi	r24, 0x7F	; 127
     8ba:	90 70       	andi	r25, 0x00	; 0
     8bc:	a0 70       	andi	r26, 0x00	; 0
     8be:	b0 70       	andi	r27, 0x00	; 0
     8c0:	80 34       	cpi	r24, 0x40	; 64
     8c2:	91 05       	cpc	r25, r1
     8c4:	a1 05       	cpc	r26, r1
     8c6:	b1 05       	cpc	r27, r1
     8c8:	39 f4       	brne	.+14     	; 0x8d8 <__stack+0x79>
     8ca:	27 ff       	sbrs	r18, 7
     8cc:	09 c0       	rjmp	.+18     	; 0x8e0 <__stack+0x81>
     8ce:	20 5c       	subi	r18, 0xC0	; 192
     8d0:	3f 4f       	sbci	r19, 0xFF	; 255
     8d2:	4f 4f       	sbci	r20, 0xFF	; 255
     8d4:	5f 4f       	sbci	r21, 0xFF	; 255
     8d6:	04 c0       	rjmp	.+8      	; 0x8e0 <__stack+0x81>
     8d8:	21 5c       	subi	r18, 0xC1	; 193
     8da:	3f 4f       	sbci	r19, 0xFF	; 255
     8dc:	4f 4f       	sbci	r20, 0xFF	; 255
     8de:	5f 4f       	sbci	r21, 0xFF	; 255
     8e0:	e0 e0       	ldi	r30, 0x00	; 0
     8e2:	f0 e0       	ldi	r31, 0x00	; 0
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	a0 e0       	ldi	r26, 0x00	; 0
     8e8:	3a 07       	cpc	r19, r26
     8ea:	a0 e0       	ldi	r26, 0x00	; 0
     8ec:	4a 07       	cpc	r20, r26
     8ee:	a0 e4       	ldi	r26, 0x40	; 64
     8f0:	5a 07       	cpc	r21, r26
     8f2:	10 f0       	brcs	.+4      	; 0x8f8 <__stack+0x99>
     8f4:	e1 e0       	ldi	r30, 0x01	; 1
     8f6:	f0 e0       	ldi	r31, 0x00	; 0
     8f8:	79 01       	movw	r14, r18
     8fa:	8a 01       	movw	r16, r20
     8fc:	27 c0       	rjmp	.+78     	; 0x94c <__stack+0xed>
     8fe:	60 38       	cpi	r22, 0x80	; 128
     900:	71 05       	cpc	r23, r1
     902:	64 f5       	brge	.+88     	; 0x95c <__stack+0xfd>
     904:	fb 01       	movw	r30, r22
     906:	e1 58       	subi	r30, 0x81	; 129
     908:	ff 4f       	sbci	r31, 0xFF	; 255
     90a:	d8 01       	movw	r26, r16
     90c:	c7 01       	movw	r24, r14
     90e:	8f 77       	andi	r24, 0x7F	; 127
     910:	90 70       	andi	r25, 0x00	; 0
     912:	a0 70       	andi	r26, 0x00	; 0
     914:	b0 70       	andi	r27, 0x00	; 0
     916:	80 34       	cpi	r24, 0x40	; 64
     918:	91 05       	cpc	r25, r1
     91a:	a1 05       	cpc	r26, r1
     91c:	b1 05       	cpc	r27, r1
     91e:	39 f4       	brne	.+14     	; 0x92e <__stack+0xcf>
     920:	e7 fe       	sbrs	r14, 7
     922:	0d c0       	rjmp	.+26     	; 0x93e <__stack+0xdf>
     924:	80 e4       	ldi	r24, 0x40	; 64
     926:	90 e0       	ldi	r25, 0x00	; 0
     928:	a0 e0       	ldi	r26, 0x00	; 0
     92a:	b0 e0       	ldi	r27, 0x00	; 0
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__stack+0xd7>
     92e:	8f e3       	ldi	r24, 0x3F	; 63
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	a0 e0       	ldi	r26, 0x00	; 0
     934:	b0 e0       	ldi	r27, 0x00	; 0
     936:	e8 0e       	add	r14, r24
     938:	f9 1e       	adc	r15, r25
     93a:	0a 1f       	adc	r16, r26
     93c:	1b 1f       	adc	r17, r27
     93e:	17 ff       	sbrs	r17, 7
     940:	05 c0       	rjmp	.+10     	; 0x94c <__stack+0xed>
     942:	16 95       	lsr	r17
     944:	07 95       	ror	r16
     946:	f7 94       	ror	r15
     948:	e7 94       	ror	r14
     94a:	31 96       	adiw	r30, 0x01	; 1
     94c:	87 e0       	ldi	r24, 0x07	; 7
     94e:	16 95       	lsr	r17
     950:	07 95       	ror	r16
     952:	f7 94       	ror	r15
     954:	e7 94       	ror	r14
     956:	8a 95       	dec	r24
     958:	d1 f7       	brne	.-12     	; 0x94e <__stack+0xef>
     95a:	05 c0       	rjmp	.+10     	; 0x966 <__stack+0x107>
     95c:	ee 24       	eor	r14, r14
     95e:	ff 24       	eor	r15, r15
     960:	87 01       	movw	r16, r14
     962:	ef ef       	ldi	r30, 0xFF	; 255
     964:	f0 e0       	ldi	r31, 0x00	; 0
     966:	6e 2f       	mov	r22, r30
     968:	67 95       	ror	r22
     96a:	66 27       	eor	r22, r22
     96c:	67 95       	ror	r22
     96e:	90 2f       	mov	r25, r16
     970:	9f 77       	andi	r25, 0x7F	; 127
     972:	d7 94       	ror	r13
     974:	dd 24       	eor	r13, r13
     976:	d7 94       	ror	r13
     978:	8e 2f       	mov	r24, r30
     97a:	86 95       	lsr	r24
     97c:	49 2f       	mov	r20, r25
     97e:	46 2b       	or	r20, r22
     980:	58 2f       	mov	r21, r24
     982:	5d 29       	or	r21, r13
     984:	b7 01       	movw	r22, r14
     986:	ca 01       	movw	r24, r20
     988:	1f 91       	pop	r17
     98a:	0f 91       	pop	r16
     98c:	ff 90       	pop	r15
     98e:	ef 90       	pop	r14
     990:	df 90       	pop	r13
     992:	08 95       	ret

00000994 <__unpack_f>:
     994:	fc 01       	movw	r30, r24
     996:	db 01       	movw	r26, r22
     998:	40 81       	ld	r20, Z
     99a:	51 81       	ldd	r21, Z+1	; 0x01
     99c:	22 81       	ldd	r18, Z+2	; 0x02
     99e:	62 2f       	mov	r22, r18
     9a0:	6f 77       	andi	r22, 0x7F	; 127
     9a2:	70 e0       	ldi	r23, 0x00	; 0
     9a4:	22 1f       	adc	r18, r18
     9a6:	22 27       	eor	r18, r18
     9a8:	22 1f       	adc	r18, r18
     9aa:	93 81       	ldd	r25, Z+3	; 0x03
     9ac:	89 2f       	mov	r24, r25
     9ae:	88 0f       	add	r24, r24
     9b0:	82 2b       	or	r24, r18
     9b2:	28 2f       	mov	r18, r24
     9b4:	30 e0       	ldi	r19, 0x00	; 0
     9b6:	99 1f       	adc	r25, r25
     9b8:	99 27       	eor	r25, r25
     9ba:	99 1f       	adc	r25, r25
     9bc:	11 96       	adiw	r26, 0x01	; 1
     9be:	9c 93       	st	X, r25
     9c0:	11 97       	sbiw	r26, 0x01	; 1
     9c2:	21 15       	cp	r18, r1
     9c4:	31 05       	cpc	r19, r1
     9c6:	a9 f5       	brne	.+106    	; 0xa32 <__unpack_f+0x9e>
     9c8:	41 15       	cp	r20, r1
     9ca:	51 05       	cpc	r21, r1
     9cc:	61 05       	cpc	r22, r1
     9ce:	71 05       	cpc	r23, r1
     9d0:	11 f4       	brne	.+4      	; 0x9d6 <__unpack_f+0x42>
     9d2:	82 e0       	ldi	r24, 0x02	; 2
     9d4:	37 c0       	rjmp	.+110    	; 0xa44 <__unpack_f+0xb0>
     9d6:	82 e8       	ldi	r24, 0x82	; 130
     9d8:	9f ef       	ldi	r25, 0xFF	; 255
     9da:	13 96       	adiw	r26, 0x03	; 3
     9dc:	9c 93       	st	X, r25
     9de:	8e 93       	st	-X, r24
     9e0:	12 97       	sbiw	r26, 0x02	; 2
     9e2:	9a 01       	movw	r18, r20
     9e4:	ab 01       	movw	r20, r22
     9e6:	67 e0       	ldi	r22, 0x07	; 7
     9e8:	22 0f       	add	r18, r18
     9ea:	33 1f       	adc	r19, r19
     9ec:	44 1f       	adc	r20, r20
     9ee:	55 1f       	adc	r21, r21
     9f0:	6a 95       	dec	r22
     9f2:	d1 f7       	brne	.-12     	; 0x9e8 <__unpack_f+0x54>
     9f4:	83 e0       	ldi	r24, 0x03	; 3
     9f6:	8c 93       	st	X, r24
     9f8:	0d c0       	rjmp	.+26     	; 0xa14 <__unpack_f+0x80>
     9fa:	22 0f       	add	r18, r18
     9fc:	33 1f       	adc	r19, r19
     9fe:	44 1f       	adc	r20, r20
     a00:	55 1f       	adc	r21, r21
     a02:	12 96       	adiw	r26, 0x02	; 2
     a04:	8d 91       	ld	r24, X+
     a06:	9c 91       	ld	r25, X
     a08:	13 97       	sbiw	r26, 0x03	; 3
     a0a:	01 97       	sbiw	r24, 0x01	; 1
     a0c:	13 96       	adiw	r26, 0x03	; 3
     a0e:	9c 93       	st	X, r25
     a10:	8e 93       	st	-X, r24
     a12:	12 97       	sbiw	r26, 0x02	; 2
     a14:	20 30       	cpi	r18, 0x00	; 0
     a16:	80 e0       	ldi	r24, 0x00	; 0
     a18:	38 07       	cpc	r19, r24
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	48 07       	cpc	r20, r24
     a1e:	80 e4       	ldi	r24, 0x40	; 64
     a20:	58 07       	cpc	r21, r24
     a22:	58 f3       	brcs	.-42     	; 0x9fa <__unpack_f+0x66>
     a24:	14 96       	adiw	r26, 0x04	; 4
     a26:	2d 93       	st	X+, r18
     a28:	3d 93       	st	X+, r19
     a2a:	4d 93       	st	X+, r20
     a2c:	5c 93       	st	X, r21
     a2e:	17 97       	sbiw	r26, 0x07	; 7
     a30:	08 95       	ret
     a32:	2f 3f       	cpi	r18, 0xFF	; 255
     a34:	31 05       	cpc	r19, r1
     a36:	79 f4       	brne	.+30     	; 0xa56 <__unpack_f+0xc2>
     a38:	41 15       	cp	r20, r1
     a3a:	51 05       	cpc	r21, r1
     a3c:	61 05       	cpc	r22, r1
     a3e:	71 05       	cpc	r23, r1
     a40:	19 f4       	brne	.+6      	; 0xa48 <__unpack_f+0xb4>
     a42:	84 e0       	ldi	r24, 0x04	; 4
     a44:	8c 93       	st	X, r24
     a46:	08 95       	ret
     a48:	64 ff       	sbrs	r22, 4
     a4a:	03 c0       	rjmp	.+6      	; 0xa52 <__unpack_f+0xbe>
     a4c:	81 e0       	ldi	r24, 0x01	; 1
     a4e:	8c 93       	st	X, r24
     a50:	12 c0       	rjmp	.+36     	; 0xa76 <__unpack_f+0xe2>
     a52:	1c 92       	st	X, r1
     a54:	10 c0       	rjmp	.+32     	; 0xa76 <__unpack_f+0xe2>
     a56:	2f 57       	subi	r18, 0x7F	; 127
     a58:	30 40       	sbci	r19, 0x00	; 0
     a5a:	13 96       	adiw	r26, 0x03	; 3
     a5c:	3c 93       	st	X, r19
     a5e:	2e 93       	st	-X, r18
     a60:	12 97       	sbiw	r26, 0x02	; 2
     a62:	83 e0       	ldi	r24, 0x03	; 3
     a64:	8c 93       	st	X, r24
     a66:	87 e0       	ldi	r24, 0x07	; 7
     a68:	44 0f       	add	r20, r20
     a6a:	55 1f       	adc	r21, r21
     a6c:	66 1f       	adc	r22, r22
     a6e:	77 1f       	adc	r23, r23
     a70:	8a 95       	dec	r24
     a72:	d1 f7       	brne	.-12     	; 0xa68 <__unpack_f+0xd4>
     a74:	70 64       	ori	r23, 0x40	; 64
     a76:	14 96       	adiw	r26, 0x04	; 4
     a78:	4d 93       	st	X+, r20
     a7a:	5d 93       	st	X+, r21
     a7c:	6d 93       	st	X+, r22
     a7e:	7c 93       	st	X, r23
     a80:	17 97       	sbiw	r26, 0x07	; 7
     a82:	08 95       	ret

00000a84 <__fpcmp_parts_f>:
     a84:	1f 93       	push	r17
     a86:	dc 01       	movw	r26, r24
     a88:	fb 01       	movw	r30, r22
     a8a:	9c 91       	ld	r25, X
     a8c:	92 30       	cpi	r25, 0x02	; 2
     a8e:	08 f4       	brcc	.+2      	; 0xa92 <__fpcmp_parts_f+0xe>
     a90:	47 c0       	rjmp	.+142    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a92:	80 81       	ld	r24, Z
     a94:	82 30       	cpi	r24, 0x02	; 2
     a96:	08 f4       	brcc	.+2      	; 0xa9a <__fpcmp_parts_f+0x16>
     a98:	43 c0       	rjmp	.+134    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a9a:	94 30       	cpi	r25, 0x04	; 4
     a9c:	51 f4       	brne	.+20     	; 0xab2 <__fpcmp_parts_f+0x2e>
     a9e:	11 96       	adiw	r26, 0x01	; 1
     aa0:	1c 91       	ld	r17, X
     aa2:	84 30       	cpi	r24, 0x04	; 4
     aa4:	99 f5       	brne	.+102    	; 0xb0c <__fpcmp_parts_f+0x88>
     aa6:	81 81       	ldd	r24, Z+1	; 0x01
     aa8:	68 2f       	mov	r22, r24
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	61 1b       	sub	r22, r17
     aae:	71 09       	sbc	r23, r1
     ab0:	3f c0       	rjmp	.+126    	; 0xb30 <__fpcmp_parts_f+0xac>
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	21 f0       	breq	.+8      	; 0xabe <__fpcmp_parts_f+0x3a>
     ab6:	92 30       	cpi	r25, 0x02	; 2
     ab8:	31 f4       	brne	.+12     	; 0xac6 <__fpcmp_parts_f+0x42>
     aba:	82 30       	cpi	r24, 0x02	; 2
     abc:	b9 f1       	breq	.+110    	; 0xb2c <__fpcmp_parts_f+0xa8>
     abe:	81 81       	ldd	r24, Z+1	; 0x01
     ac0:	88 23       	and	r24, r24
     ac2:	89 f1       	breq	.+98     	; 0xb26 <__fpcmp_parts_f+0xa2>
     ac4:	2d c0       	rjmp	.+90     	; 0xb20 <__fpcmp_parts_f+0x9c>
     ac6:	11 96       	adiw	r26, 0x01	; 1
     ac8:	1c 91       	ld	r17, X
     aca:	11 97       	sbiw	r26, 0x01	; 1
     acc:	82 30       	cpi	r24, 0x02	; 2
     ace:	f1 f0       	breq	.+60     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad0:	81 81       	ldd	r24, Z+1	; 0x01
     ad2:	18 17       	cp	r17, r24
     ad4:	d9 f4       	brne	.+54     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad6:	12 96       	adiw	r26, 0x02	; 2
     ad8:	2d 91       	ld	r18, X+
     ada:	3c 91       	ld	r19, X
     adc:	13 97       	sbiw	r26, 0x03	; 3
     ade:	82 81       	ldd	r24, Z+2	; 0x02
     ae0:	93 81       	ldd	r25, Z+3	; 0x03
     ae2:	82 17       	cp	r24, r18
     ae4:	93 07       	cpc	r25, r19
     ae6:	94 f0       	brlt	.+36     	; 0xb0c <__fpcmp_parts_f+0x88>
     ae8:	28 17       	cp	r18, r24
     aea:	39 07       	cpc	r19, r25
     aec:	bc f0       	brlt	.+46     	; 0xb1c <__fpcmp_parts_f+0x98>
     aee:	14 96       	adiw	r26, 0x04	; 4
     af0:	8d 91       	ld	r24, X+
     af2:	9d 91       	ld	r25, X+
     af4:	0d 90       	ld	r0, X+
     af6:	bc 91       	ld	r27, X
     af8:	a0 2d       	mov	r26, r0
     afa:	24 81       	ldd	r18, Z+4	; 0x04
     afc:	35 81       	ldd	r19, Z+5	; 0x05
     afe:	46 81       	ldd	r20, Z+6	; 0x06
     b00:	57 81       	ldd	r21, Z+7	; 0x07
     b02:	28 17       	cp	r18, r24
     b04:	39 07       	cpc	r19, r25
     b06:	4a 07       	cpc	r20, r26
     b08:	5b 07       	cpc	r21, r27
     b0a:	18 f4       	brcc	.+6      	; 0xb12 <__fpcmp_parts_f+0x8e>
     b0c:	11 23       	and	r17, r17
     b0e:	41 f0       	breq	.+16     	; 0xb20 <__fpcmp_parts_f+0x9c>
     b10:	0a c0       	rjmp	.+20     	; 0xb26 <__fpcmp_parts_f+0xa2>
     b12:	82 17       	cp	r24, r18
     b14:	93 07       	cpc	r25, r19
     b16:	a4 07       	cpc	r26, r20
     b18:	b5 07       	cpc	r27, r21
     b1a:	40 f4       	brcc	.+16     	; 0xb2c <__fpcmp_parts_f+0xa8>
     b1c:	11 23       	and	r17, r17
     b1e:	19 f0       	breq	.+6      	; 0xb26 <__fpcmp_parts_f+0xa2>
     b20:	61 e0       	ldi	r22, 0x01	; 1
     b22:	70 e0       	ldi	r23, 0x00	; 0
     b24:	05 c0       	rjmp	.+10     	; 0xb30 <__fpcmp_parts_f+0xac>
     b26:	6f ef       	ldi	r22, 0xFF	; 255
     b28:	7f ef       	ldi	r23, 0xFF	; 255
     b2a:	02 c0       	rjmp	.+4      	; 0xb30 <__fpcmp_parts_f+0xac>
     b2c:	60 e0       	ldi	r22, 0x00	; 0
     b2e:	70 e0       	ldi	r23, 0x00	; 0
     b30:	cb 01       	movw	r24, r22
     b32:	1f 91       	pop	r17
     b34:	08 95       	ret

00000b36 <DIO_enumSetPinDirection>:
#include "DIO_private.h"

/*<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< IO PIN <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<*/

DIO_ErrorStatus DIO_enumSetPinDirection (u8 Copy_u8Port, u8 Copy_u8Pin, u8 Copy_u8Direction)
{
     b36:	df 93       	push	r29
     b38:	cf 93       	push	r28
     b3a:	cd b7       	in	r28, 0x3d	; 61
     b3c:	de b7       	in	r29, 0x3e	; 62
     b3e:	28 97       	sbiw	r28, 0x08	; 8
     b40:	0f b6       	in	r0, 0x3f	; 63
     b42:	f8 94       	cli
     b44:	de bf       	out	0x3e, r29	; 62
     b46:	0f be       	out	0x3f, r0	; 63
     b48:	cd bf       	out	0x3d, r28	; 61
     b4a:	8a 83       	std	Y+2, r24	; 0x02
     b4c:	6b 83       	std	Y+3, r22	; 0x03
     b4e:	4c 83       	std	Y+4, r20	; 0x04
	DIO_ErrorStatus LOC_enumState = DIO_OK;
     b50:	81 e0       	ldi	r24, 0x01	; 1
     b52:	89 83       	std	Y+1, r24	; 0x01
	
	if (Copy_u8Port <= DIO_PORTD && Copy_u8Pin <= DIO_PIN7)
     b54:	8a 81       	ldd	r24, Y+2	; 0x02
     b56:	84 30       	cpi	r24, 0x04	; 4
     b58:	08 f0       	brcs	.+2      	; 0xb5c <DIO_enumSetPinDirection+0x26>
     b5a:	f1 c0       	rjmp	.+482    	; 0xd3e <DIO_enumSetPinDirection+0x208>
     b5c:	8b 81       	ldd	r24, Y+3	; 0x03
     b5e:	88 30       	cpi	r24, 0x08	; 8
     b60:	08 f0       	brcs	.+2      	; 0xb64 <DIO_enumSetPinDirection+0x2e>
     b62:	ed c0       	rjmp	.+474    	; 0xd3e <DIO_enumSetPinDirection+0x208>
	{
		if (Copy_u8Direction == DIO_PIN_OUTPUT)
     b64:	8c 81       	ldd	r24, Y+4	; 0x04
     b66:	81 30       	cpi	r24, 0x01	; 1
     b68:	09 f0       	breq	.+2      	; 0xb6c <DIO_enumSetPinDirection+0x36>
     b6a:	6f c0       	rjmp	.+222    	; 0xc4a <DIO_enumSetPinDirection+0x114>
		{
			switch (Copy_u8Port)
     b6c:	8a 81       	ldd	r24, Y+2	; 0x02
     b6e:	28 2f       	mov	r18, r24
     b70:	30 e0       	ldi	r19, 0x00	; 0
     b72:	38 87       	std	Y+8, r19	; 0x08
     b74:	2f 83       	std	Y+7, r18	; 0x07
     b76:	8f 81       	ldd	r24, Y+7	; 0x07
     b78:	98 85       	ldd	r25, Y+8	; 0x08
     b7a:	81 30       	cpi	r24, 0x01	; 1
     b7c:	91 05       	cpc	r25, r1
     b7e:	49 f1       	breq	.+82     	; 0xbd2 <DIO_enumSetPinDirection+0x9c>
     b80:	2f 81       	ldd	r18, Y+7	; 0x07
     b82:	38 85       	ldd	r19, Y+8	; 0x08
     b84:	22 30       	cpi	r18, 0x02	; 2
     b86:	31 05       	cpc	r19, r1
     b88:	2c f4       	brge	.+10     	; 0xb94 <DIO_enumSetPinDirection+0x5e>
     b8a:	8f 81       	ldd	r24, Y+7	; 0x07
     b8c:	98 85       	ldd	r25, Y+8	; 0x08
     b8e:	00 97       	sbiw	r24, 0x00	; 0
     b90:	61 f0       	breq	.+24     	; 0xbaa <DIO_enumSetPinDirection+0x74>
     b92:	d6 c0       	rjmp	.+428    	; 0xd40 <DIO_enumSetPinDirection+0x20a>
     b94:	2f 81       	ldd	r18, Y+7	; 0x07
     b96:	38 85       	ldd	r19, Y+8	; 0x08
     b98:	22 30       	cpi	r18, 0x02	; 2
     b9a:	31 05       	cpc	r19, r1
     b9c:	71 f1       	breq	.+92     	; 0xbfa <DIO_enumSetPinDirection+0xc4>
     b9e:	8f 81       	ldd	r24, Y+7	; 0x07
     ba0:	98 85       	ldd	r25, Y+8	; 0x08
     ba2:	83 30       	cpi	r24, 0x03	; 3
     ba4:	91 05       	cpc	r25, r1
     ba6:	e9 f1       	breq	.+122    	; 0xc22 <DIO_enumSetPinDirection+0xec>
     ba8:	cb c0       	rjmp	.+406    	; 0xd40 <DIO_enumSetPinDirection+0x20a>
			{
			case DIO_PORTA : SET_BIT(DDRA_Register, Copy_u8Pin); break;
     baa:	aa e3       	ldi	r26, 0x3A	; 58
     bac:	b0 e0       	ldi	r27, 0x00	; 0
     bae:	ea e3       	ldi	r30, 0x3A	; 58
     bb0:	f0 e0       	ldi	r31, 0x00	; 0
     bb2:	80 81       	ld	r24, Z
     bb4:	48 2f       	mov	r20, r24
     bb6:	8b 81       	ldd	r24, Y+3	; 0x03
     bb8:	28 2f       	mov	r18, r24
     bba:	30 e0       	ldi	r19, 0x00	; 0
     bbc:	81 e0       	ldi	r24, 0x01	; 1
     bbe:	90 e0       	ldi	r25, 0x00	; 0
     bc0:	02 2e       	mov	r0, r18
     bc2:	02 c0       	rjmp	.+4      	; 0xbc8 <DIO_enumSetPinDirection+0x92>
     bc4:	88 0f       	add	r24, r24
     bc6:	99 1f       	adc	r25, r25
     bc8:	0a 94       	dec	r0
     bca:	e2 f7       	brpl	.-8      	; 0xbc4 <DIO_enumSetPinDirection+0x8e>
     bcc:	84 2b       	or	r24, r20
     bce:	8c 93       	st	X, r24
     bd0:	b7 c0       	rjmp	.+366    	; 0xd40 <DIO_enumSetPinDirection+0x20a>
			case DIO_PORTB : SET_BIT(DDRB_Register, Copy_u8Pin); break;
     bd2:	a7 e3       	ldi	r26, 0x37	; 55
     bd4:	b0 e0       	ldi	r27, 0x00	; 0
     bd6:	e7 e3       	ldi	r30, 0x37	; 55
     bd8:	f0 e0       	ldi	r31, 0x00	; 0
     bda:	80 81       	ld	r24, Z
     bdc:	48 2f       	mov	r20, r24
     bde:	8b 81       	ldd	r24, Y+3	; 0x03
     be0:	28 2f       	mov	r18, r24
     be2:	30 e0       	ldi	r19, 0x00	; 0
     be4:	81 e0       	ldi	r24, 0x01	; 1
     be6:	90 e0       	ldi	r25, 0x00	; 0
     be8:	02 2e       	mov	r0, r18
     bea:	02 c0       	rjmp	.+4      	; 0xbf0 <DIO_enumSetPinDirection+0xba>
     bec:	88 0f       	add	r24, r24
     bee:	99 1f       	adc	r25, r25
     bf0:	0a 94       	dec	r0
     bf2:	e2 f7       	brpl	.-8      	; 0xbec <DIO_enumSetPinDirection+0xb6>
     bf4:	84 2b       	or	r24, r20
     bf6:	8c 93       	st	X, r24
     bf8:	a3 c0       	rjmp	.+326    	; 0xd40 <DIO_enumSetPinDirection+0x20a>
			case DIO_PORTC : SET_BIT(DDRC_Register, Copy_u8Pin); break;
     bfa:	a4 e3       	ldi	r26, 0x34	; 52
     bfc:	b0 e0       	ldi	r27, 0x00	; 0
     bfe:	e4 e3       	ldi	r30, 0x34	; 52
     c00:	f0 e0       	ldi	r31, 0x00	; 0
     c02:	80 81       	ld	r24, Z
     c04:	48 2f       	mov	r20, r24
     c06:	8b 81       	ldd	r24, Y+3	; 0x03
     c08:	28 2f       	mov	r18, r24
     c0a:	30 e0       	ldi	r19, 0x00	; 0
     c0c:	81 e0       	ldi	r24, 0x01	; 1
     c0e:	90 e0       	ldi	r25, 0x00	; 0
     c10:	02 2e       	mov	r0, r18
     c12:	02 c0       	rjmp	.+4      	; 0xc18 <DIO_enumSetPinDirection+0xe2>
     c14:	88 0f       	add	r24, r24
     c16:	99 1f       	adc	r25, r25
     c18:	0a 94       	dec	r0
     c1a:	e2 f7       	brpl	.-8      	; 0xc14 <DIO_enumSetPinDirection+0xde>
     c1c:	84 2b       	or	r24, r20
     c1e:	8c 93       	st	X, r24
     c20:	8f c0       	rjmp	.+286    	; 0xd40 <DIO_enumSetPinDirection+0x20a>
			case DIO_PORTD : SET_BIT(DDRD_Register, Copy_u8Pin); break;
     c22:	a1 e3       	ldi	r26, 0x31	; 49
     c24:	b0 e0       	ldi	r27, 0x00	; 0
     c26:	e1 e3       	ldi	r30, 0x31	; 49
     c28:	f0 e0       	ldi	r31, 0x00	; 0
     c2a:	80 81       	ld	r24, Z
     c2c:	48 2f       	mov	r20, r24
     c2e:	8b 81       	ldd	r24, Y+3	; 0x03
     c30:	28 2f       	mov	r18, r24
     c32:	30 e0       	ldi	r19, 0x00	; 0
     c34:	81 e0       	ldi	r24, 0x01	; 1
     c36:	90 e0       	ldi	r25, 0x00	; 0
     c38:	02 2e       	mov	r0, r18
     c3a:	02 c0       	rjmp	.+4      	; 0xc40 <DIO_enumSetPinDirection+0x10a>
     c3c:	88 0f       	add	r24, r24
     c3e:	99 1f       	adc	r25, r25
     c40:	0a 94       	dec	r0
     c42:	e2 f7       	brpl	.-8      	; 0xc3c <DIO_enumSetPinDirection+0x106>
     c44:	84 2b       	or	r24, r20
     c46:	8c 93       	st	X, r24
     c48:	7b c0       	rjmp	.+246    	; 0xd40 <DIO_enumSetPinDirection+0x20a>
			}
		}
		
		else if (Copy_u8Direction == DIO_PIN_INPUT)
     c4a:	8c 81       	ldd	r24, Y+4	; 0x04
     c4c:	88 23       	and	r24, r24
     c4e:	09 f0       	breq	.+2      	; 0xc52 <DIO_enumSetPinDirection+0x11c>
     c50:	74 c0       	rjmp	.+232    	; 0xd3a <DIO_enumSetPinDirection+0x204>
		{
			switch (Copy_u8Port)
     c52:	8a 81       	ldd	r24, Y+2	; 0x02
     c54:	28 2f       	mov	r18, r24
     c56:	30 e0       	ldi	r19, 0x00	; 0
     c58:	3e 83       	std	Y+6, r19	; 0x06
     c5a:	2d 83       	std	Y+5, r18	; 0x05
     c5c:	8d 81       	ldd	r24, Y+5	; 0x05
     c5e:	9e 81       	ldd	r25, Y+6	; 0x06
     c60:	81 30       	cpi	r24, 0x01	; 1
     c62:	91 05       	cpc	r25, r1
     c64:	59 f1       	breq	.+86     	; 0xcbc <DIO_enumSetPinDirection+0x186>
     c66:	2d 81       	ldd	r18, Y+5	; 0x05
     c68:	3e 81       	ldd	r19, Y+6	; 0x06
     c6a:	22 30       	cpi	r18, 0x02	; 2
     c6c:	31 05       	cpc	r19, r1
     c6e:	2c f4       	brge	.+10     	; 0xc7a <DIO_enumSetPinDirection+0x144>
     c70:	8d 81       	ldd	r24, Y+5	; 0x05
     c72:	9e 81       	ldd	r25, Y+6	; 0x06
     c74:	00 97       	sbiw	r24, 0x00	; 0
     c76:	69 f0       	breq	.+26     	; 0xc92 <DIO_enumSetPinDirection+0x15c>
     c78:	63 c0       	rjmp	.+198    	; 0xd40 <DIO_enumSetPinDirection+0x20a>
     c7a:	2d 81       	ldd	r18, Y+5	; 0x05
     c7c:	3e 81       	ldd	r19, Y+6	; 0x06
     c7e:	22 30       	cpi	r18, 0x02	; 2
     c80:	31 05       	cpc	r19, r1
     c82:	89 f1       	breq	.+98     	; 0xce6 <DIO_enumSetPinDirection+0x1b0>
     c84:	8d 81       	ldd	r24, Y+5	; 0x05
     c86:	9e 81       	ldd	r25, Y+6	; 0x06
     c88:	83 30       	cpi	r24, 0x03	; 3
     c8a:	91 05       	cpc	r25, r1
     c8c:	09 f4       	brne	.+2      	; 0xc90 <DIO_enumSetPinDirection+0x15a>
     c8e:	40 c0       	rjmp	.+128    	; 0xd10 <DIO_enumSetPinDirection+0x1da>
     c90:	57 c0       	rjmp	.+174    	; 0xd40 <DIO_enumSetPinDirection+0x20a>
			{
			case DIO_PORTA : CLR_BIT(DDRA_Register, Copy_u8Pin); break;
     c92:	aa e3       	ldi	r26, 0x3A	; 58
     c94:	b0 e0       	ldi	r27, 0x00	; 0
     c96:	ea e3       	ldi	r30, 0x3A	; 58
     c98:	f0 e0       	ldi	r31, 0x00	; 0
     c9a:	80 81       	ld	r24, Z
     c9c:	48 2f       	mov	r20, r24
     c9e:	8b 81       	ldd	r24, Y+3	; 0x03
     ca0:	28 2f       	mov	r18, r24
     ca2:	30 e0       	ldi	r19, 0x00	; 0
     ca4:	81 e0       	ldi	r24, 0x01	; 1
     ca6:	90 e0       	ldi	r25, 0x00	; 0
     ca8:	02 2e       	mov	r0, r18
     caa:	02 c0       	rjmp	.+4      	; 0xcb0 <DIO_enumSetPinDirection+0x17a>
     cac:	88 0f       	add	r24, r24
     cae:	99 1f       	adc	r25, r25
     cb0:	0a 94       	dec	r0
     cb2:	e2 f7       	brpl	.-8      	; 0xcac <DIO_enumSetPinDirection+0x176>
     cb4:	80 95       	com	r24
     cb6:	84 23       	and	r24, r20
     cb8:	8c 93       	st	X, r24
     cba:	42 c0       	rjmp	.+132    	; 0xd40 <DIO_enumSetPinDirection+0x20a>
			case DIO_PORTB : CLR_BIT(DDRB_Register, Copy_u8Pin); break;
     cbc:	a7 e3       	ldi	r26, 0x37	; 55
     cbe:	b0 e0       	ldi	r27, 0x00	; 0
     cc0:	e7 e3       	ldi	r30, 0x37	; 55
     cc2:	f0 e0       	ldi	r31, 0x00	; 0
     cc4:	80 81       	ld	r24, Z
     cc6:	48 2f       	mov	r20, r24
     cc8:	8b 81       	ldd	r24, Y+3	; 0x03
     cca:	28 2f       	mov	r18, r24
     ccc:	30 e0       	ldi	r19, 0x00	; 0
     cce:	81 e0       	ldi	r24, 0x01	; 1
     cd0:	90 e0       	ldi	r25, 0x00	; 0
     cd2:	02 2e       	mov	r0, r18
     cd4:	02 c0       	rjmp	.+4      	; 0xcda <DIO_enumSetPinDirection+0x1a4>
     cd6:	88 0f       	add	r24, r24
     cd8:	99 1f       	adc	r25, r25
     cda:	0a 94       	dec	r0
     cdc:	e2 f7       	brpl	.-8      	; 0xcd6 <DIO_enumSetPinDirection+0x1a0>
     cde:	80 95       	com	r24
     ce0:	84 23       	and	r24, r20
     ce2:	8c 93       	st	X, r24
     ce4:	2d c0       	rjmp	.+90     	; 0xd40 <DIO_enumSetPinDirection+0x20a>
			case DIO_PORTC : CLR_BIT(DDRC_Register, Copy_u8Pin); break;
     ce6:	a4 e3       	ldi	r26, 0x34	; 52
     ce8:	b0 e0       	ldi	r27, 0x00	; 0
     cea:	e4 e3       	ldi	r30, 0x34	; 52
     cec:	f0 e0       	ldi	r31, 0x00	; 0
     cee:	80 81       	ld	r24, Z
     cf0:	48 2f       	mov	r20, r24
     cf2:	8b 81       	ldd	r24, Y+3	; 0x03
     cf4:	28 2f       	mov	r18, r24
     cf6:	30 e0       	ldi	r19, 0x00	; 0
     cf8:	81 e0       	ldi	r24, 0x01	; 1
     cfa:	90 e0       	ldi	r25, 0x00	; 0
     cfc:	02 2e       	mov	r0, r18
     cfe:	02 c0       	rjmp	.+4      	; 0xd04 <DIO_enumSetPinDirection+0x1ce>
     d00:	88 0f       	add	r24, r24
     d02:	99 1f       	adc	r25, r25
     d04:	0a 94       	dec	r0
     d06:	e2 f7       	brpl	.-8      	; 0xd00 <DIO_enumSetPinDirection+0x1ca>
     d08:	80 95       	com	r24
     d0a:	84 23       	and	r24, r20
     d0c:	8c 93       	st	X, r24
     d0e:	18 c0       	rjmp	.+48     	; 0xd40 <DIO_enumSetPinDirection+0x20a>
			case DIO_PORTD : CLR_BIT(DDRD_Register, Copy_u8Pin); break;
     d10:	a1 e3       	ldi	r26, 0x31	; 49
     d12:	b0 e0       	ldi	r27, 0x00	; 0
     d14:	e1 e3       	ldi	r30, 0x31	; 49
     d16:	f0 e0       	ldi	r31, 0x00	; 0
     d18:	80 81       	ld	r24, Z
     d1a:	48 2f       	mov	r20, r24
     d1c:	8b 81       	ldd	r24, Y+3	; 0x03
     d1e:	28 2f       	mov	r18, r24
     d20:	30 e0       	ldi	r19, 0x00	; 0
     d22:	81 e0       	ldi	r24, 0x01	; 1
     d24:	90 e0       	ldi	r25, 0x00	; 0
     d26:	02 2e       	mov	r0, r18
     d28:	02 c0       	rjmp	.+4      	; 0xd2e <DIO_enumSetPinDirection+0x1f8>
     d2a:	88 0f       	add	r24, r24
     d2c:	99 1f       	adc	r25, r25
     d2e:	0a 94       	dec	r0
     d30:	e2 f7       	brpl	.-8      	; 0xd2a <DIO_enumSetPinDirection+0x1f4>
     d32:	80 95       	com	r24
     d34:	84 23       	and	r24, r20
     d36:	8c 93       	st	X, r24
     d38:	03 c0       	rjmp	.+6      	; 0xd40 <DIO_enumSetPinDirection+0x20a>
			}			
		}
		
		else
		{
			LOC_enumState = DIO_NOK;
     d3a:	19 82       	std	Y+1, r1	; 0x01
     d3c:	01 c0       	rjmp	.+2      	; 0xd40 <DIO_enumSetPinDirection+0x20a>
		}
	}
	
	else
	{
		LOC_enumState = DIO_NOK;
     d3e:	19 82       	std	Y+1, r1	; 0x01
	}
	
	return LOC_enumState; 
     d40:	89 81       	ldd	r24, Y+1	; 0x01
}
     d42:	28 96       	adiw	r28, 0x08	; 8
     d44:	0f b6       	in	r0, 0x3f	; 63
     d46:	f8 94       	cli
     d48:	de bf       	out	0x3e, r29	; 62
     d4a:	0f be       	out	0x3f, r0	; 63
     d4c:	cd bf       	out	0x3d, r28	; 61
     d4e:	cf 91       	pop	r28
     d50:	df 91       	pop	r29
     d52:	08 95       	ret

00000d54 <DIO_enumSetPinValue>:

DIO_ErrorStatus DIO_enumSetPinValue     (u8 Copy_u8Port, u8 Copy_u8Pin, u8 Copy_u8Value    )
{
     d54:	df 93       	push	r29
     d56:	cf 93       	push	r28
     d58:	cd b7       	in	r28, 0x3d	; 61
     d5a:	de b7       	in	r29, 0x3e	; 62
     d5c:	28 97       	sbiw	r28, 0x08	; 8
     d5e:	0f b6       	in	r0, 0x3f	; 63
     d60:	f8 94       	cli
     d62:	de bf       	out	0x3e, r29	; 62
     d64:	0f be       	out	0x3f, r0	; 63
     d66:	cd bf       	out	0x3d, r28	; 61
     d68:	8a 83       	std	Y+2, r24	; 0x02
     d6a:	6b 83       	std	Y+3, r22	; 0x03
     d6c:	4c 83       	std	Y+4, r20	; 0x04
	DIO_ErrorStatus LOC_enumState = DIO_OK;
     d6e:	81 e0       	ldi	r24, 0x01	; 1
     d70:	89 83       	std	Y+1, r24	; 0x01
	
	if (Copy_u8Port <= DIO_PORTD && Copy_u8Pin <= DIO_PIN7)
     d72:	8a 81       	ldd	r24, Y+2	; 0x02
     d74:	84 30       	cpi	r24, 0x04	; 4
     d76:	08 f0       	brcs	.+2      	; 0xd7a <DIO_enumSetPinValue+0x26>
     d78:	f1 c0       	rjmp	.+482    	; 0xf5c <DIO_enumSetPinValue+0x208>
     d7a:	8b 81       	ldd	r24, Y+3	; 0x03
     d7c:	88 30       	cpi	r24, 0x08	; 8
     d7e:	08 f0       	brcs	.+2      	; 0xd82 <DIO_enumSetPinValue+0x2e>
     d80:	ed c0       	rjmp	.+474    	; 0xf5c <DIO_enumSetPinValue+0x208>
	{
		if (Copy_u8Value == DIO_PIN_HIGH)
     d82:	8c 81       	ldd	r24, Y+4	; 0x04
     d84:	81 30       	cpi	r24, 0x01	; 1
     d86:	09 f0       	breq	.+2      	; 0xd8a <DIO_enumSetPinValue+0x36>
     d88:	6f c0       	rjmp	.+222    	; 0xe68 <DIO_enumSetPinValue+0x114>
		{
			switch (Copy_u8Port)
     d8a:	8a 81       	ldd	r24, Y+2	; 0x02
     d8c:	28 2f       	mov	r18, r24
     d8e:	30 e0       	ldi	r19, 0x00	; 0
     d90:	38 87       	std	Y+8, r19	; 0x08
     d92:	2f 83       	std	Y+7, r18	; 0x07
     d94:	8f 81       	ldd	r24, Y+7	; 0x07
     d96:	98 85       	ldd	r25, Y+8	; 0x08
     d98:	81 30       	cpi	r24, 0x01	; 1
     d9a:	91 05       	cpc	r25, r1
     d9c:	49 f1       	breq	.+82     	; 0xdf0 <DIO_enumSetPinValue+0x9c>
     d9e:	2f 81       	ldd	r18, Y+7	; 0x07
     da0:	38 85       	ldd	r19, Y+8	; 0x08
     da2:	22 30       	cpi	r18, 0x02	; 2
     da4:	31 05       	cpc	r19, r1
     da6:	2c f4       	brge	.+10     	; 0xdb2 <DIO_enumSetPinValue+0x5e>
     da8:	8f 81       	ldd	r24, Y+7	; 0x07
     daa:	98 85       	ldd	r25, Y+8	; 0x08
     dac:	00 97       	sbiw	r24, 0x00	; 0
     dae:	61 f0       	breq	.+24     	; 0xdc8 <DIO_enumSetPinValue+0x74>
     db0:	d6 c0       	rjmp	.+428    	; 0xf5e <DIO_enumSetPinValue+0x20a>
     db2:	2f 81       	ldd	r18, Y+7	; 0x07
     db4:	38 85       	ldd	r19, Y+8	; 0x08
     db6:	22 30       	cpi	r18, 0x02	; 2
     db8:	31 05       	cpc	r19, r1
     dba:	71 f1       	breq	.+92     	; 0xe18 <DIO_enumSetPinValue+0xc4>
     dbc:	8f 81       	ldd	r24, Y+7	; 0x07
     dbe:	98 85       	ldd	r25, Y+8	; 0x08
     dc0:	83 30       	cpi	r24, 0x03	; 3
     dc2:	91 05       	cpc	r25, r1
     dc4:	e9 f1       	breq	.+122    	; 0xe40 <DIO_enumSetPinValue+0xec>
     dc6:	cb c0       	rjmp	.+406    	; 0xf5e <DIO_enumSetPinValue+0x20a>
			{
			case DIO_PORTA : SET_BIT(PORTA_Register, Copy_u8Pin); break;
     dc8:	ab e3       	ldi	r26, 0x3B	; 59
     dca:	b0 e0       	ldi	r27, 0x00	; 0
     dcc:	eb e3       	ldi	r30, 0x3B	; 59
     dce:	f0 e0       	ldi	r31, 0x00	; 0
     dd0:	80 81       	ld	r24, Z
     dd2:	48 2f       	mov	r20, r24
     dd4:	8b 81       	ldd	r24, Y+3	; 0x03
     dd6:	28 2f       	mov	r18, r24
     dd8:	30 e0       	ldi	r19, 0x00	; 0
     dda:	81 e0       	ldi	r24, 0x01	; 1
     ddc:	90 e0       	ldi	r25, 0x00	; 0
     dde:	02 2e       	mov	r0, r18
     de0:	02 c0       	rjmp	.+4      	; 0xde6 <DIO_enumSetPinValue+0x92>
     de2:	88 0f       	add	r24, r24
     de4:	99 1f       	adc	r25, r25
     de6:	0a 94       	dec	r0
     de8:	e2 f7       	brpl	.-8      	; 0xde2 <DIO_enumSetPinValue+0x8e>
     dea:	84 2b       	or	r24, r20
     dec:	8c 93       	st	X, r24
     dee:	b7 c0       	rjmp	.+366    	; 0xf5e <DIO_enumSetPinValue+0x20a>
			case DIO_PORTB : SET_BIT(PORTB_Register, Copy_u8Pin); break;
     df0:	a8 e3       	ldi	r26, 0x38	; 56
     df2:	b0 e0       	ldi	r27, 0x00	; 0
     df4:	e8 e3       	ldi	r30, 0x38	; 56
     df6:	f0 e0       	ldi	r31, 0x00	; 0
     df8:	80 81       	ld	r24, Z
     dfa:	48 2f       	mov	r20, r24
     dfc:	8b 81       	ldd	r24, Y+3	; 0x03
     dfe:	28 2f       	mov	r18, r24
     e00:	30 e0       	ldi	r19, 0x00	; 0
     e02:	81 e0       	ldi	r24, 0x01	; 1
     e04:	90 e0       	ldi	r25, 0x00	; 0
     e06:	02 2e       	mov	r0, r18
     e08:	02 c0       	rjmp	.+4      	; 0xe0e <DIO_enumSetPinValue+0xba>
     e0a:	88 0f       	add	r24, r24
     e0c:	99 1f       	adc	r25, r25
     e0e:	0a 94       	dec	r0
     e10:	e2 f7       	brpl	.-8      	; 0xe0a <DIO_enumSetPinValue+0xb6>
     e12:	84 2b       	or	r24, r20
     e14:	8c 93       	st	X, r24
     e16:	a3 c0       	rjmp	.+326    	; 0xf5e <DIO_enumSetPinValue+0x20a>
			case DIO_PORTC : SET_BIT(PORTC_Register, Copy_u8Pin); break;
     e18:	a5 e3       	ldi	r26, 0x35	; 53
     e1a:	b0 e0       	ldi	r27, 0x00	; 0
     e1c:	e5 e3       	ldi	r30, 0x35	; 53
     e1e:	f0 e0       	ldi	r31, 0x00	; 0
     e20:	80 81       	ld	r24, Z
     e22:	48 2f       	mov	r20, r24
     e24:	8b 81       	ldd	r24, Y+3	; 0x03
     e26:	28 2f       	mov	r18, r24
     e28:	30 e0       	ldi	r19, 0x00	; 0
     e2a:	81 e0       	ldi	r24, 0x01	; 1
     e2c:	90 e0       	ldi	r25, 0x00	; 0
     e2e:	02 2e       	mov	r0, r18
     e30:	02 c0       	rjmp	.+4      	; 0xe36 <DIO_enumSetPinValue+0xe2>
     e32:	88 0f       	add	r24, r24
     e34:	99 1f       	adc	r25, r25
     e36:	0a 94       	dec	r0
     e38:	e2 f7       	brpl	.-8      	; 0xe32 <DIO_enumSetPinValue+0xde>
     e3a:	84 2b       	or	r24, r20
     e3c:	8c 93       	st	X, r24
     e3e:	8f c0       	rjmp	.+286    	; 0xf5e <DIO_enumSetPinValue+0x20a>
			case DIO_PORTD : SET_BIT(PORTD_Register, Copy_u8Pin); break;
     e40:	a2 e3       	ldi	r26, 0x32	; 50
     e42:	b0 e0       	ldi	r27, 0x00	; 0
     e44:	e2 e3       	ldi	r30, 0x32	; 50
     e46:	f0 e0       	ldi	r31, 0x00	; 0
     e48:	80 81       	ld	r24, Z
     e4a:	48 2f       	mov	r20, r24
     e4c:	8b 81       	ldd	r24, Y+3	; 0x03
     e4e:	28 2f       	mov	r18, r24
     e50:	30 e0       	ldi	r19, 0x00	; 0
     e52:	81 e0       	ldi	r24, 0x01	; 1
     e54:	90 e0       	ldi	r25, 0x00	; 0
     e56:	02 2e       	mov	r0, r18
     e58:	02 c0       	rjmp	.+4      	; 0xe5e <DIO_enumSetPinValue+0x10a>
     e5a:	88 0f       	add	r24, r24
     e5c:	99 1f       	adc	r25, r25
     e5e:	0a 94       	dec	r0
     e60:	e2 f7       	brpl	.-8      	; 0xe5a <DIO_enumSetPinValue+0x106>
     e62:	84 2b       	or	r24, r20
     e64:	8c 93       	st	X, r24
     e66:	7b c0       	rjmp	.+246    	; 0xf5e <DIO_enumSetPinValue+0x20a>
			}
		}
		
		else if (Copy_u8Value == DIO_PIN_LOW)
     e68:	8c 81       	ldd	r24, Y+4	; 0x04
     e6a:	88 23       	and	r24, r24
     e6c:	09 f0       	breq	.+2      	; 0xe70 <DIO_enumSetPinValue+0x11c>
     e6e:	74 c0       	rjmp	.+232    	; 0xf58 <DIO_enumSetPinValue+0x204>
		{
			switch (Copy_u8Port)
     e70:	8a 81       	ldd	r24, Y+2	; 0x02
     e72:	28 2f       	mov	r18, r24
     e74:	30 e0       	ldi	r19, 0x00	; 0
     e76:	3e 83       	std	Y+6, r19	; 0x06
     e78:	2d 83       	std	Y+5, r18	; 0x05
     e7a:	8d 81       	ldd	r24, Y+5	; 0x05
     e7c:	9e 81       	ldd	r25, Y+6	; 0x06
     e7e:	81 30       	cpi	r24, 0x01	; 1
     e80:	91 05       	cpc	r25, r1
     e82:	59 f1       	breq	.+86     	; 0xeda <DIO_enumSetPinValue+0x186>
     e84:	2d 81       	ldd	r18, Y+5	; 0x05
     e86:	3e 81       	ldd	r19, Y+6	; 0x06
     e88:	22 30       	cpi	r18, 0x02	; 2
     e8a:	31 05       	cpc	r19, r1
     e8c:	2c f4       	brge	.+10     	; 0xe98 <DIO_enumSetPinValue+0x144>
     e8e:	8d 81       	ldd	r24, Y+5	; 0x05
     e90:	9e 81       	ldd	r25, Y+6	; 0x06
     e92:	00 97       	sbiw	r24, 0x00	; 0
     e94:	69 f0       	breq	.+26     	; 0xeb0 <DIO_enumSetPinValue+0x15c>
     e96:	63 c0       	rjmp	.+198    	; 0xf5e <DIO_enumSetPinValue+0x20a>
     e98:	2d 81       	ldd	r18, Y+5	; 0x05
     e9a:	3e 81       	ldd	r19, Y+6	; 0x06
     e9c:	22 30       	cpi	r18, 0x02	; 2
     e9e:	31 05       	cpc	r19, r1
     ea0:	89 f1       	breq	.+98     	; 0xf04 <DIO_enumSetPinValue+0x1b0>
     ea2:	8d 81       	ldd	r24, Y+5	; 0x05
     ea4:	9e 81       	ldd	r25, Y+6	; 0x06
     ea6:	83 30       	cpi	r24, 0x03	; 3
     ea8:	91 05       	cpc	r25, r1
     eaa:	09 f4       	brne	.+2      	; 0xeae <DIO_enumSetPinValue+0x15a>
     eac:	40 c0       	rjmp	.+128    	; 0xf2e <DIO_enumSetPinValue+0x1da>
     eae:	57 c0       	rjmp	.+174    	; 0xf5e <DIO_enumSetPinValue+0x20a>
			{
			case DIO_PORTA : CLR_BIT(PORTA_Register, Copy_u8Pin); break;
     eb0:	ab e3       	ldi	r26, 0x3B	; 59
     eb2:	b0 e0       	ldi	r27, 0x00	; 0
     eb4:	eb e3       	ldi	r30, 0x3B	; 59
     eb6:	f0 e0       	ldi	r31, 0x00	; 0
     eb8:	80 81       	ld	r24, Z
     eba:	48 2f       	mov	r20, r24
     ebc:	8b 81       	ldd	r24, Y+3	; 0x03
     ebe:	28 2f       	mov	r18, r24
     ec0:	30 e0       	ldi	r19, 0x00	; 0
     ec2:	81 e0       	ldi	r24, 0x01	; 1
     ec4:	90 e0       	ldi	r25, 0x00	; 0
     ec6:	02 2e       	mov	r0, r18
     ec8:	02 c0       	rjmp	.+4      	; 0xece <DIO_enumSetPinValue+0x17a>
     eca:	88 0f       	add	r24, r24
     ecc:	99 1f       	adc	r25, r25
     ece:	0a 94       	dec	r0
     ed0:	e2 f7       	brpl	.-8      	; 0xeca <DIO_enumSetPinValue+0x176>
     ed2:	80 95       	com	r24
     ed4:	84 23       	and	r24, r20
     ed6:	8c 93       	st	X, r24
     ed8:	42 c0       	rjmp	.+132    	; 0xf5e <DIO_enumSetPinValue+0x20a>
			case DIO_PORTB : CLR_BIT(PORTB_Register, Copy_u8Pin); break;
     eda:	a8 e3       	ldi	r26, 0x38	; 56
     edc:	b0 e0       	ldi	r27, 0x00	; 0
     ede:	e8 e3       	ldi	r30, 0x38	; 56
     ee0:	f0 e0       	ldi	r31, 0x00	; 0
     ee2:	80 81       	ld	r24, Z
     ee4:	48 2f       	mov	r20, r24
     ee6:	8b 81       	ldd	r24, Y+3	; 0x03
     ee8:	28 2f       	mov	r18, r24
     eea:	30 e0       	ldi	r19, 0x00	; 0
     eec:	81 e0       	ldi	r24, 0x01	; 1
     eee:	90 e0       	ldi	r25, 0x00	; 0
     ef0:	02 2e       	mov	r0, r18
     ef2:	02 c0       	rjmp	.+4      	; 0xef8 <DIO_enumSetPinValue+0x1a4>
     ef4:	88 0f       	add	r24, r24
     ef6:	99 1f       	adc	r25, r25
     ef8:	0a 94       	dec	r0
     efa:	e2 f7       	brpl	.-8      	; 0xef4 <DIO_enumSetPinValue+0x1a0>
     efc:	80 95       	com	r24
     efe:	84 23       	and	r24, r20
     f00:	8c 93       	st	X, r24
     f02:	2d c0       	rjmp	.+90     	; 0xf5e <DIO_enumSetPinValue+0x20a>
			case DIO_PORTC : CLR_BIT(PORTC_Register, Copy_u8Pin); break;
     f04:	a5 e3       	ldi	r26, 0x35	; 53
     f06:	b0 e0       	ldi	r27, 0x00	; 0
     f08:	e5 e3       	ldi	r30, 0x35	; 53
     f0a:	f0 e0       	ldi	r31, 0x00	; 0
     f0c:	80 81       	ld	r24, Z
     f0e:	48 2f       	mov	r20, r24
     f10:	8b 81       	ldd	r24, Y+3	; 0x03
     f12:	28 2f       	mov	r18, r24
     f14:	30 e0       	ldi	r19, 0x00	; 0
     f16:	81 e0       	ldi	r24, 0x01	; 1
     f18:	90 e0       	ldi	r25, 0x00	; 0
     f1a:	02 2e       	mov	r0, r18
     f1c:	02 c0       	rjmp	.+4      	; 0xf22 <DIO_enumSetPinValue+0x1ce>
     f1e:	88 0f       	add	r24, r24
     f20:	99 1f       	adc	r25, r25
     f22:	0a 94       	dec	r0
     f24:	e2 f7       	brpl	.-8      	; 0xf1e <DIO_enumSetPinValue+0x1ca>
     f26:	80 95       	com	r24
     f28:	84 23       	and	r24, r20
     f2a:	8c 93       	st	X, r24
     f2c:	18 c0       	rjmp	.+48     	; 0xf5e <DIO_enumSetPinValue+0x20a>
			case DIO_PORTD : CLR_BIT(PORTD_Register, Copy_u8Pin); break;
     f2e:	a2 e3       	ldi	r26, 0x32	; 50
     f30:	b0 e0       	ldi	r27, 0x00	; 0
     f32:	e2 e3       	ldi	r30, 0x32	; 50
     f34:	f0 e0       	ldi	r31, 0x00	; 0
     f36:	80 81       	ld	r24, Z
     f38:	48 2f       	mov	r20, r24
     f3a:	8b 81       	ldd	r24, Y+3	; 0x03
     f3c:	28 2f       	mov	r18, r24
     f3e:	30 e0       	ldi	r19, 0x00	; 0
     f40:	81 e0       	ldi	r24, 0x01	; 1
     f42:	90 e0       	ldi	r25, 0x00	; 0
     f44:	02 2e       	mov	r0, r18
     f46:	02 c0       	rjmp	.+4      	; 0xf4c <DIO_enumSetPinValue+0x1f8>
     f48:	88 0f       	add	r24, r24
     f4a:	99 1f       	adc	r25, r25
     f4c:	0a 94       	dec	r0
     f4e:	e2 f7       	brpl	.-8      	; 0xf48 <DIO_enumSetPinValue+0x1f4>
     f50:	80 95       	com	r24
     f52:	84 23       	and	r24, r20
     f54:	8c 93       	st	X, r24
     f56:	03 c0       	rjmp	.+6      	; 0xf5e <DIO_enumSetPinValue+0x20a>
			}			
		}
		
		else
		{
			LOC_enumState = DIO_NOK;
     f58:	19 82       	std	Y+1, r1	; 0x01
     f5a:	01 c0       	rjmp	.+2      	; 0xf5e <DIO_enumSetPinValue+0x20a>
		}
	}
	
	else
	{
		LOC_enumState = DIO_NOK;
     f5c:	19 82       	std	Y+1, r1	; 0x01
	}
	
	return LOC_enumState; 	
     f5e:	89 81       	ldd	r24, Y+1	; 0x01
}
     f60:	28 96       	adiw	r28, 0x08	; 8
     f62:	0f b6       	in	r0, 0x3f	; 63
     f64:	f8 94       	cli
     f66:	de bf       	out	0x3e, r29	; 62
     f68:	0f be       	out	0x3f, r0	; 63
     f6a:	cd bf       	out	0x3d, r28	; 61
     f6c:	cf 91       	pop	r28
     f6e:	df 91       	pop	r29
     f70:	08 95       	ret

00000f72 <DIO_enumGetPinValue>:

DIO_ErrorStatus DIO_enumGetPinValue     (u8 Copy_u8Port, u8 Copy_u8Pin, u8 *Copy_u8PtrData )
{
     f72:	df 93       	push	r29
     f74:	cf 93       	push	r28
     f76:	cd b7       	in	r28, 0x3d	; 61
     f78:	de b7       	in	r29, 0x3e	; 62
     f7a:	27 97       	sbiw	r28, 0x07	; 7
     f7c:	0f b6       	in	r0, 0x3f	; 63
     f7e:	f8 94       	cli
     f80:	de bf       	out	0x3e, r29	; 62
     f82:	0f be       	out	0x3f, r0	; 63
     f84:	cd bf       	out	0x3d, r28	; 61
     f86:	8a 83       	std	Y+2, r24	; 0x02
     f88:	6b 83       	std	Y+3, r22	; 0x03
     f8a:	5d 83       	std	Y+5, r21	; 0x05
     f8c:	4c 83       	std	Y+4, r20	; 0x04
	DIO_ErrorStatus LOC_enumState = DIO_OK;
     f8e:	81 e0       	ldi	r24, 0x01	; 1
     f90:	89 83       	std	Y+1, r24	; 0x01
	
	if (Copy_u8Port <= DIO_PORTD && Copy_u8Pin <= DIO_PIN7)
     f92:	8a 81       	ldd	r24, Y+2	; 0x02
     f94:	84 30       	cpi	r24, 0x04	; 4
     f96:	08 f0       	brcs	.+2      	; 0xf9a <DIO_enumGetPinValue+0x28>
     f98:	a6 c0       	rjmp	.+332    	; 0x10e6 <DIO_enumGetPinValue+0x174>
     f9a:	8b 81       	ldd	r24, Y+3	; 0x03
     f9c:	88 30       	cpi	r24, 0x08	; 8
     f9e:	08 f0       	brcs	.+2      	; 0xfa2 <DIO_enumGetPinValue+0x30>
     fa0:	a2 c0       	rjmp	.+324    	; 0x10e6 <DIO_enumGetPinValue+0x174>
	{
		switch (Copy_u8Port)
     fa2:	8a 81       	ldd	r24, Y+2	; 0x02
     fa4:	28 2f       	mov	r18, r24
     fa6:	30 e0       	ldi	r19, 0x00	; 0
     fa8:	3f 83       	std	Y+7, r19	; 0x07
     faa:	2e 83       	std	Y+6, r18	; 0x06
     fac:	4e 81       	ldd	r20, Y+6	; 0x06
     fae:	5f 81       	ldd	r21, Y+7	; 0x07
     fb0:	41 30       	cpi	r20, 0x01	; 1
     fb2:	51 05       	cpc	r21, r1
     fb4:	c1 f1       	breq	.+112    	; 0x1026 <DIO_enumGetPinValue+0xb4>
     fb6:	8e 81       	ldd	r24, Y+6	; 0x06
     fb8:	9f 81       	ldd	r25, Y+7	; 0x07
     fba:	82 30       	cpi	r24, 0x02	; 2
     fbc:	91 05       	cpc	r25, r1
     fbe:	34 f4       	brge	.+12     	; 0xfcc <DIO_enumGetPinValue+0x5a>
     fc0:	2e 81       	ldd	r18, Y+6	; 0x06
     fc2:	3f 81       	ldd	r19, Y+7	; 0x07
     fc4:	21 15       	cp	r18, r1
     fc6:	31 05       	cpc	r19, r1
     fc8:	71 f0       	breq	.+28     	; 0xfe6 <DIO_enumGetPinValue+0x74>
     fca:	8e c0       	rjmp	.+284    	; 0x10e8 <DIO_enumGetPinValue+0x176>
     fcc:	4e 81       	ldd	r20, Y+6	; 0x06
     fce:	5f 81       	ldd	r21, Y+7	; 0x07
     fd0:	42 30       	cpi	r20, 0x02	; 2
     fd2:	51 05       	cpc	r21, r1
     fd4:	09 f4       	brne	.+2      	; 0xfd8 <DIO_enumGetPinValue+0x66>
     fd6:	47 c0       	rjmp	.+142    	; 0x1066 <DIO_enumGetPinValue+0xf4>
     fd8:	8e 81       	ldd	r24, Y+6	; 0x06
     fda:	9f 81       	ldd	r25, Y+7	; 0x07
     fdc:	83 30       	cpi	r24, 0x03	; 3
     fde:	91 05       	cpc	r25, r1
     fe0:	09 f4       	brne	.+2      	; 0xfe4 <DIO_enumGetPinValue+0x72>
     fe2:	61 c0       	rjmp	.+194    	; 0x10a6 <DIO_enumGetPinValue+0x134>
     fe4:	81 c0       	rjmp	.+258    	; 0x10e8 <DIO_enumGetPinValue+0x176>
		{
		case DIO_PORTA : *Copy_u8PtrData = GET_BIT(PINA_Register, Copy_u8Pin); break;
     fe6:	e9 e3       	ldi	r30, 0x39	; 57
     fe8:	f0 e0       	ldi	r31, 0x00	; 0
     fea:	80 81       	ld	r24, Z
     fec:	48 2f       	mov	r20, r24
     fee:	50 e0       	ldi	r21, 0x00	; 0
     ff0:	8b 81       	ldd	r24, Y+3	; 0x03
     ff2:	28 2f       	mov	r18, r24
     ff4:	30 e0       	ldi	r19, 0x00	; 0
     ff6:	81 e0       	ldi	r24, 0x01	; 1
     ff8:	90 e0       	ldi	r25, 0x00	; 0
     ffa:	02 c0       	rjmp	.+4      	; 0x1000 <DIO_enumGetPinValue+0x8e>
     ffc:	88 0f       	add	r24, r24
     ffe:	99 1f       	adc	r25, r25
    1000:	2a 95       	dec	r18
    1002:	e2 f7       	brpl	.-8      	; 0xffc <DIO_enumGetPinValue+0x8a>
    1004:	9a 01       	movw	r18, r20
    1006:	28 23       	and	r18, r24
    1008:	39 23       	and	r19, r25
    100a:	8b 81       	ldd	r24, Y+3	; 0x03
    100c:	88 2f       	mov	r24, r24
    100e:	90 e0       	ldi	r25, 0x00	; 0
    1010:	a9 01       	movw	r20, r18
    1012:	02 c0       	rjmp	.+4      	; 0x1018 <DIO_enumGetPinValue+0xa6>
    1014:	55 95       	asr	r21
    1016:	47 95       	ror	r20
    1018:	8a 95       	dec	r24
    101a:	e2 f7       	brpl	.-8      	; 0x1014 <DIO_enumGetPinValue+0xa2>
    101c:	ca 01       	movw	r24, r20
    101e:	ec 81       	ldd	r30, Y+4	; 0x04
    1020:	fd 81       	ldd	r31, Y+5	; 0x05
    1022:	80 83       	st	Z, r24
    1024:	61 c0       	rjmp	.+194    	; 0x10e8 <DIO_enumGetPinValue+0x176>
		case DIO_PORTB : *Copy_u8PtrData = GET_BIT(PINB_Register, Copy_u8Pin); break;
    1026:	e6 e3       	ldi	r30, 0x36	; 54
    1028:	f0 e0       	ldi	r31, 0x00	; 0
    102a:	80 81       	ld	r24, Z
    102c:	48 2f       	mov	r20, r24
    102e:	50 e0       	ldi	r21, 0x00	; 0
    1030:	8b 81       	ldd	r24, Y+3	; 0x03
    1032:	28 2f       	mov	r18, r24
    1034:	30 e0       	ldi	r19, 0x00	; 0
    1036:	81 e0       	ldi	r24, 0x01	; 1
    1038:	90 e0       	ldi	r25, 0x00	; 0
    103a:	02 c0       	rjmp	.+4      	; 0x1040 <DIO_enumGetPinValue+0xce>
    103c:	88 0f       	add	r24, r24
    103e:	99 1f       	adc	r25, r25
    1040:	2a 95       	dec	r18
    1042:	e2 f7       	brpl	.-8      	; 0x103c <DIO_enumGetPinValue+0xca>
    1044:	9a 01       	movw	r18, r20
    1046:	28 23       	and	r18, r24
    1048:	39 23       	and	r19, r25
    104a:	8b 81       	ldd	r24, Y+3	; 0x03
    104c:	88 2f       	mov	r24, r24
    104e:	90 e0       	ldi	r25, 0x00	; 0
    1050:	a9 01       	movw	r20, r18
    1052:	02 c0       	rjmp	.+4      	; 0x1058 <DIO_enumGetPinValue+0xe6>
    1054:	55 95       	asr	r21
    1056:	47 95       	ror	r20
    1058:	8a 95       	dec	r24
    105a:	e2 f7       	brpl	.-8      	; 0x1054 <DIO_enumGetPinValue+0xe2>
    105c:	ca 01       	movw	r24, r20
    105e:	ec 81       	ldd	r30, Y+4	; 0x04
    1060:	fd 81       	ldd	r31, Y+5	; 0x05
    1062:	80 83       	st	Z, r24
    1064:	41 c0       	rjmp	.+130    	; 0x10e8 <DIO_enumGetPinValue+0x176>
		case DIO_PORTC : *Copy_u8PtrData = GET_BIT(PINC_Register, Copy_u8Pin); break;
    1066:	e3 e3       	ldi	r30, 0x33	; 51
    1068:	f0 e0       	ldi	r31, 0x00	; 0
    106a:	80 81       	ld	r24, Z
    106c:	48 2f       	mov	r20, r24
    106e:	50 e0       	ldi	r21, 0x00	; 0
    1070:	8b 81       	ldd	r24, Y+3	; 0x03
    1072:	28 2f       	mov	r18, r24
    1074:	30 e0       	ldi	r19, 0x00	; 0
    1076:	81 e0       	ldi	r24, 0x01	; 1
    1078:	90 e0       	ldi	r25, 0x00	; 0
    107a:	02 c0       	rjmp	.+4      	; 0x1080 <DIO_enumGetPinValue+0x10e>
    107c:	88 0f       	add	r24, r24
    107e:	99 1f       	adc	r25, r25
    1080:	2a 95       	dec	r18
    1082:	e2 f7       	brpl	.-8      	; 0x107c <DIO_enumGetPinValue+0x10a>
    1084:	9a 01       	movw	r18, r20
    1086:	28 23       	and	r18, r24
    1088:	39 23       	and	r19, r25
    108a:	8b 81       	ldd	r24, Y+3	; 0x03
    108c:	88 2f       	mov	r24, r24
    108e:	90 e0       	ldi	r25, 0x00	; 0
    1090:	a9 01       	movw	r20, r18
    1092:	02 c0       	rjmp	.+4      	; 0x1098 <DIO_enumGetPinValue+0x126>
    1094:	55 95       	asr	r21
    1096:	47 95       	ror	r20
    1098:	8a 95       	dec	r24
    109a:	e2 f7       	brpl	.-8      	; 0x1094 <DIO_enumGetPinValue+0x122>
    109c:	ca 01       	movw	r24, r20
    109e:	ec 81       	ldd	r30, Y+4	; 0x04
    10a0:	fd 81       	ldd	r31, Y+5	; 0x05
    10a2:	80 83       	st	Z, r24
    10a4:	21 c0       	rjmp	.+66     	; 0x10e8 <DIO_enumGetPinValue+0x176>
		case DIO_PORTD : *Copy_u8PtrData = GET_BIT(PIND_Register, Copy_u8Pin); break;
    10a6:	e0 e3       	ldi	r30, 0x30	; 48
    10a8:	f0 e0       	ldi	r31, 0x00	; 0
    10aa:	80 81       	ld	r24, Z
    10ac:	48 2f       	mov	r20, r24
    10ae:	50 e0       	ldi	r21, 0x00	; 0
    10b0:	8b 81       	ldd	r24, Y+3	; 0x03
    10b2:	28 2f       	mov	r18, r24
    10b4:	30 e0       	ldi	r19, 0x00	; 0
    10b6:	81 e0       	ldi	r24, 0x01	; 1
    10b8:	90 e0       	ldi	r25, 0x00	; 0
    10ba:	02 c0       	rjmp	.+4      	; 0x10c0 <DIO_enumGetPinValue+0x14e>
    10bc:	88 0f       	add	r24, r24
    10be:	99 1f       	adc	r25, r25
    10c0:	2a 95       	dec	r18
    10c2:	e2 f7       	brpl	.-8      	; 0x10bc <DIO_enumGetPinValue+0x14a>
    10c4:	9a 01       	movw	r18, r20
    10c6:	28 23       	and	r18, r24
    10c8:	39 23       	and	r19, r25
    10ca:	8b 81       	ldd	r24, Y+3	; 0x03
    10cc:	88 2f       	mov	r24, r24
    10ce:	90 e0       	ldi	r25, 0x00	; 0
    10d0:	a9 01       	movw	r20, r18
    10d2:	02 c0       	rjmp	.+4      	; 0x10d8 <DIO_enumGetPinValue+0x166>
    10d4:	55 95       	asr	r21
    10d6:	47 95       	ror	r20
    10d8:	8a 95       	dec	r24
    10da:	e2 f7       	brpl	.-8      	; 0x10d4 <DIO_enumGetPinValue+0x162>
    10dc:	ca 01       	movw	r24, r20
    10de:	ec 81       	ldd	r30, Y+4	; 0x04
    10e0:	fd 81       	ldd	r31, Y+5	; 0x05
    10e2:	80 83       	st	Z, r24
    10e4:	01 c0       	rjmp	.+2      	; 0x10e8 <DIO_enumGetPinValue+0x176>
		}
	}
	
	else
	{
		LOC_enumState = DIO_NOK;
    10e6:	19 82       	std	Y+1, r1	; 0x01
	}
	
	return LOC_enumState; 	
    10e8:	89 81       	ldd	r24, Y+1	; 0x01
}
    10ea:	27 96       	adiw	r28, 0x07	; 7
    10ec:	0f b6       	in	r0, 0x3f	; 63
    10ee:	f8 94       	cli
    10f0:	de bf       	out	0x3e, r29	; 62
    10f2:	0f be       	out	0x3f, r0	; 63
    10f4:	cd bf       	out	0x3d, r28	; 61
    10f6:	cf 91       	pop	r28
    10f8:	df 91       	pop	r29
    10fa:	08 95       	ret

000010fc <DIO_enumTogglePinValue>:

DIO_ErrorStatus DIO_enumTogglePinValue  (u8 Copy_u8Port, u8 Copy_u8Pin                               )
{
    10fc:	df 93       	push	r29
    10fe:	cf 93       	push	r28
    1100:	00 d0       	rcall	.+0      	; 0x1102 <DIO_enumTogglePinValue+0x6>
    1102:	00 d0       	rcall	.+0      	; 0x1104 <DIO_enumTogglePinValue+0x8>
    1104:	0f 92       	push	r0
    1106:	cd b7       	in	r28, 0x3d	; 61
    1108:	de b7       	in	r29, 0x3e	; 62
    110a:	8a 83       	std	Y+2, r24	; 0x02
    110c:	6b 83       	std	Y+3, r22	; 0x03
	DIO_ErrorStatus LOC_enumState = DIO_OK;
    110e:	81 e0       	ldi	r24, 0x01	; 1
    1110:	89 83       	std	Y+1, r24	; 0x01
	
	if (Copy_u8Port <= DIO_PORTD && Copy_u8Pin <= DIO_PIN7)
    1112:	8a 81       	ldd	r24, Y+2	; 0x02
    1114:	84 30       	cpi	r24, 0x04	; 4
    1116:	08 f0       	brcs	.+2      	; 0x111a <DIO_enumTogglePinValue+0x1e>
    1118:	73 c0       	rjmp	.+230    	; 0x1200 <DIO_enumTogglePinValue+0x104>
    111a:	8b 81       	ldd	r24, Y+3	; 0x03
    111c:	88 30       	cpi	r24, 0x08	; 8
    111e:	08 f0       	brcs	.+2      	; 0x1122 <DIO_enumTogglePinValue+0x26>
    1120:	6f c0       	rjmp	.+222    	; 0x1200 <DIO_enumTogglePinValue+0x104>
	{
		switch (Copy_u8Port)
    1122:	8a 81       	ldd	r24, Y+2	; 0x02
    1124:	28 2f       	mov	r18, r24
    1126:	30 e0       	ldi	r19, 0x00	; 0
    1128:	3d 83       	std	Y+5, r19	; 0x05
    112a:	2c 83       	std	Y+4, r18	; 0x04
    112c:	8c 81       	ldd	r24, Y+4	; 0x04
    112e:	9d 81       	ldd	r25, Y+5	; 0x05
    1130:	81 30       	cpi	r24, 0x01	; 1
    1132:	91 05       	cpc	r25, r1
    1134:	49 f1       	breq	.+82     	; 0x1188 <DIO_enumTogglePinValue+0x8c>
    1136:	2c 81       	ldd	r18, Y+4	; 0x04
    1138:	3d 81       	ldd	r19, Y+5	; 0x05
    113a:	22 30       	cpi	r18, 0x02	; 2
    113c:	31 05       	cpc	r19, r1
    113e:	2c f4       	brge	.+10     	; 0x114a <DIO_enumTogglePinValue+0x4e>
    1140:	8c 81       	ldd	r24, Y+4	; 0x04
    1142:	9d 81       	ldd	r25, Y+5	; 0x05
    1144:	00 97       	sbiw	r24, 0x00	; 0
    1146:	61 f0       	breq	.+24     	; 0x1160 <DIO_enumTogglePinValue+0x64>
    1148:	5c c0       	rjmp	.+184    	; 0x1202 <DIO_enumTogglePinValue+0x106>
    114a:	2c 81       	ldd	r18, Y+4	; 0x04
    114c:	3d 81       	ldd	r19, Y+5	; 0x05
    114e:	22 30       	cpi	r18, 0x02	; 2
    1150:	31 05       	cpc	r19, r1
    1152:	71 f1       	breq	.+92     	; 0x11b0 <DIO_enumTogglePinValue+0xb4>
    1154:	8c 81       	ldd	r24, Y+4	; 0x04
    1156:	9d 81       	ldd	r25, Y+5	; 0x05
    1158:	83 30       	cpi	r24, 0x03	; 3
    115a:	91 05       	cpc	r25, r1
    115c:	e9 f1       	breq	.+122    	; 0x11d8 <DIO_enumTogglePinValue+0xdc>
    115e:	51 c0       	rjmp	.+162    	; 0x1202 <DIO_enumTogglePinValue+0x106>
		{
		case DIO_PORTA : TOG_BIT(PORTA_Register, Copy_u8Pin); break;
    1160:	ab e3       	ldi	r26, 0x3B	; 59
    1162:	b0 e0       	ldi	r27, 0x00	; 0
    1164:	eb e3       	ldi	r30, 0x3B	; 59
    1166:	f0 e0       	ldi	r31, 0x00	; 0
    1168:	80 81       	ld	r24, Z
    116a:	48 2f       	mov	r20, r24
    116c:	8b 81       	ldd	r24, Y+3	; 0x03
    116e:	28 2f       	mov	r18, r24
    1170:	30 e0       	ldi	r19, 0x00	; 0
    1172:	81 e0       	ldi	r24, 0x01	; 1
    1174:	90 e0       	ldi	r25, 0x00	; 0
    1176:	02 2e       	mov	r0, r18
    1178:	02 c0       	rjmp	.+4      	; 0x117e <DIO_enumTogglePinValue+0x82>
    117a:	88 0f       	add	r24, r24
    117c:	99 1f       	adc	r25, r25
    117e:	0a 94       	dec	r0
    1180:	e2 f7       	brpl	.-8      	; 0x117a <DIO_enumTogglePinValue+0x7e>
    1182:	84 27       	eor	r24, r20
    1184:	8c 93       	st	X, r24
    1186:	3d c0       	rjmp	.+122    	; 0x1202 <DIO_enumTogglePinValue+0x106>
		case DIO_PORTB : TOG_BIT(PORTB_Register, Copy_u8Pin); break;
    1188:	a8 e3       	ldi	r26, 0x38	; 56
    118a:	b0 e0       	ldi	r27, 0x00	; 0
    118c:	e8 e3       	ldi	r30, 0x38	; 56
    118e:	f0 e0       	ldi	r31, 0x00	; 0
    1190:	80 81       	ld	r24, Z
    1192:	48 2f       	mov	r20, r24
    1194:	8b 81       	ldd	r24, Y+3	; 0x03
    1196:	28 2f       	mov	r18, r24
    1198:	30 e0       	ldi	r19, 0x00	; 0
    119a:	81 e0       	ldi	r24, 0x01	; 1
    119c:	90 e0       	ldi	r25, 0x00	; 0
    119e:	02 2e       	mov	r0, r18
    11a0:	02 c0       	rjmp	.+4      	; 0x11a6 <DIO_enumTogglePinValue+0xaa>
    11a2:	88 0f       	add	r24, r24
    11a4:	99 1f       	adc	r25, r25
    11a6:	0a 94       	dec	r0
    11a8:	e2 f7       	brpl	.-8      	; 0x11a2 <DIO_enumTogglePinValue+0xa6>
    11aa:	84 27       	eor	r24, r20
    11ac:	8c 93       	st	X, r24
    11ae:	29 c0       	rjmp	.+82     	; 0x1202 <DIO_enumTogglePinValue+0x106>
		case DIO_PORTC : TOG_BIT(PORTC_Register, Copy_u8Pin); break;
    11b0:	a5 e3       	ldi	r26, 0x35	; 53
    11b2:	b0 e0       	ldi	r27, 0x00	; 0
    11b4:	e5 e3       	ldi	r30, 0x35	; 53
    11b6:	f0 e0       	ldi	r31, 0x00	; 0
    11b8:	80 81       	ld	r24, Z
    11ba:	48 2f       	mov	r20, r24
    11bc:	8b 81       	ldd	r24, Y+3	; 0x03
    11be:	28 2f       	mov	r18, r24
    11c0:	30 e0       	ldi	r19, 0x00	; 0
    11c2:	81 e0       	ldi	r24, 0x01	; 1
    11c4:	90 e0       	ldi	r25, 0x00	; 0
    11c6:	02 2e       	mov	r0, r18
    11c8:	02 c0       	rjmp	.+4      	; 0x11ce <DIO_enumTogglePinValue+0xd2>
    11ca:	88 0f       	add	r24, r24
    11cc:	99 1f       	adc	r25, r25
    11ce:	0a 94       	dec	r0
    11d0:	e2 f7       	brpl	.-8      	; 0x11ca <DIO_enumTogglePinValue+0xce>
    11d2:	84 27       	eor	r24, r20
    11d4:	8c 93       	st	X, r24
    11d6:	15 c0       	rjmp	.+42     	; 0x1202 <DIO_enumTogglePinValue+0x106>
		case DIO_PORTD : TOG_BIT(PORTD_Register, Copy_u8Pin); break;
    11d8:	a2 e3       	ldi	r26, 0x32	; 50
    11da:	b0 e0       	ldi	r27, 0x00	; 0
    11dc:	e2 e3       	ldi	r30, 0x32	; 50
    11de:	f0 e0       	ldi	r31, 0x00	; 0
    11e0:	80 81       	ld	r24, Z
    11e2:	48 2f       	mov	r20, r24
    11e4:	8b 81       	ldd	r24, Y+3	; 0x03
    11e6:	28 2f       	mov	r18, r24
    11e8:	30 e0       	ldi	r19, 0x00	; 0
    11ea:	81 e0       	ldi	r24, 0x01	; 1
    11ec:	90 e0       	ldi	r25, 0x00	; 0
    11ee:	02 2e       	mov	r0, r18
    11f0:	02 c0       	rjmp	.+4      	; 0x11f6 <DIO_enumTogglePinValue+0xfa>
    11f2:	88 0f       	add	r24, r24
    11f4:	99 1f       	adc	r25, r25
    11f6:	0a 94       	dec	r0
    11f8:	e2 f7       	brpl	.-8      	; 0x11f2 <DIO_enumTogglePinValue+0xf6>
    11fa:	84 27       	eor	r24, r20
    11fc:	8c 93       	st	X, r24
    11fe:	01 c0       	rjmp	.+2      	; 0x1202 <DIO_enumTogglePinValue+0x106>
		}		
	}

	else
	{
		LOC_enumState = DIO_NOK;
    1200:	19 82       	std	Y+1, r1	; 0x01
	}
	
	return LOC_enumState; 
    1202:	89 81       	ldd	r24, Y+1	; 0x01
}
    1204:	0f 90       	pop	r0
    1206:	0f 90       	pop	r0
    1208:	0f 90       	pop	r0
    120a:	0f 90       	pop	r0
    120c:	0f 90       	pop	r0
    120e:	cf 91       	pop	r28
    1210:	df 91       	pop	r29
    1212:	08 95       	ret

00001214 <DIO_enumSetPortDirection>:

/*<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< IO PORT <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<*/

DIO_ErrorStatus DIO_enumSetPortDirection (u8 Copy_u8Port, u8 Copy_u8Direction)
{
    1214:	df 93       	push	r29
    1216:	cf 93       	push	r28
    1218:	00 d0       	rcall	.+0      	; 0x121a <DIO_enumSetPortDirection+0x6>
    121a:	00 d0       	rcall	.+0      	; 0x121c <DIO_enumSetPortDirection+0x8>
    121c:	0f 92       	push	r0
    121e:	cd b7       	in	r28, 0x3d	; 61
    1220:	de b7       	in	r29, 0x3e	; 62
    1222:	8a 83       	std	Y+2, r24	; 0x02
    1224:	6b 83       	std	Y+3, r22	; 0x03
	DIO_ErrorStatus LOC_enumState = DIO_OK;
    1226:	81 e0       	ldi	r24, 0x01	; 1
    1228:	89 83       	std	Y+1, r24	; 0x01
	
	if (Copy_u8Port <= DIO_PORTD)
    122a:	8a 81       	ldd	r24, Y+2	; 0x02
    122c:	84 30       	cpi	r24, 0x04	; 4
    122e:	a8 f5       	brcc	.+106    	; 0x129a <DIO_enumSetPortDirection+0x86>
	{
		switch (Copy_u8Port)
    1230:	8a 81       	ldd	r24, Y+2	; 0x02
    1232:	28 2f       	mov	r18, r24
    1234:	30 e0       	ldi	r19, 0x00	; 0
    1236:	3d 83       	std	Y+5, r19	; 0x05
    1238:	2c 83       	std	Y+4, r18	; 0x04
    123a:	8c 81       	ldd	r24, Y+4	; 0x04
    123c:	9d 81       	ldd	r25, Y+5	; 0x05
    123e:	81 30       	cpi	r24, 0x01	; 1
    1240:	91 05       	cpc	r25, r1
    1242:	d1 f0       	breq	.+52     	; 0x1278 <DIO_enumSetPortDirection+0x64>
    1244:	2c 81       	ldd	r18, Y+4	; 0x04
    1246:	3d 81       	ldd	r19, Y+5	; 0x05
    1248:	22 30       	cpi	r18, 0x02	; 2
    124a:	31 05       	cpc	r19, r1
    124c:	2c f4       	brge	.+10     	; 0x1258 <DIO_enumSetPortDirection+0x44>
    124e:	8c 81       	ldd	r24, Y+4	; 0x04
    1250:	9d 81       	ldd	r25, Y+5	; 0x05
    1252:	00 97       	sbiw	r24, 0x00	; 0
    1254:	61 f0       	breq	.+24     	; 0x126e <DIO_enumSetPortDirection+0x5a>
    1256:	1f c0       	rjmp	.+62     	; 0x1296 <DIO_enumSetPortDirection+0x82>
    1258:	2c 81       	ldd	r18, Y+4	; 0x04
    125a:	3d 81       	ldd	r19, Y+5	; 0x05
    125c:	22 30       	cpi	r18, 0x02	; 2
    125e:	31 05       	cpc	r19, r1
    1260:	81 f0       	breq	.+32     	; 0x1282 <DIO_enumSetPortDirection+0x6e>
    1262:	8c 81       	ldd	r24, Y+4	; 0x04
    1264:	9d 81       	ldd	r25, Y+5	; 0x05
    1266:	83 30       	cpi	r24, 0x03	; 3
    1268:	91 05       	cpc	r25, r1
    126a:	81 f0       	breq	.+32     	; 0x128c <DIO_enumSetPortDirection+0x78>
    126c:	14 c0       	rjmp	.+40     	; 0x1296 <DIO_enumSetPortDirection+0x82>
		{
		case DIO_PORTA : DDRA_Register = Copy_u8Direction; break;
    126e:	ea e3       	ldi	r30, 0x3A	; 58
    1270:	f0 e0       	ldi	r31, 0x00	; 0
    1272:	8b 81       	ldd	r24, Y+3	; 0x03
    1274:	80 83       	st	Z, r24
    1276:	12 c0       	rjmp	.+36     	; 0x129c <DIO_enumSetPortDirection+0x88>
		case DIO_PORTB : DDRB_Register = Copy_u8Direction; break;
    1278:	e7 e3       	ldi	r30, 0x37	; 55
    127a:	f0 e0       	ldi	r31, 0x00	; 0
    127c:	8b 81       	ldd	r24, Y+3	; 0x03
    127e:	80 83       	st	Z, r24
    1280:	0d c0       	rjmp	.+26     	; 0x129c <DIO_enumSetPortDirection+0x88>
		case DIO_PORTC : DDRC_Register = Copy_u8Direction; break;
    1282:	e4 e3       	ldi	r30, 0x34	; 52
    1284:	f0 e0       	ldi	r31, 0x00	; 0
    1286:	8b 81       	ldd	r24, Y+3	; 0x03
    1288:	80 83       	st	Z, r24
    128a:	08 c0       	rjmp	.+16     	; 0x129c <DIO_enumSetPortDirection+0x88>
		case DIO_PORTD : DDRD_Register = Copy_u8Direction; break;
    128c:	e1 e3       	ldi	r30, 0x31	; 49
    128e:	f0 e0       	ldi	r31, 0x00	; 0
    1290:	8b 81       	ldd	r24, Y+3	; 0x03
    1292:	80 83       	st	Z, r24
    1294:	03 c0       	rjmp	.+6      	; 0x129c <DIO_enumSetPortDirection+0x88>
		default        : LOC_enumState = DIO_NOK              ; break;
    1296:	19 82       	std	Y+1, r1	; 0x01
    1298:	01 c0       	rjmp	.+2      	; 0x129c <DIO_enumSetPortDirection+0x88>
		}
	}
	
	else
	{
		LOC_enumState = DIO_NOK;
    129a:	19 82       	std	Y+1, r1	; 0x01
	}
	
	return LOC_enumState; 
    129c:	89 81       	ldd	r24, Y+1	; 0x01
}
    129e:	0f 90       	pop	r0
    12a0:	0f 90       	pop	r0
    12a2:	0f 90       	pop	r0
    12a4:	0f 90       	pop	r0
    12a6:	0f 90       	pop	r0
    12a8:	cf 91       	pop	r28
    12aa:	df 91       	pop	r29
    12ac:	08 95       	ret

000012ae <DIO_enumSetPortValue>:

DIO_ErrorStatus DIO_enumSetPortValue     (u8 Copy_u8Port, u8 Copy_u8Value    )
{
    12ae:	df 93       	push	r29
    12b0:	cf 93       	push	r28
    12b2:	00 d0       	rcall	.+0      	; 0x12b4 <DIO_enumSetPortValue+0x6>
    12b4:	00 d0       	rcall	.+0      	; 0x12b6 <DIO_enumSetPortValue+0x8>
    12b6:	0f 92       	push	r0
    12b8:	cd b7       	in	r28, 0x3d	; 61
    12ba:	de b7       	in	r29, 0x3e	; 62
    12bc:	8a 83       	std	Y+2, r24	; 0x02
    12be:	6b 83       	std	Y+3, r22	; 0x03
	DIO_ErrorStatus LOC_enumState = DIO_OK;
    12c0:	81 e0       	ldi	r24, 0x01	; 1
    12c2:	89 83       	std	Y+1, r24	; 0x01
	
	if (Copy_u8Port <= DIO_PORTD)
    12c4:	8a 81       	ldd	r24, Y+2	; 0x02
    12c6:	84 30       	cpi	r24, 0x04	; 4
    12c8:	a8 f5       	brcc	.+106    	; 0x1334 <DIO_enumSetPortValue+0x86>
	{
		switch (Copy_u8Port)
    12ca:	8a 81       	ldd	r24, Y+2	; 0x02
    12cc:	28 2f       	mov	r18, r24
    12ce:	30 e0       	ldi	r19, 0x00	; 0
    12d0:	3d 83       	std	Y+5, r19	; 0x05
    12d2:	2c 83       	std	Y+4, r18	; 0x04
    12d4:	8c 81       	ldd	r24, Y+4	; 0x04
    12d6:	9d 81       	ldd	r25, Y+5	; 0x05
    12d8:	81 30       	cpi	r24, 0x01	; 1
    12da:	91 05       	cpc	r25, r1
    12dc:	d1 f0       	breq	.+52     	; 0x1312 <DIO_enumSetPortValue+0x64>
    12de:	2c 81       	ldd	r18, Y+4	; 0x04
    12e0:	3d 81       	ldd	r19, Y+5	; 0x05
    12e2:	22 30       	cpi	r18, 0x02	; 2
    12e4:	31 05       	cpc	r19, r1
    12e6:	2c f4       	brge	.+10     	; 0x12f2 <DIO_enumSetPortValue+0x44>
    12e8:	8c 81       	ldd	r24, Y+4	; 0x04
    12ea:	9d 81       	ldd	r25, Y+5	; 0x05
    12ec:	00 97       	sbiw	r24, 0x00	; 0
    12ee:	61 f0       	breq	.+24     	; 0x1308 <DIO_enumSetPortValue+0x5a>
    12f0:	1f c0       	rjmp	.+62     	; 0x1330 <DIO_enumSetPortValue+0x82>
    12f2:	2c 81       	ldd	r18, Y+4	; 0x04
    12f4:	3d 81       	ldd	r19, Y+5	; 0x05
    12f6:	22 30       	cpi	r18, 0x02	; 2
    12f8:	31 05       	cpc	r19, r1
    12fa:	81 f0       	breq	.+32     	; 0x131c <DIO_enumSetPortValue+0x6e>
    12fc:	8c 81       	ldd	r24, Y+4	; 0x04
    12fe:	9d 81       	ldd	r25, Y+5	; 0x05
    1300:	83 30       	cpi	r24, 0x03	; 3
    1302:	91 05       	cpc	r25, r1
    1304:	81 f0       	breq	.+32     	; 0x1326 <DIO_enumSetPortValue+0x78>
    1306:	14 c0       	rjmp	.+40     	; 0x1330 <DIO_enumSetPortValue+0x82>
		{
		case DIO_PORTA : PORTA_Register = Copy_u8Value; break;
    1308:	eb e3       	ldi	r30, 0x3B	; 59
    130a:	f0 e0       	ldi	r31, 0x00	; 0
    130c:	8b 81       	ldd	r24, Y+3	; 0x03
    130e:	80 83       	st	Z, r24
    1310:	12 c0       	rjmp	.+36     	; 0x1336 <DIO_enumSetPortValue+0x88>
		case DIO_PORTB : PORTB_Register = Copy_u8Value; break;
    1312:	e8 e3       	ldi	r30, 0x38	; 56
    1314:	f0 e0       	ldi	r31, 0x00	; 0
    1316:	8b 81       	ldd	r24, Y+3	; 0x03
    1318:	80 83       	st	Z, r24
    131a:	0d c0       	rjmp	.+26     	; 0x1336 <DIO_enumSetPortValue+0x88>
		case DIO_PORTC : PORTC_Register = Copy_u8Value; break;
    131c:	e5 e3       	ldi	r30, 0x35	; 53
    131e:	f0 e0       	ldi	r31, 0x00	; 0
    1320:	8b 81       	ldd	r24, Y+3	; 0x03
    1322:	80 83       	st	Z, r24
    1324:	08 c0       	rjmp	.+16     	; 0x1336 <DIO_enumSetPortValue+0x88>
		case DIO_PORTD : PORTD_Register = Copy_u8Value; break;
    1326:	e2 e3       	ldi	r30, 0x32	; 50
    1328:	f0 e0       	ldi	r31, 0x00	; 0
    132a:	8b 81       	ldd	r24, Y+3	; 0x03
    132c:	80 83       	st	Z, r24
    132e:	03 c0       	rjmp	.+6      	; 0x1336 <DIO_enumSetPortValue+0x88>
		default        : LOC_enumState  = DIO_NOK          ; break;
    1330:	19 82       	std	Y+1, r1	; 0x01
    1332:	01 c0       	rjmp	.+2      	; 0x1336 <DIO_enumSetPortValue+0x88>
		}
	}
	
	else
	{
		LOC_enumState = DIO_NOK;
    1334:	19 82       	std	Y+1, r1	; 0x01
	}
	
	return LOC_enumState; 
    1336:	89 81       	ldd	r24, Y+1	; 0x01
}
    1338:	0f 90       	pop	r0
    133a:	0f 90       	pop	r0
    133c:	0f 90       	pop	r0
    133e:	0f 90       	pop	r0
    1340:	0f 90       	pop	r0
    1342:	cf 91       	pop	r28
    1344:	df 91       	pop	r29
    1346:	08 95       	ret

00001348 <DIO_enumGetPortValue>:

DIO_ErrorStatus DIO_enumGetPortValue     (u8 Copy_u8Port, u8 *Copy_u8PtrData )
{
    1348:	df 93       	push	r29
    134a:	cf 93       	push	r28
    134c:	00 d0       	rcall	.+0      	; 0x134e <DIO_enumGetPortValue+0x6>
    134e:	00 d0       	rcall	.+0      	; 0x1350 <DIO_enumGetPortValue+0x8>
    1350:	00 d0       	rcall	.+0      	; 0x1352 <DIO_enumGetPortValue+0xa>
    1352:	cd b7       	in	r28, 0x3d	; 61
    1354:	de b7       	in	r29, 0x3e	; 62
    1356:	8a 83       	std	Y+2, r24	; 0x02
    1358:	7c 83       	std	Y+4, r23	; 0x04
    135a:	6b 83       	std	Y+3, r22	; 0x03
	DIO_ErrorStatus LOC_enumState = DIO_OK;
    135c:	81 e0       	ldi	r24, 0x01	; 1
    135e:	89 83       	std	Y+1, r24	; 0x01
	
	if (Copy_u8Port <= DIO_PORTD)
    1360:	8a 81       	ldd	r24, Y+2	; 0x02
    1362:	84 30       	cpi	r24, 0x04	; 4
    1364:	e8 f5       	brcc	.+122    	; 0x13e0 <DIO_enumGetPortValue+0x98>
	{
		switch (Copy_u8Port)
    1366:	8a 81       	ldd	r24, Y+2	; 0x02
    1368:	28 2f       	mov	r18, r24
    136a:	30 e0       	ldi	r19, 0x00	; 0
    136c:	3e 83       	std	Y+6, r19	; 0x06
    136e:	2d 83       	std	Y+5, r18	; 0x05
    1370:	8d 81       	ldd	r24, Y+5	; 0x05
    1372:	9e 81       	ldd	r25, Y+6	; 0x06
    1374:	81 30       	cpi	r24, 0x01	; 1
    1376:	91 05       	cpc	r25, r1
    1378:	e1 f0       	breq	.+56     	; 0x13b2 <DIO_enumGetPortValue+0x6a>
    137a:	2d 81       	ldd	r18, Y+5	; 0x05
    137c:	3e 81       	ldd	r19, Y+6	; 0x06
    137e:	22 30       	cpi	r18, 0x02	; 2
    1380:	31 05       	cpc	r19, r1
    1382:	2c f4       	brge	.+10     	; 0x138e <DIO_enumGetPortValue+0x46>
    1384:	8d 81       	ldd	r24, Y+5	; 0x05
    1386:	9e 81       	ldd	r25, Y+6	; 0x06
    1388:	00 97       	sbiw	r24, 0x00	; 0
    138a:	61 f0       	breq	.+24     	; 0x13a4 <DIO_enumGetPortValue+0x5c>
    138c:	27 c0       	rjmp	.+78     	; 0x13dc <DIO_enumGetPortValue+0x94>
    138e:	2d 81       	ldd	r18, Y+5	; 0x05
    1390:	3e 81       	ldd	r19, Y+6	; 0x06
    1392:	22 30       	cpi	r18, 0x02	; 2
    1394:	31 05       	cpc	r19, r1
    1396:	a1 f0       	breq	.+40     	; 0x13c0 <DIO_enumGetPortValue+0x78>
    1398:	8d 81       	ldd	r24, Y+5	; 0x05
    139a:	9e 81       	ldd	r25, Y+6	; 0x06
    139c:	83 30       	cpi	r24, 0x03	; 3
    139e:	91 05       	cpc	r25, r1
    13a0:	b1 f0       	breq	.+44     	; 0x13ce <DIO_enumGetPortValue+0x86>
    13a2:	1c c0       	rjmp	.+56     	; 0x13dc <DIO_enumGetPortValue+0x94>
		{
		case DIO_PORTA : *Copy_u8PtrData = PINA_Register; break;
    13a4:	e9 e3       	ldi	r30, 0x39	; 57
    13a6:	f0 e0       	ldi	r31, 0x00	; 0
    13a8:	80 81       	ld	r24, Z
    13aa:	eb 81       	ldd	r30, Y+3	; 0x03
    13ac:	fc 81       	ldd	r31, Y+4	; 0x04
    13ae:	80 83       	st	Z, r24
    13b0:	18 c0       	rjmp	.+48     	; 0x13e2 <DIO_enumGetPortValue+0x9a>
		case DIO_PORTB : *Copy_u8PtrData = PINB_Register; break;
    13b2:	e6 e3       	ldi	r30, 0x36	; 54
    13b4:	f0 e0       	ldi	r31, 0x00	; 0
    13b6:	80 81       	ld	r24, Z
    13b8:	eb 81       	ldd	r30, Y+3	; 0x03
    13ba:	fc 81       	ldd	r31, Y+4	; 0x04
    13bc:	80 83       	st	Z, r24
    13be:	11 c0       	rjmp	.+34     	; 0x13e2 <DIO_enumGetPortValue+0x9a>
		case DIO_PORTC : *Copy_u8PtrData = PINC_Register; break;
    13c0:	e3 e3       	ldi	r30, 0x33	; 51
    13c2:	f0 e0       	ldi	r31, 0x00	; 0
    13c4:	80 81       	ld	r24, Z
    13c6:	eb 81       	ldd	r30, Y+3	; 0x03
    13c8:	fc 81       	ldd	r31, Y+4	; 0x04
    13ca:	80 83       	st	Z, r24
    13cc:	0a c0       	rjmp	.+20     	; 0x13e2 <DIO_enumGetPortValue+0x9a>
		case DIO_PORTD : *Copy_u8PtrData = PIND_Register; break;
    13ce:	e0 e3       	ldi	r30, 0x30	; 48
    13d0:	f0 e0       	ldi	r31, 0x00	; 0
    13d2:	80 81       	ld	r24, Z
    13d4:	eb 81       	ldd	r30, Y+3	; 0x03
    13d6:	fc 81       	ldd	r31, Y+4	; 0x04
    13d8:	80 83       	st	Z, r24
    13da:	03 c0       	rjmp	.+6      	; 0x13e2 <DIO_enumGetPortValue+0x9a>
		default        : LOC_enumState        = DIO_NOK      ; break;
    13dc:	19 82       	std	Y+1, r1	; 0x01
    13de:	01 c0       	rjmp	.+2      	; 0x13e2 <DIO_enumGetPortValue+0x9a>
		}
	}
	else
	{
		LOC_enumState = DIO_NOK;
    13e0:	19 82       	std	Y+1, r1	; 0x01
	}
	
	return LOC_enumState;
    13e2:	89 81       	ldd	r24, Y+1	; 0x01
}
    13e4:	26 96       	adiw	r28, 0x06	; 6
    13e6:	0f b6       	in	r0, 0x3f	; 63
    13e8:	f8 94       	cli
    13ea:	de bf       	out	0x3e, r29	; 62
    13ec:	0f be       	out	0x3f, r0	; 63
    13ee:	cd bf       	out	0x3d, r28	; 61
    13f0:	cf 91       	pop	r28
    13f2:	df 91       	pop	r29
    13f4:	08 95       	ret

000013f6 <DIO_enumTogglePortValue>:

DIO_ErrorStatus DIO_enumTogglePortValue  (u8 Copy_u8Port                               )
{
    13f6:	df 93       	push	r29
    13f8:	cf 93       	push	r28
    13fa:	00 d0       	rcall	.+0      	; 0x13fc <DIO_enumTogglePortValue+0x6>
    13fc:	00 d0       	rcall	.+0      	; 0x13fe <DIO_enumTogglePortValue+0x8>
    13fe:	cd b7       	in	r28, 0x3d	; 61
    1400:	de b7       	in	r29, 0x3e	; 62
    1402:	8a 83       	std	Y+2, r24	; 0x02
	DIO_ErrorStatus LOC_enumState = DIO_OK;
    1404:	81 e0       	ldi	r24, 0x01	; 1
    1406:	89 83       	std	Y+1, r24	; 0x01
	
	if (Copy_u8Port <= DIO_PORTD)
    1408:	8a 81       	ldd	r24, Y+2	; 0x02
    140a:	84 30       	cpi	r24, 0x04	; 4
    140c:	08 f0       	brcs	.+2      	; 0x1410 <DIO_enumTogglePortValue+0x1a>
    140e:	41 c0       	rjmp	.+130    	; 0x1492 <DIO_enumTogglePortValue+0x9c>
	{
		switch (Copy_u8Port)
    1410:	8a 81       	ldd	r24, Y+2	; 0x02
    1412:	28 2f       	mov	r18, r24
    1414:	30 e0       	ldi	r19, 0x00	; 0
    1416:	3c 83       	std	Y+4, r19	; 0x04
    1418:	2b 83       	std	Y+3, r18	; 0x03
    141a:	8b 81       	ldd	r24, Y+3	; 0x03
    141c:	9c 81       	ldd	r25, Y+4	; 0x04
    141e:	81 30       	cpi	r24, 0x01	; 1
    1420:	91 05       	cpc	r25, r1
    1422:	e9 f0       	breq	.+58     	; 0x145e <DIO_enumTogglePortValue+0x68>
    1424:	2b 81       	ldd	r18, Y+3	; 0x03
    1426:	3c 81       	ldd	r19, Y+4	; 0x04
    1428:	22 30       	cpi	r18, 0x02	; 2
    142a:	31 05       	cpc	r19, r1
    142c:	2c f4       	brge	.+10     	; 0x1438 <DIO_enumTogglePortValue+0x42>
    142e:	8b 81       	ldd	r24, Y+3	; 0x03
    1430:	9c 81       	ldd	r25, Y+4	; 0x04
    1432:	00 97       	sbiw	r24, 0x00	; 0
    1434:	61 f0       	breq	.+24     	; 0x144e <DIO_enumTogglePortValue+0x58>
    1436:	2b c0       	rjmp	.+86     	; 0x148e <DIO_enumTogglePortValue+0x98>
    1438:	2b 81       	ldd	r18, Y+3	; 0x03
    143a:	3c 81       	ldd	r19, Y+4	; 0x04
    143c:	22 30       	cpi	r18, 0x02	; 2
    143e:	31 05       	cpc	r19, r1
    1440:	b1 f0       	breq	.+44     	; 0x146e <DIO_enumTogglePortValue+0x78>
    1442:	8b 81       	ldd	r24, Y+3	; 0x03
    1444:	9c 81       	ldd	r25, Y+4	; 0x04
    1446:	83 30       	cpi	r24, 0x03	; 3
    1448:	91 05       	cpc	r25, r1
    144a:	c9 f0       	breq	.+50     	; 0x147e <DIO_enumTogglePortValue+0x88>
    144c:	20 c0       	rjmp	.+64     	; 0x148e <DIO_enumTogglePortValue+0x98>
		{
		case DIO_PORTA : PORTA_Register = ~ PORTA_Register; break;
    144e:	ab e3       	ldi	r26, 0x3B	; 59
    1450:	b0 e0       	ldi	r27, 0x00	; 0
    1452:	eb e3       	ldi	r30, 0x3B	; 59
    1454:	f0 e0       	ldi	r31, 0x00	; 0
    1456:	80 81       	ld	r24, Z
    1458:	80 95       	com	r24
    145a:	8c 93       	st	X, r24
    145c:	1b c0       	rjmp	.+54     	; 0x1494 <DIO_enumTogglePortValue+0x9e>
		case DIO_PORTB : PORTB_Register = ~ PORTB_Register; break;
    145e:	a8 e3       	ldi	r26, 0x38	; 56
    1460:	b0 e0       	ldi	r27, 0x00	; 0
    1462:	e8 e3       	ldi	r30, 0x38	; 56
    1464:	f0 e0       	ldi	r31, 0x00	; 0
    1466:	80 81       	ld	r24, Z
    1468:	80 95       	com	r24
    146a:	8c 93       	st	X, r24
    146c:	13 c0       	rjmp	.+38     	; 0x1494 <DIO_enumTogglePortValue+0x9e>
		case DIO_PORTC : PORTC_Register = ~ PORTC_Register; break;
    146e:	a5 e3       	ldi	r26, 0x35	; 53
    1470:	b0 e0       	ldi	r27, 0x00	; 0
    1472:	e5 e3       	ldi	r30, 0x35	; 53
    1474:	f0 e0       	ldi	r31, 0x00	; 0
    1476:	80 81       	ld	r24, Z
    1478:	80 95       	com	r24
    147a:	8c 93       	st	X, r24
    147c:	0b c0       	rjmp	.+22     	; 0x1494 <DIO_enumTogglePortValue+0x9e>
		case DIO_PORTD : PORTD_Register = ~ PORTD_Register; break;
    147e:	a2 e3       	ldi	r26, 0x32	; 50
    1480:	b0 e0       	ldi	r27, 0x00	; 0
    1482:	e2 e3       	ldi	r30, 0x32	; 50
    1484:	f0 e0       	ldi	r31, 0x00	; 0
    1486:	80 81       	ld	r24, Z
    1488:	80 95       	com	r24
    148a:	8c 93       	st	X, r24
    148c:	03 c0       	rjmp	.+6      	; 0x1494 <DIO_enumTogglePortValue+0x9e>
		default        : LOC_enumState  = DIO_NOK         ; break;
    148e:	19 82       	std	Y+1, r1	; 0x01
    1490:	01 c0       	rjmp	.+2      	; 0x1494 <DIO_enumTogglePortValue+0x9e>
		}		
	}
	
	else
	{
		LOC_enumState = DIO_NOK;
    1492:	19 82       	std	Y+1, r1	; 0x01
	}
	
	return LOC_enumState;
    1494:	89 81       	ldd	r24, Y+1	; 0x01
}
    1496:	0f 90       	pop	r0
    1498:	0f 90       	pop	r0
    149a:	0f 90       	pop	r0
    149c:	0f 90       	pop	r0
    149e:	cf 91       	pop	r28
    14a0:	df 91       	pop	r29
    14a2:	08 95       	ret

000014a4 <DIO_enumWritHighNibbles>:

/*<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< IO NIBBLES <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<*/

DIO_ErrorStatus DIO_enumWritHighNibbles (u8 Copy_u8Port, u8 Copy_u8Value)
{
    14a4:	df 93       	push	r29
    14a6:	cf 93       	push	r28
    14a8:	00 d0       	rcall	.+0      	; 0x14aa <DIO_enumWritHighNibbles+0x6>
    14aa:	00 d0       	rcall	.+0      	; 0x14ac <DIO_enumWritHighNibbles+0x8>
    14ac:	0f 92       	push	r0
    14ae:	cd b7       	in	r28, 0x3d	; 61
    14b0:	de b7       	in	r29, 0x3e	; 62
    14b2:	8a 83       	std	Y+2, r24	; 0x02
    14b4:	6b 83       	std	Y+3, r22	; 0x03
	DIO_ErrorStatus LOC_enumState = DIO_OK;
    14b6:	81 e0       	ldi	r24, 0x01	; 1
    14b8:	89 83       	std	Y+1, r24	; 0x01
	
	if (Copy_u8Port <= DIO_PORTD)
    14ba:	8a 81       	ldd	r24, Y+2	; 0x02
    14bc:	84 30       	cpi	r24, 0x04	; 4
    14be:	08 f0       	brcs	.+2      	; 0x14c2 <DIO_enumWritHighNibbles+0x1e>
    14c0:	65 c0       	rjmp	.+202    	; 0x158c <DIO_enumWritHighNibbles+0xe8>
	{
		Copy_u8Value <<= 4;
    14c2:	8b 81       	ldd	r24, Y+3	; 0x03
    14c4:	82 95       	swap	r24
    14c6:	80 7f       	andi	r24, 0xF0	; 240
    14c8:	8b 83       	std	Y+3, r24	; 0x03
		
		switch (Copy_u8Port)
    14ca:	8a 81       	ldd	r24, Y+2	; 0x02
    14cc:	28 2f       	mov	r18, r24
    14ce:	30 e0       	ldi	r19, 0x00	; 0
    14d0:	3d 83       	std	Y+5, r19	; 0x05
    14d2:	2c 83       	std	Y+4, r18	; 0x04
    14d4:	8c 81       	ldd	r24, Y+4	; 0x04
    14d6:	9d 81       	ldd	r25, Y+5	; 0x05
    14d8:	81 30       	cpi	r24, 0x01	; 1
    14da:	91 05       	cpc	r25, r1
    14dc:	29 f1       	breq	.+74     	; 0x1528 <DIO_enumWritHighNibbles+0x84>
    14de:	2c 81       	ldd	r18, Y+4	; 0x04
    14e0:	3d 81       	ldd	r19, Y+5	; 0x05
    14e2:	22 30       	cpi	r18, 0x02	; 2
    14e4:	31 05       	cpc	r19, r1
    14e6:	2c f4       	brge	.+10     	; 0x14f2 <DIO_enumWritHighNibbles+0x4e>
    14e8:	8c 81       	ldd	r24, Y+4	; 0x04
    14ea:	9d 81       	ldd	r25, Y+5	; 0x05
    14ec:	00 97       	sbiw	r24, 0x00	; 0
    14ee:	61 f0       	breq	.+24     	; 0x1508 <DIO_enumWritHighNibbles+0x64>
    14f0:	4b c0       	rjmp	.+150    	; 0x1588 <DIO_enumWritHighNibbles+0xe4>
    14f2:	2c 81       	ldd	r18, Y+4	; 0x04
    14f4:	3d 81       	ldd	r19, Y+5	; 0x05
    14f6:	22 30       	cpi	r18, 0x02	; 2
    14f8:	31 05       	cpc	r19, r1
    14fa:	31 f1       	breq	.+76     	; 0x1548 <DIO_enumWritHighNibbles+0xa4>
    14fc:	8c 81       	ldd	r24, Y+4	; 0x04
    14fe:	9d 81       	ldd	r25, Y+5	; 0x05
    1500:	83 30       	cpi	r24, 0x03	; 3
    1502:	91 05       	cpc	r25, r1
    1504:	89 f1       	breq	.+98     	; 0x1568 <DIO_enumWritHighNibbles+0xc4>
    1506:	40 c0       	rjmp	.+128    	; 0x1588 <DIO_enumWritHighNibbles+0xe4>
		{
		case DIO_PORTA : 
			PORTA_Register &= 0x0f;
    1508:	ab e3       	ldi	r26, 0x3B	; 59
    150a:	b0 e0       	ldi	r27, 0x00	; 0
    150c:	eb e3       	ldi	r30, 0x3B	; 59
    150e:	f0 e0       	ldi	r31, 0x00	; 0
    1510:	80 81       	ld	r24, Z
    1512:	8f 70       	andi	r24, 0x0F	; 15
    1514:	8c 93       	st	X, r24
			PORTA_Register |= Copy_u8Value;
    1516:	ab e3       	ldi	r26, 0x3B	; 59
    1518:	b0 e0       	ldi	r27, 0x00	; 0
    151a:	eb e3       	ldi	r30, 0x3B	; 59
    151c:	f0 e0       	ldi	r31, 0x00	; 0
    151e:	90 81       	ld	r25, Z
    1520:	8b 81       	ldd	r24, Y+3	; 0x03
    1522:	89 2b       	or	r24, r25
    1524:	8c 93       	st	X, r24
    1526:	33 c0       	rjmp	.+102    	; 0x158e <DIO_enumWritHighNibbles+0xea>
		    break; 
		case DIO_PORTB :
		    PORTB_Register &= 0x0f;
    1528:	a8 e3       	ldi	r26, 0x38	; 56
    152a:	b0 e0       	ldi	r27, 0x00	; 0
    152c:	e8 e3       	ldi	r30, 0x38	; 56
    152e:	f0 e0       	ldi	r31, 0x00	; 0
    1530:	80 81       	ld	r24, Z
    1532:	8f 70       	andi	r24, 0x0F	; 15
    1534:	8c 93       	st	X, r24
			PORTB_Register |= Copy_u8Value;
    1536:	a8 e3       	ldi	r26, 0x38	; 56
    1538:	b0 e0       	ldi	r27, 0x00	; 0
    153a:	e8 e3       	ldi	r30, 0x38	; 56
    153c:	f0 e0       	ldi	r31, 0x00	; 0
    153e:	90 81       	ld	r25, Z
    1540:	8b 81       	ldd	r24, Y+3	; 0x03
    1542:	89 2b       	or	r24, r25
    1544:	8c 93       	st	X, r24
    1546:	23 c0       	rjmp	.+70     	; 0x158e <DIO_enumWritHighNibbles+0xea>
		    break; 
		case DIO_PORTC :
			PORTC_Register &= 0x0f;
    1548:	a5 e3       	ldi	r26, 0x35	; 53
    154a:	b0 e0       	ldi	r27, 0x00	; 0
    154c:	e5 e3       	ldi	r30, 0x35	; 53
    154e:	f0 e0       	ldi	r31, 0x00	; 0
    1550:	80 81       	ld	r24, Z
    1552:	8f 70       	andi	r24, 0x0F	; 15
    1554:	8c 93       	st	X, r24
			PORTC_Register |= Copy_u8Value;
    1556:	a5 e3       	ldi	r26, 0x35	; 53
    1558:	b0 e0       	ldi	r27, 0x00	; 0
    155a:	e5 e3       	ldi	r30, 0x35	; 53
    155c:	f0 e0       	ldi	r31, 0x00	; 0
    155e:	90 81       	ld	r25, Z
    1560:	8b 81       	ldd	r24, Y+3	; 0x03
    1562:	89 2b       	or	r24, r25
    1564:	8c 93       	st	X, r24
    1566:	13 c0       	rjmp	.+38     	; 0x158e <DIO_enumWritHighNibbles+0xea>
		    break; 
		case DIO_PORTD :
			PORTD_Register &= 0x0f;
    1568:	a2 e3       	ldi	r26, 0x32	; 50
    156a:	b0 e0       	ldi	r27, 0x00	; 0
    156c:	e2 e3       	ldi	r30, 0x32	; 50
    156e:	f0 e0       	ldi	r31, 0x00	; 0
    1570:	80 81       	ld	r24, Z
    1572:	8f 70       	andi	r24, 0x0F	; 15
    1574:	8c 93       	st	X, r24
			PORTD_Register |= Copy_u8Value;
    1576:	a2 e3       	ldi	r26, 0x32	; 50
    1578:	b0 e0       	ldi	r27, 0x00	; 0
    157a:	e2 e3       	ldi	r30, 0x32	; 50
    157c:	f0 e0       	ldi	r31, 0x00	; 0
    157e:	90 81       	ld	r25, Z
    1580:	8b 81       	ldd	r24, Y+3	; 0x03
    1582:	89 2b       	or	r24, r25
    1584:	8c 93       	st	X, r24
    1586:	03 c0       	rjmp	.+6      	; 0x158e <DIO_enumWritHighNibbles+0xea>
		    break; 
		default : LOC_enumState = DIO_NOK;
    1588:	19 82       	std	Y+1, r1	; 0x01
    158a:	01 c0       	rjmp	.+2      	; 0x158e <DIO_enumWritHighNibbles+0xea>
		}		
	}
	
	else
	{
		LOC_enumState = DIO_NOK;
    158c:	19 82       	std	Y+1, r1	; 0x01
	}
	
	return LOC_enumState;	
    158e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1590:	0f 90       	pop	r0
    1592:	0f 90       	pop	r0
    1594:	0f 90       	pop	r0
    1596:	0f 90       	pop	r0
    1598:	0f 90       	pop	r0
    159a:	cf 91       	pop	r28
    159c:	df 91       	pop	r29
    159e:	08 95       	ret

000015a0 <DIO_enumWritLowNibbles>:

DIO_ErrorStatus DIO_enumWritLowNibbles  (u8 Copy_u8Port, u8 Copy_u8Value)
{
    15a0:	df 93       	push	r29
    15a2:	cf 93       	push	r28
    15a4:	00 d0       	rcall	.+0      	; 0x15a6 <DIO_enumWritLowNibbles+0x6>
    15a6:	00 d0       	rcall	.+0      	; 0x15a8 <DIO_enumWritLowNibbles+0x8>
    15a8:	0f 92       	push	r0
    15aa:	cd b7       	in	r28, 0x3d	; 61
    15ac:	de b7       	in	r29, 0x3e	; 62
    15ae:	8a 83       	std	Y+2, r24	; 0x02
    15b0:	6b 83       	std	Y+3, r22	; 0x03
	DIO_ErrorStatus LOC_enumState = DIO_OK;
    15b2:	81 e0       	ldi	r24, 0x01	; 1
    15b4:	89 83       	std	Y+1, r24	; 0x01
	
	if (Copy_u8Port <= DIO_PORTD)
    15b6:	8a 81       	ldd	r24, Y+2	; 0x02
    15b8:	84 30       	cpi	r24, 0x04	; 4
    15ba:	08 f0       	brcs	.+2      	; 0x15be <DIO_enumWritLowNibbles+0x1e>
    15bc:	61 c0       	rjmp	.+194    	; 0x1680 <DIO_enumWritLowNibbles+0xe0>
	{
		switch (Copy_u8Port)
    15be:	8a 81       	ldd	r24, Y+2	; 0x02
    15c0:	28 2f       	mov	r18, r24
    15c2:	30 e0       	ldi	r19, 0x00	; 0
    15c4:	3d 83       	std	Y+5, r19	; 0x05
    15c6:	2c 83       	std	Y+4, r18	; 0x04
    15c8:	8c 81       	ldd	r24, Y+4	; 0x04
    15ca:	9d 81       	ldd	r25, Y+5	; 0x05
    15cc:	81 30       	cpi	r24, 0x01	; 1
    15ce:	91 05       	cpc	r25, r1
    15d0:	29 f1       	breq	.+74     	; 0x161c <DIO_enumWritLowNibbles+0x7c>
    15d2:	2c 81       	ldd	r18, Y+4	; 0x04
    15d4:	3d 81       	ldd	r19, Y+5	; 0x05
    15d6:	22 30       	cpi	r18, 0x02	; 2
    15d8:	31 05       	cpc	r19, r1
    15da:	2c f4       	brge	.+10     	; 0x15e6 <DIO_enumWritLowNibbles+0x46>
    15dc:	8c 81       	ldd	r24, Y+4	; 0x04
    15de:	9d 81       	ldd	r25, Y+5	; 0x05
    15e0:	00 97       	sbiw	r24, 0x00	; 0
    15e2:	61 f0       	breq	.+24     	; 0x15fc <DIO_enumWritLowNibbles+0x5c>
    15e4:	4b c0       	rjmp	.+150    	; 0x167c <DIO_enumWritLowNibbles+0xdc>
    15e6:	2c 81       	ldd	r18, Y+4	; 0x04
    15e8:	3d 81       	ldd	r19, Y+5	; 0x05
    15ea:	22 30       	cpi	r18, 0x02	; 2
    15ec:	31 05       	cpc	r19, r1
    15ee:	31 f1       	breq	.+76     	; 0x163c <DIO_enumWritLowNibbles+0x9c>
    15f0:	8c 81       	ldd	r24, Y+4	; 0x04
    15f2:	9d 81       	ldd	r25, Y+5	; 0x05
    15f4:	83 30       	cpi	r24, 0x03	; 3
    15f6:	91 05       	cpc	r25, r1
    15f8:	89 f1       	breq	.+98     	; 0x165c <DIO_enumWritLowNibbles+0xbc>
    15fa:	40 c0       	rjmp	.+128    	; 0x167c <DIO_enumWritLowNibbles+0xdc>
		{
		case DIO_PORTA : 
			PORTA_Register &= 0xf0;
    15fc:	ab e3       	ldi	r26, 0x3B	; 59
    15fe:	b0 e0       	ldi	r27, 0x00	; 0
    1600:	eb e3       	ldi	r30, 0x3B	; 59
    1602:	f0 e0       	ldi	r31, 0x00	; 0
    1604:	80 81       	ld	r24, Z
    1606:	80 7f       	andi	r24, 0xF0	; 240
    1608:	8c 93       	st	X, r24
			PORTA_Register |= Copy_u8Value;
    160a:	ab e3       	ldi	r26, 0x3B	; 59
    160c:	b0 e0       	ldi	r27, 0x00	; 0
    160e:	eb e3       	ldi	r30, 0x3B	; 59
    1610:	f0 e0       	ldi	r31, 0x00	; 0
    1612:	90 81       	ld	r25, Z
    1614:	8b 81       	ldd	r24, Y+3	; 0x03
    1616:	89 2b       	or	r24, r25
    1618:	8c 93       	st	X, r24
    161a:	33 c0       	rjmp	.+102    	; 0x1682 <DIO_enumWritLowNibbles+0xe2>
		    break; 
		case DIO_PORTB :
			PORTB_Register &= 0xf0;
    161c:	a8 e3       	ldi	r26, 0x38	; 56
    161e:	b0 e0       	ldi	r27, 0x00	; 0
    1620:	e8 e3       	ldi	r30, 0x38	; 56
    1622:	f0 e0       	ldi	r31, 0x00	; 0
    1624:	80 81       	ld	r24, Z
    1626:	80 7f       	andi	r24, 0xF0	; 240
    1628:	8c 93       	st	X, r24
			PORTB_Register |= Copy_u8Value;
    162a:	a8 e3       	ldi	r26, 0x38	; 56
    162c:	b0 e0       	ldi	r27, 0x00	; 0
    162e:	e8 e3       	ldi	r30, 0x38	; 56
    1630:	f0 e0       	ldi	r31, 0x00	; 0
    1632:	90 81       	ld	r25, Z
    1634:	8b 81       	ldd	r24, Y+3	; 0x03
    1636:	89 2b       	or	r24, r25
    1638:	8c 93       	st	X, r24
    163a:	23 c0       	rjmp	.+70     	; 0x1682 <DIO_enumWritLowNibbles+0xe2>
		    break; 
		case DIO_PORTC :
			PORTC_Register &= 0xf0;
    163c:	a5 e3       	ldi	r26, 0x35	; 53
    163e:	b0 e0       	ldi	r27, 0x00	; 0
    1640:	e5 e3       	ldi	r30, 0x35	; 53
    1642:	f0 e0       	ldi	r31, 0x00	; 0
    1644:	80 81       	ld	r24, Z
    1646:	80 7f       	andi	r24, 0xF0	; 240
    1648:	8c 93       	st	X, r24
			PORTC_Register |= Copy_u8Value;
    164a:	a5 e3       	ldi	r26, 0x35	; 53
    164c:	b0 e0       	ldi	r27, 0x00	; 0
    164e:	e5 e3       	ldi	r30, 0x35	; 53
    1650:	f0 e0       	ldi	r31, 0x00	; 0
    1652:	90 81       	ld	r25, Z
    1654:	8b 81       	ldd	r24, Y+3	; 0x03
    1656:	89 2b       	or	r24, r25
    1658:	8c 93       	st	X, r24
    165a:	13 c0       	rjmp	.+38     	; 0x1682 <DIO_enumWritLowNibbles+0xe2>
		    break; 
		case DIO_PORTD :
			PORTD_Register &= 0xf0;
    165c:	a2 e3       	ldi	r26, 0x32	; 50
    165e:	b0 e0       	ldi	r27, 0x00	; 0
    1660:	e2 e3       	ldi	r30, 0x32	; 50
    1662:	f0 e0       	ldi	r31, 0x00	; 0
    1664:	80 81       	ld	r24, Z
    1666:	80 7f       	andi	r24, 0xF0	; 240
    1668:	8c 93       	st	X, r24
			PORTD_Register |= Copy_u8Value;
    166a:	a2 e3       	ldi	r26, 0x32	; 50
    166c:	b0 e0       	ldi	r27, 0x00	; 0
    166e:	e2 e3       	ldi	r30, 0x32	; 50
    1670:	f0 e0       	ldi	r31, 0x00	; 0
    1672:	90 81       	ld	r25, Z
    1674:	8b 81       	ldd	r24, Y+3	; 0x03
    1676:	89 2b       	or	r24, r25
    1678:	8c 93       	st	X, r24
    167a:	03 c0       	rjmp	.+6      	; 0x1682 <DIO_enumWritLowNibbles+0xe2>
		    break; 
		default : LOC_enumState = DIO_NOK;
    167c:	19 82       	std	Y+1, r1	; 0x01
    167e:	01 c0       	rjmp	.+2      	; 0x1682 <DIO_enumWritLowNibbles+0xe2>
		}		
	}
	
	else
	{
		LOC_enumState = DIO_NOK;
    1680:	19 82       	std	Y+1, r1	; 0x01
	}
	
	return LOC_enumState;	
    1682:	89 81       	ldd	r24, Y+1	; 0x01
}
    1684:	0f 90       	pop	r0
    1686:	0f 90       	pop	r0
    1688:	0f 90       	pop	r0
    168a:	0f 90       	pop	r0
    168c:	0f 90       	pop	r0
    168e:	cf 91       	pop	r28
    1690:	df 91       	pop	r29
    1692:	08 95       	ret

00001694 <LED_voidInit>:
#include "LED_interface.h"

#include "LED_private.h"

void LED_voidInit   (LED_Type_t Copy_structLedConfig)
{
    1694:	df 93       	push	r29
    1696:	cf 93       	push	r28
    1698:	00 d0       	rcall	.+0      	; 0x169a <LED_voidInit+0x6>
    169a:	0f 92       	push	r0
    169c:	cd b7       	in	r28, 0x3d	; 61
    169e:	de b7       	in	r29, 0x3e	; 62
    16a0:	69 83       	std	Y+1, r22	; 0x01
    16a2:	7a 83       	std	Y+2, r23	; 0x02
    16a4:	8b 83       	std	Y+3, r24	; 0x03
	DIO_enumSetPinDirection (Copy_structLedConfig.Port, Copy_structLedConfig.Pin, DIO_PIN_OUTPUT);
    16a6:	89 81       	ldd	r24, Y+1	; 0x01
    16a8:	9a 81       	ldd	r25, Y+2	; 0x02
    16aa:	69 2f       	mov	r22, r25
    16ac:	41 e0       	ldi	r20, 0x01	; 1
    16ae:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_enumSetPinDirection>
}
    16b2:	0f 90       	pop	r0
    16b4:	0f 90       	pop	r0
    16b6:	0f 90       	pop	r0
    16b8:	cf 91       	pop	r28
    16ba:	df 91       	pop	r29
    16bc:	08 95       	ret

000016be <LED_voidOn>:

void LED_voidOn     (LED_Type_t Copy_structLedConfig)
{
    16be:	df 93       	push	r29
    16c0:	cf 93       	push	r28
    16c2:	00 d0       	rcall	.+0      	; 0x16c4 <LED_voidOn+0x6>
    16c4:	0f 92       	push	r0
    16c6:	cd b7       	in	r28, 0x3d	; 61
    16c8:	de b7       	in	r29, 0x3e	; 62
    16ca:	69 83       	std	Y+1, r22	; 0x01
    16cc:	7a 83       	std	Y+2, r23	; 0x02
    16ce:	8b 83       	std	Y+3, r24	; 0x03
	if (Copy_structLedConfig.Active_State == ACTIVE_HIGH)
    16d0:	8b 81       	ldd	r24, Y+3	; 0x03
    16d2:	81 30       	cpi	r24, 0x01	; 1
    16d4:	39 f4       	brne	.+14     	; 0x16e4 <LED_voidOn+0x26>
	{
		DIO_enumSetPinValue (Copy_structLedConfig.Port, Copy_structLedConfig.Pin, DIO_PIN_HIGH);
    16d6:	89 81       	ldd	r24, Y+1	; 0x01
    16d8:	9a 81       	ldd	r25, Y+2	; 0x02
    16da:	69 2f       	mov	r22, r25
    16dc:	41 e0       	ldi	r20, 0x01	; 1
    16de:	0e 94 aa 06 	call	0xd54	; 0xd54 <DIO_enumSetPinValue>
    16e2:	09 c0       	rjmp	.+18     	; 0x16f6 <LED_voidOn+0x38>
	}
	
	else if (Copy_structLedConfig.Active_State == ACTIVE_LOW)
    16e4:	8b 81       	ldd	r24, Y+3	; 0x03
    16e6:	88 23       	and	r24, r24
    16e8:	31 f4       	brne	.+12     	; 0x16f6 <LED_voidOn+0x38>
	{
		DIO_enumSetPinValue (Copy_structLedConfig.Port, Copy_structLedConfig.Pin, DIO_PIN_LOW);
    16ea:	89 81       	ldd	r24, Y+1	; 0x01
    16ec:	9a 81       	ldd	r25, Y+2	; 0x02
    16ee:	69 2f       	mov	r22, r25
    16f0:	40 e0       	ldi	r20, 0x00	; 0
    16f2:	0e 94 aa 06 	call	0xd54	; 0xd54 <DIO_enumSetPinValue>
	}
}
    16f6:	0f 90       	pop	r0
    16f8:	0f 90       	pop	r0
    16fa:	0f 90       	pop	r0
    16fc:	cf 91       	pop	r28
    16fe:	df 91       	pop	r29
    1700:	08 95       	ret

00001702 <LED_voidOff>:

void LED_voidOff    (LED_Type_t Copy_structLedConfig)
{
    1702:	df 93       	push	r29
    1704:	cf 93       	push	r28
    1706:	00 d0       	rcall	.+0      	; 0x1708 <LED_voidOff+0x6>
    1708:	0f 92       	push	r0
    170a:	cd b7       	in	r28, 0x3d	; 61
    170c:	de b7       	in	r29, 0x3e	; 62
    170e:	69 83       	std	Y+1, r22	; 0x01
    1710:	7a 83       	std	Y+2, r23	; 0x02
    1712:	8b 83       	std	Y+3, r24	; 0x03
	if (Copy_structLedConfig.Active_State == ACTIVE_HIGH)
    1714:	8b 81       	ldd	r24, Y+3	; 0x03
    1716:	81 30       	cpi	r24, 0x01	; 1
    1718:	39 f4       	brne	.+14     	; 0x1728 <LED_voidOff+0x26>
	{
		DIO_enumSetPinValue (Copy_structLedConfig.Port, Copy_structLedConfig.Pin, DIO_PIN_LOW);
    171a:	89 81       	ldd	r24, Y+1	; 0x01
    171c:	9a 81       	ldd	r25, Y+2	; 0x02
    171e:	69 2f       	mov	r22, r25
    1720:	40 e0       	ldi	r20, 0x00	; 0
    1722:	0e 94 aa 06 	call	0xd54	; 0xd54 <DIO_enumSetPinValue>
    1726:	09 c0       	rjmp	.+18     	; 0x173a <LED_voidOff+0x38>
	}
	
	else if (Copy_structLedConfig.Active_State == ACTIVE_LOW)
    1728:	8b 81       	ldd	r24, Y+3	; 0x03
    172a:	88 23       	and	r24, r24
    172c:	31 f4       	brne	.+12     	; 0x173a <LED_voidOff+0x38>
	{
		DIO_enumSetPinValue (Copy_structLedConfig.Port, Copy_structLedConfig.Pin, DIO_PIN_HIGH);
    172e:	89 81       	ldd	r24, Y+1	; 0x01
    1730:	9a 81       	ldd	r25, Y+2	; 0x02
    1732:	69 2f       	mov	r22, r25
    1734:	41 e0       	ldi	r20, 0x01	; 1
    1736:	0e 94 aa 06 	call	0xd54	; 0xd54 <DIO_enumSetPinValue>
	}	
}
    173a:	0f 90       	pop	r0
    173c:	0f 90       	pop	r0
    173e:	0f 90       	pop	r0
    1740:	cf 91       	pop	r28
    1742:	df 91       	pop	r29
    1744:	08 95       	ret

00001746 <LED_voidToggle>:

void LED_voidToggle (LED_Type_t Copy_structLedConfig)
{
    1746:	df 93       	push	r29
    1748:	cf 93       	push	r28
    174a:	00 d0       	rcall	.+0      	; 0x174c <LED_voidToggle+0x6>
    174c:	0f 92       	push	r0
    174e:	cd b7       	in	r28, 0x3d	; 61
    1750:	de b7       	in	r29, 0x3e	; 62
    1752:	69 83       	std	Y+1, r22	; 0x01
    1754:	7a 83       	std	Y+2, r23	; 0x02
    1756:	8b 83       	std	Y+3, r24	; 0x03
	DIO_enumTogglePinValue (Copy_structLedConfig.Port, Copy_structLedConfig.Pin);
    1758:	89 81       	ldd	r24, Y+1	; 0x01
    175a:	9a 81       	ldd	r25, Y+2	; 0x02
    175c:	69 2f       	mov	r22, r25
    175e:	0e 94 7e 08 	call	0x10fc	; 0x10fc <DIO_enumTogglePinValue>
}
    1762:	0f 90       	pop	r0
    1764:	0f 90       	pop	r0
    1766:	0f 90       	pop	r0
    1768:	cf 91       	pop	r28
    176a:	df 91       	pop	r29
    176c:	08 95       	ret

0000176e <main>:
void pingPongEvery250ms               (void);
void incrementingEvery250             (void);
void twoLedsConvergeDivergeEvery250ms (void);

void main()
{
    176e:	df 93       	push	r29
    1770:	cf 93       	push	r28
    1772:	0f 92       	push	r0
    1774:	cd b7       	in	r28, 0x3d	; 61
    1776:	de b7       	in	r29, 0x3e	; 62
	// Initialization Of LEDs
    LOOP(NUM_OF_LEDS)
    1778:	19 82       	std	Y+1, r1	; 0x01
    177a:	13 c0       	rjmp	.+38     	; 0x17a2 <main+0x34>
    {
    	LED_voidInit   (Leds[i]);
    177c:	89 81       	ldd	r24, Y+1	; 0x01
    177e:	28 2f       	mov	r18, r24
    1780:	30 e0       	ldi	r19, 0x00	; 0
    1782:	c9 01       	movw	r24, r18
    1784:	88 0f       	add	r24, r24
    1786:	99 1f       	adc	r25, r25
    1788:	82 0f       	add	r24, r18
    178a:	93 1f       	adc	r25, r19
    178c:	fc 01       	movw	r30, r24
    178e:	e8 59       	subi	r30, 0x98	; 152
    1790:	ff 4f       	sbci	r31, 0xFF	; 255
    1792:	60 81       	ld	r22, Z
    1794:	71 81       	ldd	r23, Z+1	; 0x01
    1796:	82 81       	ldd	r24, Z+2	; 0x02
    1798:	0e 94 4a 0b 	call	0x1694	; 0x1694 <LED_voidInit>
void twoLedsConvergeDivergeEvery250ms (void);

void main()
{
	// Initialization Of LEDs
    LOOP(NUM_OF_LEDS)
    179c:	89 81       	ldd	r24, Y+1	; 0x01
    179e:	8f 5f       	subi	r24, 0xFF	; 255
    17a0:	89 83       	std	Y+1, r24	; 0x01
    17a2:	89 81       	ldd	r24, Y+1	; 0x01
    17a4:	88 30       	cpi	r24, 0x08	; 8
    17a6:	50 f3       	brcs	.-44     	; 0x177c <main+0xe>
    	LED_voidInit   (Leds[i]);
    }

    while(1)
    {
    	twoLedsConvergeDivergeEvery250ms ();
    17a8:	0e 94 0f 13 	call	0x261e	; 0x261e <twoLedsConvergeDivergeEvery250ms>
    17ac:	fd cf       	rjmp	.-6      	; 0x17a8 <main+0x3a>

000017ae <flashingEvery1000ms>:
    }
}

void flashingEvery1000ms              (void) {
    17ae:	df 93       	push	r29
    17b0:	cf 93       	push	r28
    17b2:	cd b7       	in	r28, 0x3d	; 61
    17b4:	de b7       	in	r29, 0x3e	; 62
    17b6:	6e 97       	sbiw	r28, 0x1e	; 30
    17b8:	0f b6       	in	r0, 0x3f	; 63
    17ba:	f8 94       	cli
    17bc:	de bf       	out	0x3e, r29	; 62
    17be:	0f be       	out	0x3f, r0	; 63
    17c0:	cd bf       	out	0x3d, r28	; 61

	LOOP(NUM_OF_LEDS)
    17c2:	1e 8e       	std	Y+30, r1	; 0x1e
    17c4:	13 c0       	rjmp	.+38     	; 0x17ec <flashingEvery1000ms+0x3e>
	{
		LED_voidOn (Leds[i]);
    17c6:	8e 8d       	ldd	r24, Y+30	; 0x1e
    17c8:	28 2f       	mov	r18, r24
    17ca:	30 e0       	ldi	r19, 0x00	; 0
    17cc:	c9 01       	movw	r24, r18
    17ce:	88 0f       	add	r24, r24
    17d0:	99 1f       	adc	r25, r25
    17d2:	82 0f       	add	r24, r18
    17d4:	93 1f       	adc	r25, r19
    17d6:	fc 01       	movw	r30, r24
    17d8:	e8 59       	subi	r30, 0x98	; 152
    17da:	ff 4f       	sbci	r31, 0xFF	; 255
    17dc:	60 81       	ld	r22, Z
    17de:	71 81       	ldd	r23, Z+1	; 0x01
    17e0:	82 81       	ldd	r24, Z+2	; 0x02
    17e2:	0e 94 5f 0b 	call	0x16be	; 0x16be <LED_voidOn>
    }
}

void flashingEvery1000ms              (void) {

	LOOP(NUM_OF_LEDS)
    17e6:	8e 8d       	ldd	r24, Y+30	; 0x1e
    17e8:	8f 5f       	subi	r24, 0xFF	; 255
    17ea:	8e 8f       	std	Y+30, r24	; 0x1e
    17ec:	8e 8d       	ldd	r24, Y+30	; 0x1e
    17ee:	88 30       	cpi	r24, 0x08	; 8
    17f0:	50 f3       	brcs	.-44     	; 0x17c6 <flashingEvery1000ms+0x18>
    17f2:	80 e0       	ldi	r24, 0x00	; 0
    17f4:	90 e0       	ldi	r25, 0x00	; 0
    17f6:	aa e7       	ldi	r26, 0x7A	; 122
    17f8:	b4 e4       	ldi	r27, 0x44	; 68
    17fa:	89 8f       	std	Y+25, r24	; 0x19
    17fc:	9a 8f       	std	Y+26, r25	; 0x1a
    17fe:	ab 8f       	std	Y+27, r26	; 0x1b
    1800:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1802:	69 8d       	ldd	r22, Y+25	; 0x19
    1804:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1806:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1808:	9c 8d       	ldd	r25, Y+28	; 0x1c
    180a:	20 e0       	ldi	r18, 0x00	; 0
    180c:	30 e0       	ldi	r19, 0x00	; 0
    180e:	4a ef       	ldi	r20, 0xFA	; 250
    1810:	54 e4       	ldi	r21, 0x44	; 68
    1812:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1816:	dc 01       	movw	r26, r24
    1818:	cb 01       	movw	r24, r22
    181a:	8d 8b       	std	Y+21, r24	; 0x15
    181c:	9e 8b       	std	Y+22, r25	; 0x16
    181e:	af 8b       	std	Y+23, r26	; 0x17
    1820:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1822:	6d 89       	ldd	r22, Y+21	; 0x15
    1824:	7e 89       	ldd	r23, Y+22	; 0x16
    1826:	8f 89       	ldd	r24, Y+23	; 0x17
    1828:	98 8d       	ldd	r25, Y+24	; 0x18
    182a:	20 e0       	ldi	r18, 0x00	; 0
    182c:	30 e0       	ldi	r19, 0x00	; 0
    182e:	40 e8       	ldi	r20, 0x80	; 128
    1830:	5f e3       	ldi	r21, 0x3F	; 63
    1832:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1836:	88 23       	and	r24, r24
    1838:	2c f4       	brge	.+10     	; 0x1844 <flashingEvery1000ms+0x96>
		__ticks = 1;
    183a:	81 e0       	ldi	r24, 0x01	; 1
    183c:	90 e0       	ldi	r25, 0x00	; 0
    183e:	9c 8b       	std	Y+20, r25	; 0x14
    1840:	8b 8b       	std	Y+19, r24	; 0x13
    1842:	3f c0       	rjmp	.+126    	; 0x18c2 <flashingEvery1000ms+0x114>
	else if (__tmp > 65535)
    1844:	6d 89       	ldd	r22, Y+21	; 0x15
    1846:	7e 89       	ldd	r23, Y+22	; 0x16
    1848:	8f 89       	ldd	r24, Y+23	; 0x17
    184a:	98 8d       	ldd	r25, Y+24	; 0x18
    184c:	20 e0       	ldi	r18, 0x00	; 0
    184e:	3f ef       	ldi	r19, 0xFF	; 255
    1850:	4f e7       	ldi	r20, 0x7F	; 127
    1852:	57 e4       	ldi	r21, 0x47	; 71
    1854:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1858:	18 16       	cp	r1, r24
    185a:	4c f5       	brge	.+82     	; 0x18ae <flashingEvery1000ms+0x100>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    185c:	69 8d       	ldd	r22, Y+25	; 0x19
    185e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1860:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1862:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1864:	20 e0       	ldi	r18, 0x00	; 0
    1866:	30 e0       	ldi	r19, 0x00	; 0
    1868:	40 e2       	ldi	r20, 0x20	; 32
    186a:	51 e4       	ldi	r21, 0x41	; 65
    186c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1870:	dc 01       	movw	r26, r24
    1872:	cb 01       	movw	r24, r22
    1874:	bc 01       	movw	r22, r24
    1876:	cd 01       	movw	r24, r26
    1878:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    187c:	dc 01       	movw	r26, r24
    187e:	cb 01       	movw	r24, r22
    1880:	9c 8b       	std	Y+20, r25	; 0x14
    1882:	8b 8b       	std	Y+19, r24	; 0x13
    1884:	0f c0       	rjmp	.+30     	; 0x18a4 <flashingEvery1000ms+0xf6>
    1886:	88 ec       	ldi	r24, 0xC8	; 200
    1888:	90 e0       	ldi	r25, 0x00	; 0
    188a:	9a 8b       	std	Y+18, r25	; 0x12
    188c:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    188e:	89 89       	ldd	r24, Y+17	; 0x11
    1890:	9a 89       	ldd	r25, Y+18	; 0x12
    1892:	01 97       	sbiw	r24, 0x01	; 1
    1894:	f1 f7       	brne	.-4      	; 0x1892 <flashingEvery1000ms+0xe4>
    1896:	9a 8b       	std	Y+18, r25	; 0x12
    1898:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    189a:	8b 89       	ldd	r24, Y+19	; 0x13
    189c:	9c 89       	ldd	r25, Y+20	; 0x14
    189e:	01 97       	sbiw	r24, 0x01	; 1
    18a0:	9c 8b       	std	Y+20, r25	; 0x14
    18a2:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18a4:	8b 89       	ldd	r24, Y+19	; 0x13
    18a6:	9c 89       	ldd	r25, Y+20	; 0x14
    18a8:	00 97       	sbiw	r24, 0x00	; 0
    18aa:	69 f7       	brne	.-38     	; 0x1886 <flashingEvery1000ms+0xd8>
    18ac:	14 c0       	rjmp	.+40     	; 0x18d6 <flashingEvery1000ms+0x128>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18ae:	6d 89       	ldd	r22, Y+21	; 0x15
    18b0:	7e 89       	ldd	r23, Y+22	; 0x16
    18b2:	8f 89       	ldd	r24, Y+23	; 0x17
    18b4:	98 8d       	ldd	r25, Y+24	; 0x18
    18b6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    18ba:	dc 01       	movw	r26, r24
    18bc:	cb 01       	movw	r24, r22
    18be:	9c 8b       	std	Y+20, r25	; 0x14
    18c0:	8b 8b       	std	Y+19, r24	; 0x13
    18c2:	8b 89       	ldd	r24, Y+19	; 0x13
    18c4:	9c 89       	ldd	r25, Y+20	; 0x14
    18c6:	98 8b       	std	Y+16, r25	; 0x10
    18c8:	8f 87       	std	Y+15, r24	; 0x0f
    18ca:	8f 85       	ldd	r24, Y+15	; 0x0f
    18cc:	98 89       	ldd	r25, Y+16	; 0x10
    18ce:	01 97       	sbiw	r24, 0x01	; 1
    18d0:	f1 f7       	brne	.-4      	; 0x18ce <flashingEvery1000ms+0x120>
    18d2:	98 8b       	std	Y+16, r25	; 0x10
    18d4:	8f 87       	std	Y+15, r24	; 0x0f
	{
		LED_voidOn (Leds[i]);
	}
	_delay_ms(1000);

	LOOP(NUM_OF_LEDS)
    18d6:	1d 8e       	std	Y+29, r1	; 0x1d
    18d8:	13 c0       	rjmp	.+38     	; 0x1900 <flashingEvery1000ms+0x152>
	{
		LED_voidOff (Leds[i]);
    18da:	8d 8d       	ldd	r24, Y+29	; 0x1d
    18dc:	28 2f       	mov	r18, r24
    18de:	30 e0       	ldi	r19, 0x00	; 0
    18e0:	c9 01       	movw	r24, r18
    18e2:	88 0f       	add	r24, r24
    18e4:	99 1f       	adc	r25, r25
    18e6:	82 0f       	add	r24, r18
    18e8:	93 1f       	adc	r25, r19
    18ea:	fc 01       	movw	r30, r24
    18ec:	e8 59       	subi	r30, 0x98	; 152
    18ee:	ff 4f       	sbci	r31, 0xFF	; 255
    18f0:	60 81       	ld	r22, Z
    18f2:	71 81       	ldd	r23, Z+1	; 0x01
    18f4:	82 81       	ldd	r24, Z+2	; 0x02
    18f6:	0e 94 81 0b 	call	0x1702	; 0x1702 <LED_voidOff>
	{
		LED_voidOn (Leds[i]);
	}
	_delay_ms(1000);

	LOOP(NUM_OF_LEDS)
    18fa:	8d 8d       	ldd	r24, Y+29	; 0x1d
    18fc:	8f 5f       	subi	r24, 0xFF	; 255
    18fe:	8d 8f       	std	Y+29, r24	; 0x1d
    1900:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1902:	88 30       	cpi	r24, 0x08	; 8
    1904:	50 f3       	brcs	.-44     	; 0x18da <flashingEvery1000ms+0x12c>
    1906:	80 e0       	ldi	r24, 0x00	; 0
    1908:	90 e0       	ldi	r25, 0x00	; 0
    190a:	aa e7       	ldi	r26, 0x7A	; 122
    190c:	b4 e4       	ldi	r27, 0x44	; 68
    190e:	8b 87       	std	Y+11, r24	; 0x0b
    1910:	9c 87       	std	Y+12, r25	; 0x0c
    1912:	ad 87       	std	Y+13, r26	; 0x0d
    1914:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1916:	6b 85       	ldd	r22, Y+11	; 0x0b
    1918:	7c 85       	ldd	r23, Y+12	; 0x0c
    191a:	8d 85       	ldd	r24, Y+13	; 0x0d
    191c:	9e 85       	ldd	r25, Y+14	; 0x0e
    191e:	20 e0       	ldi	r18, 0x00	; 0
    1920:	30 e0       	ldi	r19, 0x00	; 0
    1922:	4a ef       	ldi	r20, 0xFA	; 250
    1924:	54 e4       	ldi	r21, 0x44	; 68
    1926:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    192a:	dc 01       	movw	r26, r24
    192c:	cb 01       	movw	r24, r22
    192e:	8f 83       	std	Y+7, r24	; 0x07
    1930:	98 87       	std	Y+8, r25	; 0x08
    1932:	a9 87       	std	Y+9, r26	; 0x09
    1934:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1936:	6f 81       	ldd	r22, Y+7	; 0x07
    1938:	78 85       	ldd	r23, Y+8	; 0x08
    193a:	89 85       	ldd	r24, Y+9	; 0x09
    193c:	9a 85       	ldd	r25, Y+10	; 0x0a
    193e:	20 e0       	ldi	r18, 0x00	; 0
    1940:	30 e0       	ldi	r19, 0x00	; 0
    1942:	40 e8       	ldi	r20, 0x80	; 128
    1944:	5f e3       	ldi	r21, 0x3F	; 63
    1946:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    194a:	88 23       	and	r24, r24
    194c:	2c f4       	brge	.+10     	; 0x1958 <flashingEvery1000ms+0x1aa>
		__ticks = 1;
    194e:	81 e0       	ldi	r24, 0x01	; 1
    1950:	90 e0       	ldi	r25, 0x00	; 0
    1952:	9e 83       	std	Y+6, r25	; 0x06
    1954:	8d 83       	std	Y+5, r24	; 0x05
    1956:	3f c0       	rjmp	.+126    	; 0x19d6 <flashingEvery1000ms+0x228>
	else if (__tmp > 65535)
    1958:	6f 81       	ldd	r22, Y+7	; 0x07
    195a:	78 85       	ldd	r23, Y+8	; 0x08
    195c:	89 85       	ldd	r24, Y+9	; 0x09
    195e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1960:	20 e0       	ldi	r18, 0x00	; 0
    1962:	3f ef       	ldi	r19, 0xFF	; 255
    1964:	4f e7       	ldi	r20, 0x7F	; 127
    1966:	57 e4       	ldi	r21, 0x47	; 71
    1968:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    196c:	18 16       	cp	r1, r24
    196e:	4c f5       	brge	.+82     	; 0x19c2 <flashingEvery1000ms+0x214>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1970:	6b 85       	ldd	r22, Y+11	; 0x0b
    1972:	7c 85       	ldd	r23, Y+12	; 0x0c
    1974:	8d 85       	ldd	r24, Y+13	; 0x0d
    1976:	9e 85       	ldd	r25, Y+14	; 0x0e
    1978:	20 e0       	ldi	r18, 0x00	; 0
    197a:	30 e0       	ldi	r19, 0x00	; 0
    197c:	40 e2       	ldi	r20, 0x20	; 32
    197e:	51 e4       	ldi	r21, 0x41	; 65
    1980:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1984:	dc 01       	movw	r26, r24
    1986:	cb 01       	movw	r24, r22
    1988:	bc 01       	movw	r22, r24
    198a:	cd 01       	movw	r24, r26
    198c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1990:	dc 01       	movw	r26, r24
    1992:	cb 01       	movw	r24, r22
    1994:	9e 83       	std	Y+6, r25	; 0x06
    1996:	8d 83       	std	Y+5, r24	; 0x05
    1998:	0f c0       	rjmp	.+30     	; 0x19b8 <flashingEvery1000ms+0x20a>
    199a:	88 ec       	ldi	r24, 0xC8	; 200
    199c:	90 e0       	ldi	r25, 0x00	; 0
    199e:	9c 83       	std	Y+4, r25	; 0x04
    19a0:	8b 83       	std	Y+3, r24	; 0x03
    19a2:	8b 81       	ldd	r24, Y+3	; 0x03
    19a4:	9c 81       	ldd	r25, Y+4	; 0x04
    19a6:	01 97       	sbiw	r24, 0x01	; 1
    19a8:	f1 f7       	brne	.-4      	; 0x19a6 <flashingEvery1000ms+0x1f8>
    19aa:	9c 83       	std	Y+4, r25	; 0x04
    19ac:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19ae:	8d 81       	ldd	r24, Y+5	; 0x05
    19b0:	9e 81       	ldd	r25, Y+6	; 0x06
    19b2:	01 97       	sbiw	r24, 0x01	; 1
    19b4:	9e 83       	std	Y+6, r25	; 0x06
    19b6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19b8:	8d 81       	ldd	r24, Y+5	; 0x05
    19ba:	9e 81       	ldd	r25, Y+6	; 0x06
    19bc:	00 97       	sbiw	r24, 0x00	; 0
    19be:	69 f7       	brne	.-38     	; 0x199a <flashingEvery1000ms+0x1ec>
    19c0:	14 c0       	rjmp	.+40     	; 0x19ea <flashingEvery1000ms+0x23c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19c2:	6f 81       	ldd	r22, Y+7	; 0x07
    19c4:	78 85       	ldd	r23, Y+8	; 0x08
    19c6:	89 85       	ldd	r24, Y+9	; 0x09
    19c8:	9a 85       	ldd	r25, Y+10	; 0x0a
    19ca:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    19ce:	dc 01       	movw	r26, r24
    19d0:	cb 01       	movw	r24, r22
    19d2:	9e 83       	std	Y+6, r25	; 0x06
    19d4:	8d 83       	std	Y+5, r24	; 0x05
    19d6:	8d 81       	ldd	r24, Y+5	; 0x05
    19d8:	9e 81       	ldd	r25, Y+6	; 0x06
    19da:	9a 83       	std	Y+2, r25	; 0x02
    19dc:	89 83       	std	Y+1, r24	; 0x01
    19de:	89 81       	ldd	r24, Y+1	; 0x01
    19e0:	9a 81       	ldd	r25, Y+2	; 0x02
    19e2:	01 97       	sbiw	r24, 0x01	; 1
    19e4:	f1 f7       	brne	.-4      	; 0x19e2 <flashingEvery1000ms+0x234>
    19e6:	9a 83       	std	Y+2, r25	; 0x02
    19e8:	89 83       	std	Y+1, r24	; 0x01
	{
		LED_voidOff (Leds[i]);
	}
	_delay_ms(1000);
}
    19ea:	6e 96       	adiw	r28, 0x1e	; 30
    19ec:	0f b6       	in	r0, 0x3f	; 63
    19ee:	f8 94       	cli
    19f0:	de bf       	out	0x3e, r29	; 62
    19f2:	0f be       	out	0x3f, r0	; 63
    19f4:	cd bf       	out	0x3d, r28	; 61
    19f6:	cf 91       	pop	r28
    19f8:	df 91       	pop	r29
    19fa:	08 95       	ret

000019fc <shiftingLeftEvery250ms>:

void shiftingLeftEvery250ms           (void) {
    19fc:	df 93       	push	r29
    19fe:	cf 93       	push	r28
    1a00:	cd b7       	in	r28, 0x3d	; 61
    1a02:	de b7       	in	r29, 0x3e	; 62
    1a04:	2f 97       	sbiw	r28, 0x0f	; 15
    1a06:	0f b6       	in	r0, 0x3f	; 63
    1a08:	f8 94       	cli
    1a0a:	de bf       	out	0x3e, r29	; 62
    1a0c:	0f be       	out	0x3f, r0	; 63
    1a0e:	cd bf       	out	0x3d, r28	; 61

	LOOP(NUM_OF_LEDS)
    1a10:	1f 86       	std	Y+15, r1	; 0x0f
    1a12:	95 c0       	rjmp	.+298    	; 0x1b3e <shiftingLeftEvery250ms+0x142>
	{
		LED_voidOn     (Leds[i]);
    1a14:	8f 85       	ldd	r24, Y+15	; 0x0f
    1a16:	28 2f       	mov	r18, r24
    1a18:	30 e0       	ldi	r19, 0x00	; 0
    1a1a:	c9 01       	movw	r24, r18
    1a1c:	88 0f       	add	r24, r24
    1a1e:	99 1f       	adc	r25, r25
    1a20:	82 0f       	add	r24, r18
    1a22:	93 1f       	adc	r25, r19
    1a24:	fc 01       	movw	r30, r24
    1a26:	e8 59       	subi	r30, 0x98	; 152
    1a28:	ff 4f       	sbci	r31, 0xFF	; 255
    1a2a:	60 81       	ld	r22, Z
    1a2c:	71 81       	ldd	r23, Z+1	; 0x01
    1a2e:	82 81       	ldd	r24, Z+2	; 0x02
    1a30:	0e 94 5f 0b 	call	0x16be	; 0x16be <LED_voidOn>
    1a34:	80 e0       	ldi	r24, 0x00	; 0
    1a36:	90 e0       	ldi	r25, 0x00	; 0
    1a38:	aa e7       	ldi	r26, 0x7A	; 122
    1a3a:	b3 e4       	ldi	r27, 0x43	; 67
    1a3c:	8b 87       	std	Y+11, r24	; 0x0b
    1a3e:	9c 87       	std	Y+12, r25	; 0x0c
    1a40:	ad 87       	std	Y+13, r26	; 0x0d
    1a42:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a44:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a46:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a48:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a4a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a4c:	20 e0       	ldi	r18, 0x00	; 0
    1a4e:	30 e0       	ldi	r19, 0x00	; 0
    1a50:	4a ef       	ldi	r20, 0xFA	; 250
    1a52:	54 e4       	ldi	r21, 0x44	; 68
    1a54:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a58:	dc 01       	movw	r26, r24
    1a5a:	cb 01       	movw	r24, r22
    1a5c:	8f 83       	std	Y+7, r24	; 0x07
    1a5e:	98 87       	std	Y+8, r25	; 0x08
    1a60:	a9 87       	std	Y+9, r26	; 0x09
    1a62:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1a64:	6f 81       	ldd	r22, Y+7	; 0x07
    1a66:	78 85       	ldd	r23, Y+8	; 0x08
    1a68:	89 85       	ldd	r24, Y+9	; 0x09
    1a6a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a6c:	20 e0       	ldi	r18, 0x00	; 0
    1a6e:	30 e0       	ldi	r19, 0x00	; 0
    1a70:	40 e8       	ldi	r20, 0x80	; 128
    1a72:	5f e3       	ldi	r21, 0x3F	; 63
    1a74:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1a78:	88 23       	and	r24, r24
    1a7a:	2c f4       	brge	.+10     	; 0x1a86 <shiftingLeftEvery250ms+0x8a>
		__ticks = 1;
    1a7c:	81 e0       	ldi	r24, 0x01	; 1
    1a7e:	90 e0       	ldi	r25, 0x00	; 0
    1a80:	9e 83       	std	Y+6, r25	; 0x06
    1a82:	8d 83       	std	Y+5, r24	; 0x05
    1a84:	3f c0       	rjmp	.+126    	; 0x1b04 <shiftingLeftEvery250ms+0x108>
	else if (__tmp > 65535)
    1a86:	6f 81       	ldd	r22, Y+7	; 0x07
    1a88:	78 85       	ldd	r23, Y+8	; 0x08
    1a8a:	89 85       	ldd	r24, Y+9	; 0x09
    1a8c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a8e:	20 e0       	ldi	r18, 0x00	; 0
    1a90:	3f ef       	ldi	r19, 0xFF	; 255
    1a92:	4f e7       	ldi	r20, 0x7F	; 127
    1a94:	57 e4       	ldi	r21, 0x47	; 71
    1a96:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1a9a:	18 16       	cp	r1, r24
    1a9c:	4c f5       	brge	.+82     	; 0x1af0 <shiftingLeftEvery250ms+0xf4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a9e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1aa0:	7c 85       	ldd	r23, Y+12	; 0x0c
    1aa2:	8d 85       	ldd	r24, Y+13	; 0x0d
    1aa4:	9e 85       	ldd	r25, Y+14	; 0x0e
    1aa6:	20 e0       	ldi	r18, 0x00	; 0
    1aa8:	30 e0       	ldi	r19, 0x00	; 0
    1aaa:	40 e2       	ldi	r20, 0x20	; 32
    1aac:	51 e4       	ldi	r21, 0x41	; 65
    1aae:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1ab2:	dc 01       	movw	r26, r24
    1ab4:	cb 01       	movw	r24, r22
    1ab6:	bc 01       	movw	r22, r24
    1ab8:	cd 01       	movw	r24, r26
    1aba:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1abe:	dc 01       	movw	r26, r24
    1ac0:	cb 01       	movw	r24, r22
    1ac2:	9e 83       	std	Y+6, r25	; 0x06
    1ac4:	8d 83       	std	Y+5, r24	; 0x05
    1ac6:	0f c0       	rjmp	.+30     	; 0x1ae6 <shiftingLeftEvery250ms+0xea>
    1ac8:	88 ec       	ldi	r24, 0xC8	; 200
    1aca:	90 e0       	ldi	r25, 0x00	; 0
    1acc:	9c 83       	std	Y+4, r25	; 0x04
    1ace:	8b 83       	std	Y+3, r24	; 0x03
    1ad0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ad2:	9c 81       	ldd	r25, Y+4	; 0x04
    1ad4:	01 97       	sbiw	r24, 0x01	; 1
    1ad6:	f1 f7       	brne	.-4      	; 0x1ad4 <shiftingLeftEvery250ms+0xd8>
    1ad8:	9c 83       	std	Y+4, r25	; 0x04
    1ada:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1adc:	8d 81       	ldd	r24, Y+5	; 0x05
    1ade:	9e 81       	ldd	r25, Y+6	; 0x06
    1ae0:	01 97       	sbiw	r24, 0x01	; 1
    1ae2:	9e 83       	std	Y+6, r25	; 0x06
    1ae4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ae6:	8d 81       	ldd	r24, Y+5	; 0x05
    1ae8:	9e 81       	ldd	r25, Y+6	; 0x06
    1aea:	00 97       	sbiw	r24, 0x00	; 0
    1aec:	69 f7       	brne	.-38     	; 0x1ac8 <shiftingLeftEvery250ms+0xcc>
    1aee:	14 c0       	rjmp	.+40     	; 0x1b18 <shiftingLeftEvery250ms+0x11c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1af0:	6f 81       	ldd	r22, Y+7	; 0x07
    1af2:	78 85       	ldd	r23, Y+8	; 0x08
    1af4:	89 85       	ldd	r24, Y+9	; 0x09
    1af6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1af8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1afc:	dc 01       	movw	r26, r24
    1afe:	cb 01       	movw	r24, r22
    1b00:	9e 83       	std	Y+6, r25	; 0x06
    1b02:	8d 83       	std	Y+5, r24	; 0x05
    1b04:	8d 81       	ldd	r24, Y+5	; 0x05
    1b06:	9e 81       	ldd	r25, Y+6	; 0x06
    1b08:	9a 83       	std	Y+2, r25	; 0x02
    1b0a:	89 83       	std	Y+1, r24	; 0x01
    1b0c:	89 81       	ldd	r24, Y+1	; 0x01
    1b0e:	9a 81       	ldd	r25, Y+2	; 0x02
    1b10:	01 97       	sbiw	r24, 0x01	; 1
    1b12:	f1 f7       	brne	.-4      	; 0x1b10 <shiftingLeftEvery250ms+0x114>
    1b14:	9a 83       	std	Y+2, r25	; 0x02
    1b16:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(250);
		LED_voidOff     (Leds[i]);
    1b18:	8f 85       	ldd	r24, Y+15	; 0x0f
    1b1a:	28 2f       	mov	r18, r24
    1b1c:	30 e0       	ldi	r19, 0x00	; 0
    1b1e:	c9 01       	movw	r24, r18
    1b20:	88 0f       	add	r24, r24
    1b22:	99 1f       	adc	r25, r25
    1b24:	82 0f       	add	r24, r18
    1b26:	93 1f       	adc	r25, r19
    1b28:	fc 01       	movw	r30, r24
    1b2a:	e8 59       	subi	r30, 0x98	; 152
    1b2c:	ff 4f       	sbci	r31, 0xFF	; 255
    1b2e:	60 81       	ld	r22, Z
    1b30:	71 81       	ldd	r23, Z+1	; 0x01
    1b32:	82 81       	ldd	r24, Z+2	; 0x02
    1b34:	0e 94 81 0b 	call	0x1702	; 0x1702 <LED_voidOff>
	_delay_ms(1000);
}

void shiftingLeftEvery250ms           (void) {

	LOOP(NUM_OF_LEDS)
    1b38:	8f 85       	ldd	r24, Y+15	; 0x0f
    1b3a:	8f 5f       	subi	r24, 0xFF	; 255
    1b3c:	8f 87       	std	Y+15, r24	; 0x0f
    1b3e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1b40:	88 30       	cpi	r24, 0x08	; 8
    1b42:	08 f4       	brcc	.+2      	; 0x1b46 <shiftingLeftEvery250ms+0x14a>
    1b44:	67 cf       	rjmp	.-306    	; 0x1a14 <shiftingLeftEvery250ms+0x18>
	{
		LED_voidOn     (Leds[i]);
		_delay_ms(250);
		LED_voidOff     (Leds[i]);
	}
}
    1b46:	2f 96       	adiw	r28, 0x0f	; 15
    1b48:	0f b6       	in	r0, 0x3f	; 63
    1b4a:	f8 94       	cli
    1b4c:	de bf       	out	0x3e, r29	; 62
    1b4e:	0f be       	out	0x3f, r0	; 63
    1b50:	cd bf       	out	0x3d, r28	; 61
    1b52:	cf 91       	pop	r28
    1b54:	df 91       	pop	r29
    1b56:	08 95       	ret

00001b58 <shiftingRightEvery250ms>:

void shiftingRightEvery250ms          (void) {
    1b58:	df 93       	push	r29
    1b5a:	cf 93       	push	r28
    1b5c:	cd b7       	in	r28, 0x3d	; 61
    1b5e:	de b7       	in	r29, 0x3e	; 62
    1b60:	2f 97       	sbiw	r28, 0x0f	; 15
    1b62:	0f b6       	in	r0, 0x3f	; 63
    1b64:	f8 94       	cli
    1b66:	de bf       	out	0x3e, r29	; 62
    1b68:	0f be       	out	0x3f, r0	; 63
    1b6a:	cd bf       	out	0x3d, r28	; 61

	LOOP(NUM_OF_LEDS)
    1b6c:	1f 86       	std	Y+15, r1	; 0x0f
    1b6e:	a1 c0       	rjmp	.+322    	; 0x1cb2 <shiftingRightEvery250ms+0x15a>
	{
		LED_voidOn     (Leds[7 - i]);
    1b70:	8f 85       	ldd	r24, Y+15	; 0x0f
    1b72:	28 2f       	mov	r18, r24
    1b74:	30 e0       	ldi	r19, 0x00	; 0
    1b76:	87 e0       	ldi	r24, 0x07	; 7
    1b78:	90 e0       	ldi	r25, 0x00	; 0
    1b7a:	ac 01       	movw	r20, r24
    1b7c:	42 1b       	sub	r20, r18
    1b7e:	53 0b       	sbc	r21, r19
    1b80:	9a 01       	movw	r18, r20
    1b82:	c9 01       	movw	r24, r18
    1b84:	88 0f       	add	r24, r24
    1b86:	99 1f       	adc	r25, r25
    1b88:	82 0f       	add	r24, r18
    1b8a:	93 1f       	adc	r25, r19
    1b8c:	fc 01       	movw	r30, r24
    1b8e:	e8 59       	subi	r30, 0x98	; 152
    1b90:	ff 4f       	sbci	r31, 0xFF	; 255
    1b92:	60 81       	ld	r22, Z
    1b94:	71 81       	ldd	r23, Z+1	; 0x01
    1b96:	82 81       	ldd	r24, Z+2	; 0x02
    1b98:	0e 94 5f 0b 	call	0x16be	; 0x16be <LED_voidOn>
    1b9c:	80 e0       	ldi	r24, 0x00	; 0
    1b9e:	90 e0       	ldi	r25, 0x00	; 0
    1ba0:	aa e7       	ldi	r26, 0x7A	; 122
    1ba2:	b3 e4       	ldi	r27, 0x43	; 67
    1ba4:	8b 87       	std	Y+11, r24	; 0x0b
    1ba6:	9c 87       	std	Y+12, r25	; 0x0c
    1ba8:	ad 87       	std	Y+13, r26	; 0x0d
    1baa:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bac:	6b 85       	ldd	r22, Y+11	; 0x0b
    1bae:	7c 85       	ldd	r23, Y+12	; 0x0c
    1bb0:	8d 85       	ldd	r24, Y+13	; 0x0d
    1bb2:	9e 85       	ldd	r25, Y+14	; 0x0e
    1bb4:	20 e0       	ldi	r18, 0x00	; 0
    1bb6:	30 e0       	ldi	r19, 0x00	; 0
    1bb8:	4a ef       	ldi	r20, 0xFA	; 250
    1bba:	54 e4       	ldi	r21, 0x44	; 68
    1bbc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1bc0:	dc 01       	movw	r26, r24
    1bc2:	cb 01       	movw	r24, r22
    1bc4:	8f 83       	std	Y+7, r24	; 0x07
    1bc6:	98 87       	std	Y+8, r25	; 0x08
    1bc8:	a9 87       	std	Y+9, r26	; 0x09
    1bca:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1bcc:	6f 81       	ldd	r22, Y+7	; 0x07
    1bce:	78 85       	ldd	r23, Y+8	; 0x08
    1bd0:	89 85       	ldd	r24, Y+9	; 0x09
    1bd2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bd4:	20 e0       	ldi	r18, 0x00	; 0
    1bd6:	30 e0       	ldi	r19, 0x00	; 0
    1bd8:	40 e8       	ldi	r20, 0x80	; 128
    1bda:	5f e3       	ldi	r21, 0x3F	; 63
    1bdc:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1be0:	88 23       	and	r24, r24
    1be2:	2c f4       	brge	.+10     	; 0x1bee <shiftingRightEvery250ms+0x96>
		__ticks = 1;
    1be4:	81 e0       	ldi	r24, 0x01	; 1
    1be6:	90 e0       	ldi	r25, 0x00	; 0
    1be8:	9e 83       	std	Y+6, r25	; 0x06
    1bea:	8d 83       	std	Y+5, r24	; 0x05
    1bec:	3f c0       	rjmp	.+126    	; 0x1c6c <shiftingRightEvery250ms+0x114>
	else if (__tmp > 65535)
    1bee:	6f 81       	ldd	r22, Y+7	; 0x07
    1bf0:	78 85       	ldd	r23, Y+8	; 0x08
    1bf2:	89 85       	ldd	r24, Y+9	; 0x09
    1bf4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bf6:	20 e0       	ldi	r18, 0x00	; 0
    1bf8:	3f ef       	ldi	r19, 0xFF	; 255
    1bfa:	4f e7       	ldi	r20, 0x7F	; 127
    1bfc:	57 e4       	ldi	r21, 0x47	; 71
    1bfe:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1c02:	18 16       	cp	r1, r24
    1c04:	4c f5       	brge	.+82     	; 0x1c58 <shiftingRightEvery250ms+0x100>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c06:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c08:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c0a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c0c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c0e:	20 e0       	ldi	r18, 0x00	; 0
    1c10:	30 e0       	ldi	r19, 0x00	; 0
    1c12:	40 e2       	ldi	r20, 0x20	; 32
    1c14:	51 e4       	ldi	r21, 0x41	; 65
    1c16:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1c1a:	dc 01       	movw	r26, r24
    1c1c:	cb 01       	movw	r24, r22
    1c1e:	bc 01       	movw	r22, r24
    1c20:	cd 01       	movw	r24, r26
    1c22:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1c26:	dc 01       	movw	r26, r24
    1c28:	cb 01       	movw	r24, r22
    1c2a:	9e 83       	std	Y+6, r25	; 0x06
    1c2c:	8d 83       	std	Y+5, r24	; 0x05
    1c2e:	0f c0       	rjmp	.+30     	; 0x1c4e <shiftingRightEvery250ms+0xf6>
    1c30:	88 ec       	ldi	r24, 0xC8	; 200
    1c32:	90 e0       	ldi	r25, 0x00	; 0
    1c34:	9c 83       	std	Y+4, r25	; 0x04
    1c36:	8b 83       	std	Y+3, r24	; 0x03
    1c38:	8b 81       	ldd	r24, Y+3	; 0x03
    1c3a:	9c 81       	ldd	r25, Y+4	; 0x04
    1c3c:	01 97       	sbiw	r24, 0x01	; 1
    1c3e:	f1 f7       	brne	.-4      	; 0x1c3c <shiftingRightEvery250ms+0xe4>
    1c40:	9c 83       	std	Y+4, r25	; 0x04
    1c42:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c44:	8d 81       	ldd	r24, Y+5	; 0x05
    1c46:	9e 81       	ldd	r25, Y+6	; 0x06
    1c48:	01 97       	sbiw	r24, 0x01	; 1
    1c4a:	9e 83       	std	Y+6, r25	; 0x06
    1c4c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c4e:	8d 81       	ldd	r24, Y+5	; 0x05
    1c50:	9e 81       	ldd	r25, Y+6	; 0x06
    1c52:	00 97       	sbiw	r24, 0x00	; 0
    1c54:	69 f7       	brne	.-38     	; 0x1c30 <shiftingRightEvery250ms+0xd8>
    1c56:	14 c0       	rjmp	.+40     	; 0x1c80 <shiftingRightEvery250ms+0x128>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c58:	6f 81       	ldd	r22, Y+7	; 0x07
    1c5a:	78 85       	ldd	r23, Y+8	; 0x08
    1c5c:	89 85       	ldd	r24, Y+9	; 0x09
    1c5e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c60:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1c64:	dc 01       	movw	r26, r24
    1c66:	cb 01       	movw	r24, r22
    1c68:	9e 83       	std	Y+6, r25	; 0x06
    1c6a:	8d 83       	std	Y+5, r24	; 0x05
    1c6c:	8d 81       	ldd	r24, Y+5	; 0x05
    1c6e:	9e 81       	ldd	r25, Y+6	; 0x06
    1c70:	9a 83       	std	Y+2, r25	; 0x02
    1c72:	89 83       	std	Y+1, r24	; 0x01
    1c74:	89 81       	ldd	r24, Y+1	; 0x01
    1c76:	9a 81       	ldd	r25, Y+2	; 0x02
    1c78:	01 97       	sbiw	r24, 0x01	; 1
    1c7a:	f1 f7       	brne	.-4      	; 0x1c78 <shiftingRightEvery250ms+0x120>
    1c7c:	9a 83       	std	Y+2, r25	; 0x02
    1c7e:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(250);
		LED_voidOff     (Leds[7 - i]);
    1c80:	8f 85       	ldd	r24, Y+15	; 0x0f
    1c82:	28 2f       	mov	r18, r24
    1c84:	30 e0       	ldi	r19, 0x00	; 0
    1c86:	87 e0       	ldi	r24, 0x07	; 7
    1c88:	90 e0       	ldi	r25, 0x00	; 0
    1c8a:	ac 01       	movw	r20, r24
    1c8c:	42 1b       	sub	r20, r18
    1c8e:	53 0b       	sbc	r21, r19
    1c90:	9a 01       	movw	r18, r20
    1c92:	c9 01       	movw	r24, r18
    1c94:	88 0f       	add	r24, r24
    1c96:	99 1f       	adc	r25, r25
    1c98:	82 0f       	add	r24, r18
    1c9a:	93 1f       	adc	r25, r19
    1c9c:	fc 01       	movw	r30, r24
    1c9e:	e8 59       	subi	r30, 0x98	; 152
    1ca0:	ff 4f       	sbci	r31, 0xFF	; 255
    1ca2:	60 81       	ld	r22, Z
    1ca4:	71 81       	ldd	r23, Z+1	; 0x01
    1ca6:	82 81       	ldd	r24, Z+2	; 0x02
    1ca8:	0e 94 81 0b 	call	0x1702	; 0x1702 <LED_voidOff>
	}
}

void shiftingRightEvery250ms          (void) {

	LOOP(NUM_OF_LEDS)
    1cac:	8f 85       	ldd	r24, Y+15	; 0x0f
    1cae:	8f 5f       	subi	r24, 0xFF	; 255
    1cb0:	8f 87       	std	Y+15, r24	; 0x0f
    1cb2:	8f 85       	ldd	r24, Y+15	; 0x0f
    1cb4:	88 30       	cpi	r24, 0x08	; 8
    1cb6:	08 f4       	brcc	.+2      	; 0x1cba <shiftingRightEvery250ms+0x162>
    1cb8:	5b cf       	rjmp	.-330    	; 0x1b70 <shiftingRightEvery250ms+0x18>
	{
		LED_voidOn     (Leds[7 - i]);
		_delay_ms(250);
		LED_voidOff     (Leds[7 - i]);
	}
}
    1cba:	2f 96       	adiw	r28, 0x0f	; 15
    1cbc:	0f b6       	in	r0, 0x3f	; 63
    1cbe:	f8 94       	cli
    1cc0:	de bf       	out	0x3e, r29	; 62
    1cc2:	0f be       	out	0x3f, r0	; 63
    1cc4:	cd bf       	out	0x3d, r28	; 61
    1cc6:	cf 91       	pop	r28
    1cc8:	df 91       	pop	r29
    1cca:	08 95       	ret

00001ccc <twoLedsConvergeEvery250ms>:

void twoLedsConvergeEvery250ms        (void) {
    1ccc:	df 93       	push	r29
    1cce:	cf 93       	push	r28
    1cd0:	cd b7       	in	r28, 0x3d	; 61
    1cd2:	de b7       	in	r29, 0x3e	; 62
    1cd4:	2f 97       	sbiw	r28, 0x0f	; 15
    1cd6:	0f b6       	in	r0, 0x3f	; 63
    1cd8:	f8 94       	cli
    1cda:	de bf       	out	0x3e, r29	; 62
    1cdc:	0f be       	out	0x3f, r0	; 63
    1cde:	cd bf       	out	0x3d, r28	; 61

	LOOP(NUM_OF_LEDS / 2)
    1ce0:	1f 86       	std	Y+15, r1	; 0x0f
    1ce2:	c1 c0       	rjmp	.+386    	; 0x1e66 <twoLedsConvergeEvery250ms+0x19a>
	{
		LED_voidOn     (Leds[i]);
    1ce4:	8f 85       	ldd	r24, Y+15	; 0x0f
    1ce6:	28 2f       	mov	r18, r24
    1ce8:	30 e0       	ldi	r19, 0x00	; 0
    1cea:	c9 01       	movw	r24, r18
    1cec:	88 0f       	add	r24, r24
    1cee:	99 1f       	adc	r25, r25
    1cf0:	82 0f       	add	r24, r18
    1cf2:	93 1f       	adc	r25, r19
    1cf4:	fc 01       	movw	r30, r24
    1cf6:	e8 59       	subi	r30, 0x98	; 152
    1cf8:	ff 4f       	sbci	r31, 0xFF	; 255
    1cfa:	60 81       	ld	r22, Z
    1cfc:	71 81       	ldd	r23, Z+1	; 0x01
    1cfe:	82 81       	ldd	r24, Z+2	; 0x02
    1d00:	0e 94 5f 0b 	call	0x16be	; 0x16be <LED_voidOn>
		LED_voidOn     (Leds[7 - i]);
    1d04:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d06:	28 2f       	mov	r18, r24
    1d08:	30 e0       	ldi	r19, 0x00	; 0
    1d0a:	87 e0       	ldi	r24, 0x07	; 7
    1d0c:	90 e0       	ldi	r25, 0x00	; 0
    1d0e:	ac 01       	movw	r20, r24
    1d10:	42 1b       	sub	r20, r18
    1d12:	53 0b       	sbc	r21, r19
    1d14:	9a 01       	movw	r18, r20
    1d16:	c9 01       	movw	r24, r18
    1d18:	88 0f       	add	r24, r24
    1d1a:	99 1f       	adc	r25, r25
    1d1c:	82 0f       	add	r24, r18
    1d1e:	93 1f       	adc	r25, r19
    1d20:	fc 01       	movw	r30, r24
    1d22:	e8 59       	subi	r30, 0x98	; 152
    1d24:	ff 4f       	sbci	r31, 0xFF	; 255
    1d26:	60 81       	ld	r22, Z
    1d28:	71 81       	ldd	r23, Z+1	; 0x01
    1d2a:	82 81       	ldd	r24, Z+2	; 0x02
    1d2c:	0e 94 5f 0b 	call	0x16be	; 0x16be <LED_voidOn>
    1d30:	80 e0       	ldi	r24, 0x00	; 0
    1d32:	90 e0       	ldi	r25, 0x00	; 0
    1d34:	aa e7       	ldi	r26, 0x7A	; 122
    1d36:	b3 e4       	ldi	r27, 0x43	; 67
    1d38:	8b 87       	std	Y+11, r24	; 0x0b
    1d3a:	9c 87       	std	Y+12, r25	; 0x0c
    1d3c:	ad 87       	std	Y+13, r26	; 0x0d
    1d3e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d40:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d42:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d44:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d46:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d48:	20 e0       	ldi	r18, 0x00	; 0
    1d4a:	30 e0       	ldi	r19, 0x00	; 0
    1d4c:	4a ef       	ldi	r20, 0xFA	; 250
    1d4e:	54 e4       	ldi	r21, 0x44	; 68
    1d50:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1d54:	dc 01       	movw	r26, r24
    1d56:	cb 01       	movw	r24, r22
    1d58:	8f 83       	std	Y+7, r24	; 0x07
    1d5a:	98 87       	std	Y+8, r25	; 0x08
    1d5c:	a9 87       	std	Y+9, r26	; 0x09
    1d5e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1d60:	6f 81       	ldd	r22, Y+7	; 0x07
    1d62:	78 85       	ldd	r23, Y+8	; 0x08
    1d64:	89 85       	ldd	r24, Y+9	; 0x09
    1d66:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d68:	20 e0       	ldi	r18, 0x00	; 0
    1d6a:	30 e0       	ldi	r19, 0x00	; 0
    1d6c:	40 e8       	ldi	r20, 0x80	; 128
    1d6e:	5f e3       	ldi	r21, 0x3F	; 63
    1d70:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1d74:	88 23       	and	r24, r24
    1d76:	2c f4       	brge	.+10     	; 0x1d82 <twoLedsConvergeEvery250ms+0xb6>
		__ticks = 1;
    1d78:	81 e0       	ldi	r24, 0x01	; 1
    1d7a:	90 e0       	ldi	r25, 0x00	; 0
    1d7c:	9e 83       	std	Y+6, r25	; 0x06
    1d7e:	8d 83       	std	Y+5, r24	; 0x05
    1d80:	3f c0       	rjmp	.+126    	; 0x1e00 <twoLedsConvergeEvery250ms+0x134>
	else if (__tmp > 65535)
    1d82:	6f 81       	ldd	r22, Y+7	; 0x07
    1d84:	78 85       	ldd	r23, Y+8	; 0x08
    1d86:	89 85       	ldd	r24, Y+9	; 0x09
    1d88:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d8a:	20 e0       	ldi	r18, 0x00	; 0
    1d8c:	3f ef       	ldi	r19, 0xFF	; 255
    1d8e:	4f e7       	ldi	r20, 0x7F	; 127
    1d90:	57 e4       	ldi	r21, 0x47	; 71
    1d92:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1d96:	18 16       	cp	r1, r24
    1d98:	4c f5       	brge	.+82     	; 0x1dec <twoLedsConvergeEvery250ms+0x120>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d9a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d9c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d9e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1da0:	9e 85       	ldd	r25, Y+14	; 0x0e
    1da2:	20 e0       	ldi	r18, 0x00	; 0
    1da4:	30 e0       	ldi	r19, 0x00	; 0
    1da6:	40 e2       	ldi	r20, 0x20	; 32
    1da8:	51 e4       	ldi	r21, 0x41	; 65
    1daa:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1dae:	dc 01       	movw	r26, r24
    1db0:	cb 01       	movw	r24, r22
    1db2:	bc 01       	movw	r22, r24
    1db4:	cd 01       	movw	r24, r26
    1db6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1dba:	dc 01       	movw	r26, r24
    1dbc:	cb 01       	movw	r24, r22
    1dbe:	9e 83       	std	Y+6, r25	; 0x06
    1dc0:	8d 83       	std	Y+5, r24	; 0x05
    1dc2:	0f c0       	rjmp	.+30     	; 0x1de2 <twoLedsConvergeEvery250ms+0x116>
    1dc4:	88 ec       	ldi	r24, 0xC8	; 200
    1dc6:	90 e0       	ldi	r25, 0x00	; 0
    1dc8:	9c 83       	std	Y+4, r25	; 0x04
    1dca:	8b 83       	std	Y+3, r24	; 0x03
    1dcc:	8b 81       	ldd	r24, Y+3	; 0x03
    1dce:	9c 81       	ldd	r25, Y+4	; 0x04
    1dd0:	01 97       	sbiw	r24, 0x01	; 1
    1dd2:	f1 f7       	brne	.-4      	; 0x1dd0 <twoLedsConvergeEvery250ms+0x104>
    1dd4:	9c 83       	std	Y+4, r25	; 0x04
    1dd6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1dd8:	8d 81       	ldd	r24, Y+5	; 0x05
    1dda:	9e 81       	ldd	r25, Y+6	; 0x06
    1ddc:	01 97       	sbiw	r24, 0x01	; 1
    1dde:	9e 83       	std	Y+6, r25	; 0x06
    1de0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1de2:	8d 81       	ldd	r24, Y+5	; 0x05
    1de4:	9e 81       	ldd	r25, Y+6	; 0x06
    1de6:	00 97       	sbiw	r24, 0x00	; 0
    1de8:	69 f7       	brne	.-38     	; 0x1dc4 <twoLedsConvergeEvery250ms+0xf8>
    1dea:	14 c0       	rjmp	.+40     	; 0x1e14 <twoLedsConvergeEvery250ms+0x148>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1dec:	6f 81       	ldd	r22, Y+7	; 0x07
    1dee:	78 85       	ldd	r23, Y+8	; 0x08
    1df0:	89 85       	ldd	r24, Y+9	; 0x09
    1df2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1df4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1df8:	dc 01       	movw	r26, r24
    1dfa:	cb 01       	movw	r24, r22
    1dfc:	9e 83       	std	Y+6, r25	; 0x06
    1dfe:	8d 83       	std	Y+5, r24	; 0x05
    1e00:	8d 81       	ldd	r24, Y+5	; 0x05
    1e02:	9e 81       	ldd	r25, Y+6	; 0x06
    1e04:	9a 83       	std	Y+2, r25	; 0x02
    1e06:	89 83       	std	Y+1, r24	; 0x01
    1e08:	89 81       	ldd	r24, Y+1	; 0x01
    1e0a:	9a 81       	ldd	r25, Y+2	; 0x02
    1e0c:	01 97       	sbiw	r24, 0x01	; 1
    1e0e:	f1 f7       	brne	.-4      	; 0x1e0c <twoLedsConvergeEvery250ms+0x140>
    1e10:	9a 83       	std	Y+2, r25	; 0x02
    1e12:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(250);
		LED_voidOff     (Leds[i]);
    1e14:	8f 85       	ldd	r24, Y+15	; 0x0f
    1e16:	28 2f       	mov	r18, r24
    1e18:	30 e0       	ldi	r19, 0x00	; 0
    1e1a:	c9 01       	movw	r24, r18
    1e1c:	88 0f       	add	r24, r24
    1e1e:	99 1f       	adc	r25, r25
    1e20:	82 0f       	add	r24, r18
    1e22:	93 1f       	adc	r25, r19
    1e24:	fc 01       	movw	r30, r24
    1e26:	e8 59       	subi	r30, 0x98	; 152
    1e28:	ff 4f       	sbci	r31, 0xFF	; 255
    1e2a:	60 81       	ld	r22, Z
    1e2c:	71 81       	ldd	r23, Z+1	; 0x01
    1e2e:	82 81       	ldd	r24, Z+2	; 0x02
    1e30:	0e 94 81 0b 	call	0x1702	; 0x1702 <LED_voidOff>
		LED_voidOff     (Leds[7 - i]);
    1e34:	8f 85       	ldd	r24, Y+15	; 0x0f
    1e36:	28 2f       	mov	r18, r24
    1e38:	30 e0       	ldi	r19, 0x00	; 0
    1e3a:	87 e0       	ldi	r24, 0x07	; 7
    1e3c:	90 e0       	ldi	r25, 0x00	; 0
    1e3e:	ac 01       	movw	r20, r24
    1e40:	42 1b       	sub	r20, r18
    1e42:	53 0b       	sbc	r21, r19
    1e44:	9a 01       	movw	r18, r20
    1e46:	c9 01       	movw	r24, r18
    1e48:	88 0f       	add	r24, r24
    1e4a:	99 1f       	adc	r25, r25
    1e4c:	82 0f       	add	r24, r18
    1e4e:	93 1f       	adc	r25, r19
    1e50:	fc 01       	movw	r30, r24
    1e52:	e8 59       	subi	r30, 0x98	; 152
    1e54:	ff 4f       	sbci	r31, 0xFF	; 255
    1e56:	60 81       	ld	r22, Z
    1e58:	71 81       	ldd	r23, Z+1	; 0x01
    1e5a:	82 81       	ldd	r24, Z+2	; 0x02
    1e5c:	0e 94 81 0b 	call	0x1702	; 0x1702 <LED_voidOff>
	}
}

void twoLedsConvergeEvery250ms        (void) {

	LOOP(NUM_OF_LEDS / 2)
    1e60:	8f 85       	ldd	r24, Y+15	; 0x0f
    1e62:	8f 5f       	subi	r24, 0xFF	; 255
    1e64:	8f 87       	std	Y+15, r24	; 0x0f
    1e66:	8f 85       	ldd	r24, Y+15	; 0x0f
    1e68:	84 30       	cpi	r24, 0x04	; 4
    1e6a:	08 f4       	brcc	.+2      	; 0x1e6e <twoLedsConvergeEvery250ms+0x1a2>
    1e6c:	3b cf       	rjmp	.-394    	; 0x1ce4 <twoLedsConvergeEvery250ms+0x18>
		_delay_ms(250);
		LED_voidOff     (Leds[i]);
		LED_voidOff     (Leds[7 - i]);
	}

}
    1e6e:	2f 96       	adiw	r28, 0x0f	; 15
    1e70:	0f b6       	in	r0, 0x3f	; 63
    1e72:	f8 94       	cli
    1e74:	de bf       	out	0x3e, r29	; 62
    1e76:	0f be       	out	0x3f, r0	; 63
    1e78:	cd bf       	out	0x3d, r28	; 61
    1e7a:	cf 91       	pop	r28
    1e7c:	df 91       	pop	r29
    1e7e:	08 95       	ret

00001e80 <twoLedsDivergeEvery250ms>:

void twoLedsDivergeEvery250ms         (void) {
    1e80:	df 93       	push	r29
    1e82:	cf 93       	push	r28
    1e84:	cd b7       	in	r28, 0x3d	; 61
    1e86:	de b7       	in	r29, 0x3e	; 62
    1e88:	2f 97       	sbiw	r28, 0x0f	; 15
    1e8a:	0f b6       	in	r0, 0x3f	; 63
    1e8c:	f8 94       	cli
    1e8e:	de bf       	out	0x3e, r29	; 62
    1e90:	0f be       	out	0x3f, r0	; 63
    1e92:	cd bf       	out	0x3d, r28	; 61

	LOOP(NUM_OF_LEDS / 2)
    1e94:	1f 86       	std	Y+15, r1	; 0x0f
    1e96:	c7 c0       	rjmp	.+398    	; 0x2026 <twoLedsDivergeEvery250ms+0x1a6>
	{
		LED_voidOn     (Leds[i + 4]);
    1e98:	8f 85       	ldd	r24, Y+15	; 0x0f
    1e9a:	88 2f       	mov	r24, r24
    1e9c:	90 e0       	ldi	r25, 0x00	; 0
    1e9e:	9c 01       	movw	r18, r24
    1ea0:	2c 5f       	subi	r18, 0xFC	; 252
    1ea2:	3f 4f       	sbci	r19, 0xFF	; 255
    1ea4:	c9 01       	movw	r24, r18
    1ea6:	88 0f       	add	r24, r24
    1ea8:	99 1f       	adc	r25, r25
    1eaa:	82 0f       	add	r24, r18
    1eac:	93 1f       	adc	r25, r19
    1eae:	fc 01       	movw	r30, r24
    1eb0:	e8 59       	subi	r30, 0x98	; 152
    1eb2:	ff 4f       	sbci	r31, 0xFF	; 255
    1eb4:	60 81       	ld	r22, Z
    1eb6:	71 81       	ldd	r23, Z+1	; 0x01
    1eb8:	82 81       	ldd	r24, Z+2	; 0x02
    1eba:	0e 94 5f 0b 	call	0x16be	; 0x16be <LED_voidOn>
		LED_voidOn     (Leds[3 - i]);
    1ebe:	8f 85       	ldd	r24, Y+15	; 0x0f
    1ec0:	28 2f       	mov	r18, r24
    1ec2:	30 e0       	ldi	r19, 0x00	; 0
    1ec4:	83 e0       	ldi	r24, 0x03	; 3
    1ec6:	90 e0       	ldi	r25, 0x00	; 0
    1ec8:	ac 01       	movw	r20, r24
    1eca:	42 1b       	sub	r20, r18
    1ecc:	53 0b       	sbc	r21, r19
    1ece:	9a 01       	movw	r18, r20
    1ed0:	c9 01       	movw	r24, r18
    1ed2:	88 0f       	add	r24, r24
    1ed4:	99 1f       	adc	r25, r25
    1ed6:	82 0f       	add	r24, r18
    1ed8:	93 1f       	adc	r25, r19
    1eda:	fc 01       	movw	r30, r24
    1edc:	e8 59       	subi	r30, 0x98	; 152
    1ede:	ff 4f       	sbci	r31, 0xFF	; 255
    1ee0:	60 81       	ld	r22, Z
    1ee2:	71 81       	ldd	r23, Z+1	; 0x01
    1ee4:	82 81       	ldd	r24, Z+2	; 0x02
    1ee6:	0e 94 5f 0b 	call	0x16be	; 0x16be <LED_voidOn>
    1eea:	80 e0       	ldi	r24, 0x00	; 0
    1eec:	90 e0       	ldi	r25, 0x00	; 0
    1eee:	aa e7       	ldi	r26, 0x7A	; 122
    1ef0:	b3 e4       	ldi	r27, 0x43	; 67
    1ef2:	8b 87       	std	Y+11, r24	; 0x0b
    1ef4:	9c 87       	std	Y+12, r25	; 0x0c
    1ef6:	ad 87       	std	Y+13, r26	; 0x0d
    1ef8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1efa:	6b 85       	ldd	r22, Y+11	; 0x0b
    1efc:	7c 85       	ldd	r23, Y+12	; 0x0c
    1efe:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f00:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f02:	20 e0       	ldi	r18, 0x00	; 0
    1f04:	30 e0       	ldi	r19, 0x00	; 0
    1f06:	4a ef       	ldi	r20, 0xFA	; 250
    1f08:	54 e4       	ldi	r21, 0x44	; 68
    1f0a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1f0e:	dc 01       	movw	r26, r24
    1f10:	cb 01       	movw	r24, r22
    1f12:	8f 83       	std	Y+7, r24	; 0x07
    1f14:	98 87       	std	Y+8, r25	; 0x08
    1f16:	a9 87       	std	Y+9, r26	; 0x09
    1f18:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1f1a:	6f 81       	ldd	r22, Y+7	; 0x07
    1f1c:	78 85       	ldd	r23, Y+8	; 0x08
    1f1e:	89 85       	ldd	r24, Y+9	; 0x09
    1f20:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f22:	20 e0       	ldi	r18, 0x00	; 0
    1f24:	30 e0       	ldi	r19, 0x00	; 0
    1f26:	40 e8       	ldi	r20, 0x80	; 128
    1f28:	5f e3       	ldi	r21, 0x3F	; 63
    1f2a:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1f2e:	88 23       	and	r24, r24
    1f30:	2c f4       	brge	.+10     	; 0x1f3c <twoLedsDivergeEvery250ms+0xbc>
		__ticks = 1;
    1f32:	81 e0       	ldi	r24, 0x01	; 1
    1f34:	90 e0       	ldi	r25, 0x00	; 0
    1f36:	9e 83       	std	Y+6, r25	; 0x06
    1f38:	8d 83       	std	Y+5, r24	; 0x05
    1f3a:	3f c0       	rjmp	.+126    	; 0x1fba <twoLedsDivergeEvery250ms+0x13a>
	else if (__tmp > 65535)
    1f3c:	6f 81       	ldd	r22, Y+7	; 0x07
    1f3e:	78 85       	ldd	r23, Y+8	; 0x08
    1f40:	89 85       	ldd	r24, Y+9	; 0x09
    1f42:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f44:	20 e0       	ldi	r18, 0x00	; 0
    1f46:	3f ef       	ldi	r19, 0xFF	; 255
    1f48:	4f e7       	ldi	r20, 0x7F	; 127
    1f4a:	57 e4       	ldi	r21, 0x47	; 71
    1f4c:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1f50:	18 16       	cp	r1, r24
    1f52:	4c f5       	brge	.+82     	; 0x1fa6 <twoLedsDivergeEvery250ms+0x126>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f54:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f56:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f58:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f5a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f5c:	20 e0       	ldi	r18, 0x00	; 0
    1f5e:	30 e0       	ldi	r19, 0x00	; 0
    1f60:	40 e2       	ldi	r20, 0x20	; 32
    1f62:	51 e4       	ldi	r21, 0x41	; 65
    1f64:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1f68:	dc 01       	movw	r26, r24
    1f6a:	cb 01       	movw	r24, r22
    1f6c:	bc 01       	movw	r22, r24
    1f6e:	cd 01       	movw	r24, r26
    1f70:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1f74:	dc 01       	movw	r26, r24
    1f76:	cb 01       	movw	r24, r22
    1f78:	9e 83       	std	Y+6, r25	; 0x06
    1f7a:	8d 83       	std	Y+5, r24	; 0x05
    1f7c:	0f c0       	rjmp	.+30     	; 0x1f9c <twoLedsDivergeEvery250ms+0x11c>
    1f7e:	88 ec       	ldi	r24, 0xC8	; 200
    1f80:	90 e0       	ldi	r25, 0x00	; 0
    1f82:	9c 83       	std	Y+4, r25	; 0x04
    1f84:	8b 83       	std	Y+3, r24	; 0x03
    1f86:	8b 81       	ldd	r24, Y+3	; 0x03
    1f88:	9c 81       	ldd	r25, Y+4	; 0x04
    1f8a:	01 97       	sbiw	r24, 0x01	; 1
    1f8c:	f1 f7       	brne	.-4      	; 0x1f8a <twoLedsDivergeEvery250ms+0x10a>
    1f8e:	9c 83       	std	Y+4, r25	; 0x04
    1f90:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f92:	8d 81       	ldd	r24, Y+5	; 0x05
    1f94:	9e 81       	ldd	r25, Y+6	; 0x06
    1f96:	01 97       	sbiw	r24, 0x01	; 1
    1f98:	9e 83       	std	Y+6, r25	; 0x06
    1f9a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f9c:	8d 81       	ldd	r24, Y+5	; 0x05
    1f9e:	9e 81       	ldd	r25, Y+6	; 0x06
    1fa0:	00 97       	sbiw	r24, 0x00	; 0
    1fa2:	69 f7       	brne	.-38     	; 0x1f7e <twoLedsDivergeEvery250ms+0xfe>
    1fa4:	14 c0       	rjmp	.+40     	; 0x1fce <twoLedsDivergeEvery250ms+0x14e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fa6:	6f 81       	ldd	r22, Y+7	; 0x07
    1fa8:	78 85       	ldd	r23, Y+8	; 0x08
    1faa:	89 85       	ldd	r24, Y+9	; 0x09
    1fac:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fae:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1fb2:	dc 01       	movw	r26, r24
    1fb4:	cb 01       	movw	r24, r22
    1fb6:	9e 83       	std	Y+6, r25	; 0x06
    1fb8:	8d 83       	std	Y+5, r24	; 0x05
    1fba:	8d 81       	ldd	r24, Y+5	; 0x05
    1fbc:	9e 81       	ldd	r25, Y+6	; 0x06
    1fbe:	9a 83       	std	Y+2, r25	; 0x02
    1fc0:	89 83       	std	Y+1, r24	; 0x01
    1fc2:	89 81       	ldd	r24, Y+1	; 0x01
    1fc4:	9a 81       	ldd	r25, Y+2	; 0x02
    1fc6:	01 97       	sbiw	r24, 0x01	; 1
    1fc8:	f1 f7       	brne	.-4      	; 0x1fc6 <twoLedsDivergeEvery250ms+0x146>
    1fca:	9a 83       	std	Y+2, r25	; 0x02
    1fcc:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(250);
		LED_voidOff     (Leds[i + 4]);
    1fce:	8f 85       	ldd	r24, Y+15	; 0x0f
    1fd0:	88 2f       	mov	r24, r24
    1fd2:	90 e0       	ldi	r25, 0x00	; 0
    1fd4:	9c 01       	movw	r18, r24
    1fd6:	2c 5f       	subi	r18, 0xFC	; 252
    1fd8:	3f 4f       	sbci	r19, 0xFF	; 255
    1fda:	c9 01       	movw	r24, r18
    1fdc:	88 0f       	add	r24, r24
    1fde:	99 1f       	adc	r25, r25
    1fe0:	82 0f       	add	r24, r18
    1fe2:	93 1f       	adc	r25, r19
    1fe4:	fc 01       	movw	r30, r24
    1fe6:	e8 59       	subi	r30, 0x98	; 152
    1fe8:	ff 4f       	sbci	r31, 0xFF	; 255
    1fea:	60 81       	ld	r22, Z
    1fec:	71 81       	ldd	r23, Z+1	; 0x01
    1fee:	82 81       	ldd	r24, Z+2	; 0x02
    1ff0:	0e 94 81 0b 	call	0x1702	; 0x1702 <LED_voidOff>
		LED_voidOff     (Leds[3 - i]);
    1ff4:	8f 85       	ldd	r24, Y+15	; 0x0f
    1ff6:	28 2f       	mov	r18, r24
    1ff8:	30 e0       	ldi	r19, 0x00	; 0
    1ffa:	83 e0       	ldi	r24, 0x03	; 3
    1ffc:	90 e0       	ldi	r25, 0x00	; 0
    1ffe:	ac 01       	movw	r20, r24
    2000:	42 1b       	sub	r20, r18
    2002:	53 0b       	sbc	r21, r19
    2004:	9a 01       	movw	r18, r20
    2006:	c9 01       	movw	r24, r18
    2008:	88 0f       	add	r24, r24
    200a:	99 1f       	adc	r25, r25
    200c:	82 0f       	add	r24, r18
    200e:	93 1f       	adc	r25, r19
    2010:	fc 01       	movw	r30, r24
    2012:	e8 59       	subi	r30, 0x98	; 152
    2014:	ff 4f       	sbci	r31, 0xFF	; 255
    2016:	60 81       	ld	r22, Z
    2018:	71 81       	ldd	r23, Z+1	; 0x01
    201a:	82 81       	ldd	r24, Z+2	; 0x02
    201c:	0e 94 81 0b 	call	0x1702	; 0x1702 <LED_voidOff>

}

void twoLedsDivergeEvery250ms         (void) {

	LOOP(NUM_OF_LEDS / 2)
    2020:	8f 85       	ldd	r24, Y+15	; 0x0f
    2022:	8f 5f       	subi	r24, 0xFF	; 255
    2024:	8f 87       	std	Y+15, r24	; 0x0f
    2026:	8f 85       	ldd	r24, Y+15	; 0x0f
    2028:	84 30       	cpi	r24, 0x04	; 4
    202a:	08 f4       	brcc	.+2      	; 0x202e <twoLedsDivergeEvery250ms+0x1ae>
    202c:	35 cf       	rjmp	.-406    	; 0x1e98 <twoLedsDivergeEvery250ms+0x18>
		LED_voidOn     (Leds[3 - i]);
		_delay_ms(250);
		LED_voidOff     (Leds[i + 4]);
		LED_voidOff     (Leds[3 - i]);
	}
}
    202e:	2f 96       	adiw	r28, 0x0f	; 15
    2030:	0f b6       	in	r0, 0x3f	; 63
    2032:	f8 94       	cli
    2034:	de bf       	out	0x3e, r29	; 62
    2036:	0f be       	out	0x3f, r0	; 63
    2038:	cd bf       	out	0x3d, r28	; 61
    203a:	cf 91       	pop	r28
    203c:	df 91       	pop	r29
    203e:	08 95       	ret

00002040 <pingPongEvery250ms>:

void pingPongEvery250ms               (void) {
    2040:	df 93       	push	r29
    2042:	cf 93       	push	r28
    2044:	cd b7       	in	r28, 0x3d	; 61
    2046:	de b7       	in	r29, 0x3e	; 62
    2048:	ac 97       	sbiw	r28, 0x2c	; 44
    204a:	0f b6       	in	r0, 0x3f	; 63
    204c:	f8 94       	cli
    204e:	de bf       	out	0x3e, r29	; 62
    2050:	0f be       	out	0x3f, r0	; 63
    2052:	cd bf       	out	0x3d, r28	; 61

	LOOP(NUM_OF_LEDS)
    2054:	1c a6       	std	Y+44, r1	; 0x2c
    2056:	95 c0       	rjmp	.+298    	; 0x2182 <pingPongEvery250ms+0x142>
	{
		LED_voidOn     (Leds[i]);
    2058:	8c a5       	ldd	r24, Y+44	; 0x2c
    205a:	28 2f       	mov	r18, r24
    205c:	30 e0       	ldi	r19, 0x00	; 0
    205e:	c9 01       	movw	r24, r18
    2060:	88 0f       	add	r24, r24
    2062:	99 1f       	adc	r25, r25
    2064:	82 0f       	add	r24, r18
    2066:	93 1f       	adc	r25, r19
    2068:	fc 01       	movw	r30, r24
    206a:	e8 59       	subi	r30, 0x98	; 152
    206c:	ff 4f       	sbci	r31, 0xFF	; 255
    206e:	60 81       	ld	r22, Z
    2070:	71 81       	ldd	r23, Z+1	; 0x01
    2072:	82 81       	ldd	r24, Z+2	; 0x02
    2074:	0e 94 5f 0b 	call	0x16be	; 0x16be <LED_voidOn>
    2078:	80 e0       	ldi	r24, 0x00	; 0
    207a:	90 e0       	ldi	r25, 0x00	; 0
    207c:	aa e7       	ldi	r26, 0x7A	; 122
    207e:	b3 e4       	ldi	r27, 0x43	; 67
    2080:	8f a3       	std	Y+39, r24	; 0x27
    2082:	98 a7       	std	Y+40, r25	; 0x28
    2084:	a9 a7       	std	Y+41, r26	; 0x29
    2086:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2088:	6f a1       	ldd	r22, Y+39	; 0x27
    208a:	78 a5       	ldd	r23, Y+40	; 0x28
    208c:	89 a5       	ldd	r24, Y+41	; 0x29
    208e:	9a a5       	ldd	r25, Y+42	; 0x2a
    2090:	20 e0       	ldi	r18, 0x00	; 0
    2092:	30 e0       	ldi	r19, 0x00	; 0
    2094:	4a ef       	ldi	r20, 0xFA	; 250
    2096:	54 e4       	ldi	r21, 0x44	; 68
    2098:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    209c:	dc 01       	movw	r26, r24
    209e:	cb 01       	movw	r24, r22
    20a0:	8b a3       	std	Y+35, r24	; 0x23
    20a2:	9c a3       	std	Y+36, r25	; 0x24
    20a4:	ad a3       	std	Y+37, r26	; 0x25
    20a6:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    20a8:	6b a1       	ldd	r22, Y+35	; 0x23
    20aa:	7c a1       	ldd	r23, Y+36	; 0x24
    20ac:	8d a1       	ldd	r24, Y+37	; 0x25
    20ae:	9e a1       	ldd	r25, Y+38	; 0x26
    20b0:	20 e0       	ldi	r18, 0x00	; 0
    20b2:	30 e0       	ldi	r19, 0x00	; 0
    20b4:	40 e8       	ldi	r20, 0x80	; 128
    20b6:	5f e3       	ldi	r21, 0x3F	; 63
    20b8:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    20bc:	88 23       	and	r24, r24
    20be:	2c f4       	brge	.+10     	; 0x20ca <pingPongEvery250ms+0x8a>
		__ticks = 1;
    20c0:	81 e0       	ldi	r24, 0x01	; 1
    20c2:	90 e0       	ldi	r25, 0x00	; 0
    20c4:	9a a3       	std	Y+34, r25	; 0x22
    20c6:	89 a3       	std	Y+33, r24	; 0x21
    20c8:	3f c0       	rjmp	.+126    	; 0x2148 <pingPongEvery250ms+0x108>
	else if (__tmp > 65535)
    20ca:	6b a1       	ldd	r22, Y+35	; 0x23
    20cc:	7c a1       	ldd	r23, Y+36	; 0x24
    20ce:	8d a1       	ldd	r24, Y+37	; 0x25
    20d0:	9e a1       	ldd	r25, Y+38	; 0x26
    20d2:	20 e0       	ldi	r18, 0x00	; 0
    20d4:	3f ef       	ldi	r19, 0xFF	; 255
    20d6:	4f e7       	ldi	r20, 0x7F	; 127
    20d8:	57 e4       	ldi	r21, 0x47	; 71
    20da:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    20de:	18 16       	cp	r1, r24
    20e0:	4c f5       	brge	.+82     	; 0x2134 <pingPongEvery250ms+0xf4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20e2:	6f a1       	ldd	r22, Y+39	; 0x27
    20e4:	78 a5       	ldd	r23, Y+40	; 0x28
    20e6:	89 a5       	ldd	r24, Y+41	; 0x29
    20e8:	9a a5       	ldd	r25, Y+42	; 0x2a
    20ea:	20 e0       	ldi	r18, 0x00	; 0
    20ec:	30 e0       	ldi	r19, 0x00	; 0
    20ee:	40 e2       	ldi	r20, 0x20	; 32
    20f0:	51 e4       	ldi	r21, 0x41	; 65
    20f2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    20f6:	dc 01       	movw	r26, r24
    20f8:	cb 01       	movw	r24, r22
    20fa:	bc 01       	movw	r22, r24
    20fc:	cd 01       	movw	r24, r26
    20fe:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2102:	dc 01       	movw	r26, r24
    2104:	cb 01       	movw	r24, r22
    2106:	9a a3       	std	Y+34, r25	; 0x22
    2108:	89 a3       	std	Y+33, r24	; 0x21
    210a:	0f c0       	rjmp	.+30     	; 0x212a <pingPongEvery250ms+0xea>
    210c:	88 ec       	ldi	r24, 0xC8	; 200
    210e:	90 e0       	ldi	r25, 0x00	; 0
    2110:	98 a3       	std	Y+32, r25	; 0x20
    2112:	8f 8f       	std	Y+31, r24	; 0x1f
    2114:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2116:	98 a1       	ldd	r25, Y+32	; 0x20
    2118:	01 97       	sbiw	r24, 0x01	; 1
    211a:	f1 f7       	brne	.-4      	; 0x2118 <pingPongEvery250ms+0xd8>
    211c:	98 a3       	std	Y+32, r25	; 0x20
    211e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2120:	89 a1       	ldd	r24, Y+33	; 0x21
    2122:	9a a1       	ldd	r25, Y+34	; 0x22
    2124:	01 97       	sbiw	r24, 0x01	; 1
    2126:	9a a3       	std	Y+34, r25	; 0x22
    2128:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    212a:	89 a1       	ldd	r24, Y+33	; 0x21
    212c:	9a a1       	ldd	r25, Y+34	; 0x22
    212e:	00 97       	sbiw	r24, 0x00	; 0
    2130:	69 f7       	brne	.-38     	; 0x210c <pingPongEvery250ms+0xcc>
    2132:	14 c0       	rjmp	.+40     	; 0x215c <pingPongEvery250ms+0x11c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2134:	6b a1       	ldd	r22, Y+35	; 0x23
    2136:	7c a1       	ldd	r23, Y+36	; 0x24
    2138:	8d a1       	ldd	r24, Y+37	; 0x25
    213a:	9e a1       	ldd	r25, Y+38	; 0x26
    213c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2140:	dc 01       	movw	r26, r24
    2142:	cb 01       	movw	r24, r22
    2144:	9a a3       	std	Y+34, r25	; 0x22
    2146:	89 a3       	std	Y+33, r24	; 0x21
    2148:	89 a1       	ldd	r24, Y+33	; 0x21
    214a:	9a a1       	ldd	r25, Y+34	; 0x22
    214c:	9e 8f       	std	Y+30, r25	; 0x1e
    214e:	8d 8f       	std	Y+29, r24	; 0x1d
    2150:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2152:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2154:	01 97       	sbiw	r24, 0x01	; 1
    2156:	f1 f7       	brne	.-4      	; 0x2154 <pingPongEvery250ms+0x114>
    2158:	9e 8f       	std	Y+30, r25	; 0x1e
    215a:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(250);
		LED_voidOff     (Leds[i]);
    215c:	8c a5       	ldd	r24, Y+44	; 0x2c
    215e:	28 2f       	mov	r18, r24
    2160:	30 e0       	ldi	r19, 0x00	; 0
    2162:	c9 01       	movw	r24, r18
    2164:	88 0f       	add	r24, r24
    2166:	99 1f       	adc	r25, r25
    2168:	82 0f       	add	r24, r18
    216a:	93 1f       	adc	r25, r19
    216c:	fc 01       	movw	r30, r24
    216e:	e8 59       	subi	r30, 0x98	; 152
    2170:	ff 4f       	sbci	r31, 0xFF	; 255
    2172:	60 81       	ld	r22, Z
    2174:	71 81       	ldd	r23, Z+1	; 0x01
    2176:	82 81       	ldd	r24, Z+2	; 0x02
    2178:	0e 94 81 0b 	call	0x1702	; 0x1702 <LED_voidOff>
	}
}

void pingPongEvery250ms               (void) {

	LOOP(NUM_OF_LEDS)
    217c:	8c a5       	ldd	r24, Y+44	; 0x2c
    217e:	8f 5f       	subi	r24, 0xFF	; 255
    2180:	8c a7       	std	Y+44, r24	; 0x2c
    2182:	8c a5       	ldd	r24, Y+44	; 0x2c
    2184:	88 30       	cpi	r24, 0x08	; 8
    2186:	08 f4       	brcc	.+2      	; 0x218a <pingPongEvery250ms+0x14a>
    2188:	67 cf       	rjmp	.-306    	; 0x2058 <pingPongEvery250ms+0x18>
		LED_voidOn     (Leds[i]);
		_delay_ms(250);
		LED_voidOff     (Leds[i]);
	}

	LOOP(NUM_OF_LEDS)
    218a:	1b a6       	std	Y+43, r1	; 0x2b
    218c:	a1 c0       	rjmp	.+322    	; 0x22d0 <pingPongEvery250ms+0x290>
	{
		LED_voidOn     (Leds[7 - i]);
    218e:	8b a5       	ldd	r24, Y+43	; 0x2b
    2190:	28 2f       	mov	r18, r24
    2192:	30 e0       	ldi	r19, 0x00	; 0
    2194:	87 e0       	ldi	r24, 0x07	; 7
    2196:	90 e0       	ldi	r25, 0x00	; 0
    2198:	ac 01       	movw	r20, r24
    219a:	42 1b       	sub	r20, r18
    219c:	53 0b       	sbc	r21, r19
    219e:	9a 01       	movw	r18, r20
    21a0:	c9 01       	movw	r24, r18
    21a2:	88 0f       	add	r24, r24
    21a4:	99 1f       	adc	r25, r25
    21a6:	82 0f       	add	r24, r18
    21a8:	93 1f       	adc	r25, r19
    21aa:	fc 01       	movw	r30, r24
    21ac:	e8 59       	subi	r30, 0x98	; 152
    21ae:	ff 4f       	sbci	r31, 0xFF	; 255
    21b0:	60 81       	ld	r22, Z
    21b2:	71 81       	ldd	r23, Z+1	; 0x01
    21b4:	82 81       	ldd	r24, Z+2	; 0x02
    21b6:	0e 94 5f 0b 	call	0x16be	; 0x16be <LED_voidOn>
    21ba:	80 e0       	ldi	r24, 0x00	; 0
    21bc:	90 e0       	ldi	r25, 0x00	; 0
    21be:	aa e7       	ldi	r26, 0x7A	; 122
    21c0:	b3 e4       	ldi	r27, 0x43	; 67
    21c2:	89 8f       	std	Y+25, r24	; 0x19
    21c4:	9a 8f       	std	Y+26, r25	; 0x1a
    21c6:	ab 8f       	std	Y+27, r26	; 0x1b
    21c8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21ca:	69 8d       	ldd	r22, Y+25	; 0x19
    21cc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    21ce:	8b 8d       	ldd	r24, Y+27	; 0x1b
    21d0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    21d2:	20 e0       	ldi	r18, 0x00	; 0
    21d4:	30 e0       	ldi	r19, 0x00	; 0
    21d6:	4a ef       	ldi	r20, 0xFA	; 250
    21d8:	54 e4       	ldi	r21, 0x44	; 68
    21da:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    21de:	dc 01       	movw	r26, r24
    21e0:	cb 01       	movw	r24, r22
    21e2:	8d 8b       	std	Y+21, r24	; 0x15
    21e4:	9e 8b       	std	Y+22, r25	; 0x16
    21e6:	af 8b       	std	Y+23, r26	; 0x17
    21e8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    21ea:	6d 89       	ldd	r22, Y+21	; 0x15
    21ec:	7e 89       	ldd	r23, Y+22	; 0x16
    21ee:	8f 89       	ldd	r24, Y+23	; 0x17
    21f0:	98 8d       	ldd	r25, Y+24	; 0x18
    21f2:	20 e0       	ldi	r18, 0x00	; 0
    21f4:	30 e0       	ldi	r19, 0x00	; 0
    21f6:	40 e8       	ldi	r20, 0x80	; 128
    21f8:	5f e3       	ldi	r21, 0x3F	; 63
    21fa:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    21fe:	88 23       	and	r24, r24
    2200:	2c f4       	brge	.+10     	; 0x220c <pingPongEvery250ms+0x1cc>
		__ticks = 1;
    2202:	81 e0       	ldi	r24, 0x01	; 1
    2204:	90 e0       	ldi	r25, 0x00	; 0
    2206:	9c 8b       	std	Y+20, r25	; 0x14
    2208:	8b 8b       	std	Y+19, r24	; 0x13
    220a:	3f c0       	rjmp	.+126    	; 0x228a <pingPongEvery250ms+0x24a>
	else if (__tmp > 65535)
    220c:	6d 89       	ldd	r22, Y+21	; 0x15
    220e:	7e 89       	ldd	r23, Y+22	; 0x16
    2210:	8f 89       	ldd	r24, Y+23	; 0x17
    2212:	98 8d       	ldd	r25, Y+24	; 0x18
    2214:	20 e0       	ldi	r18, 0x00	; 0
    2216:	3f ef       	ldi	r19, 0xFF	; 255
    2218:	4f e7       	ldi	r20, 0x7F	; 127
    221a:	57 e4       	ldi	r21, 0x47	; 71
    221c:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2220:	18 16       	cp	r1, r24
    2222:	4c f5       	brge	.+82     	; 0x2276 <pingPongEvery250ms+0x236>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2224:	69 8d       	ldd	r22, Y+25	; 0x19
    2226:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2228:	8b 8d       	ldd	r24, Y+27	; 0x1b
    222a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    222c:	20 e0       	ldi	r18, 0x00	; 0
    222e:	30 e0       	ldi	r19, 0x00	; 0
    2230:	40 e2       	ldi	r20, 0x20	; 32
    2232:	51 e4       	ldi	r21, 0x41	; 65
    2234:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2238:	dc 01       	movw	r26, r24
    223a:	cb 01       	movw	r24, r22
    223c:	bc 01       	movw	r22, r24
    223e:	cd 01       	movw	r24, r26
    2240:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2244:	dc 01       	movw	r26, r24
    2246:	cb 01       	movw	r24, r22
    2248:	9c 8b       	std	Y+20, r25	; 0x14
    224a:	8b 8b       	std	Y+19, r24	; 0x13
    224c:	0f c0       	rjmp	.+30     	; 0x226c <pingPongEvery250ms+0x22c>
    224e:	88 ec       	ldi	r24, 0xC8	; 200
    2250:	90 e0       	ldi	r25, 0x00	; 0
    2252:	9a 8b       	std	Y+18, r25	; 0x12
    2254:	89 8b       	std	Y+17, r24	; 0x11
    2256:	89 89       	ldd	r24, Y+17	; 0x11
    2258:	9a 89       	ldd	r25, Y+18	; 0x12
    225a:	01 97       	sbiw	r24, 0x01	; 1
    225c:	f1 f7       	brne	.-4      	; 0x225a <pingPongEvery250ms+0x21a>
    225e:	9a 8b       	std	Y+18, r25	; 0x12
    2260:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2262:	8b 89       	ldd	r24, Y+19	; 0x13
    2264:	9c 89       	ldd	r25, Y+20	; 0x14
    2266:	01 97       	sbiw	r24, 0x01	; 1
    2268:	9c 8b       	std	Y+20, r25	; 0x14
    226a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    226c:	8b 89       	ldd	r24, Y+19	; 0x13
    226e:	9c 89       	ldd	r25, Y+20	; 0x14
    2270:	00 97       	sbiw	r24, 0x00	; 0
    2272:	69 f7       	brne	.-38     	; 0x224e <pingPongEvery250ms+0x20e>
    2274:	14 c0       	rjmp	.+40     	; 0x229e <pingPongEvery250ms+0x25e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2276:	6d 89       	ldd	r22, Y+21	; 0x15
    2278:	7e 89       	ldd	r23, Y+22	; 0x16
    227a:	8f 89       	ldd	r24, Y+23	; 0x17
    227c:	98 8d       	ldd	r25, Y+24	; 0x18
    227e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2282:	dc 01       	movw	r26, r24
    2284:	cb 01       	movw	r24, r22
    2286:	9c 8b       	std	Y+20, r25	; 0x14
    2288:	8b 8b       	std	Y+19, r24	; 0x13
    228a:	8b 89       	ldd	r24, Y+19	; 0x13
    228c:	9c 89       	ldd	r25, Y+20	; 0x14
    228e:	98 8b       	std	Y+16, r25	; 0x10
    2290:	8f 87       	std	Y+15, r24	; 0x0f
    2292:	8f 85       	ldd	r24, Y+15	; 0x0f
    2294:	98 89       	ldd	r25, Y+16	; 0x10
    2296:	01 97       	sbiw	r24, 0x01	; 1
    2298:	f1 f7       	brne	.-4      	; 0x2296 <pingPongEvery250ms+0x256>
    229a:	98 8b       	std	Y+16, r25	; 0x10
    229c:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(250);
		LED_voidOff     (Leds[7 - i]);
    229e:	8b a5       	ldd	r24, Y+43	; 0x2b
    22a0:	28 2f       	mov	r18, r24
    22a2:	30 e0       	ldi	r19, 0x00	; 0
    22a4:	87 e0       	ldi	r24, 0x07	; 7
    22a6:	90 e0       	ldi	r25, 0x00	; 0
    22a8:	ac 01       	movw	r20, r24
    22aa:	42 1b       	sub	r20, r18
    22ac:	53 0b       	sbc	r21, r19
    22ae:	9a 01       	movw	r18, r20
    22b0:	c9 01       	movw	r24, r18
    22b2:	88 0f       	add	r24, r24
    22b4:	99 1f       	adc	r25, r25
    22b6:	82 0f       	add	r24, r18
    22b8:	93 1f       	adc	r25, r19
    22ba:	fc 01       	movw	r30, r24
    22bc:	e8 59       	subi	r30, 0x98	; 152
    22be:	ff 4f       	sbci	r31, 0xFF	; 255
    22c0:	60 81       	ld	r22, Z
    22c2:	71 81       	ldd	r23, Z+1	; 0x01
    22c4:	82 81       	ldd	r24, Z+2	; 0x02
    22c6:	0e 94 81 0b 	call	0x1702	; 0x1702 <LED_voidOff>
		LED_voidOn     (Leds[i]);
		_delay_ms(250);
		LED_voidOff     (Leds[i]);
	}

	LOOP(NUM_OF_LEDS)
    22ca:	8b a5       	ldd	r24, Y+43	; 0x2b
    22cc:	8f 5f       	subi	r24, 0xFF	; 255
    22ce:	8b a7       	std	Y+43, r24	; 0x2b
    22d0:	8b a5       	ldd	r24, Y+43	; 0x2b
    22d2:	88 30       	cpi	r24, 0x08	; 8
    22d4:	08 f4       	brcc	.+2      	; 0x22d8 <pingPongEvery250ms+0x298>
    22d6:	5b cf       	rjmp	.-330    	; 0x218e <pingPongEvery250ms+0x14e>
    22d8:	80 e0       	ldi	r24, 0x00	; 0
    22da:	90 e0       	ldi	r25, 0x00	; 0
    22dc:	aa e7       	ldi	r26, 0x7A	; 122
    22de:	b3 e4       	ldi	r27, 0x43	; 67
    22e0:	8b 87       	std	Y+11, r24	; 0x0b
    22e2:	9c 87       	std	Y+12, r25	; 0x0c
    22e4:	ad 87       	std	Y+13, r26	; 0x0d
    22e6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22e8:	6b 85       	ldd	r22, Y+11	; 0x0b
    22ea:	7c 85       	ldd	r23, Y+12	; 0x0c
    22ec:	8d 85       	ldd	r24, Y+13	; 0x0d
    22ee:	9e 85       	ldd	r25, Y+14	; 0x0e
    22f0:	20 e0       	ldi	r18, 0x00	; 0
    22f2:	30 e0       	ldi	r19, 0x00	; 0
    22f4:	4a ef       	ldi	r20, 0xFA	; 250
    22f6:	54 e4       	ldi	r21, 0x44	; 68
    22f8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    22fc:	dc 01       	movw	r26, r24
    22fe:	cb 01       	movw	r24, r22
    2300:	8f 83       	std	Y+7, r24	; 0x07
    2302:	98 87       	std	Y+8, r25	; 0x08
    2304:	a9 87       	std	Y+9, r26	; 0x09
    2306:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2308:	6f 81       	ldd	r22, Y+7	; 0x07
    230a:	78 85       	ldd	r23, Y+8	; 0x08
    230c:	89 85       	ldd	r24, Y+9	; 0x09
    230e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2310:	20 e0       	ldi	r18, 0x00	; 0
    2312:	30 e0       	ldi	r19, 0x00	; 0
    2314:	40 e8       	ldi	r20, 0x80	; 128
    2316:	5f e3       	ldi	r21, 0x3F	; 63
    2318:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    231c:	88 23       	and	r24, r24
    231e:	2c f4       	brge	.+10     	; 0x232a <pingPongEvery250ms+0x2ea>
		__ticks = 1;
    2320:	81 e0       	ldi	r24, 0x01	; 1
    2322:	90 e0       	ldi	r25, 0x00	; 0
    2324:	9e 83       	std	Y+6, r25	; 0x06
    2326:	8d 83       	std	Y+5, r24	; 0x05
    2328:	3f c0       	rjmp	.+126    	; 0x23a8 <pingPongEvery250ms+0x368>
	else if (__tmp > 65535)
    232a:	6f 81       	ldd	r22, Y+7	; 0x07
    232c:	78 85       	ldd	r23, Y+8	; 0x08
    232e:	89 85       	ldd	r24, Y+9	; 0x09
    2330:	9a 85       	ldd	r25, Y+10	; 0x0a
    2332:	20 e0       	ldi	r18, 0x00	; 0
    2334:	3f ef       	ldi	r19, 0xFF	; 255
    2336:	4f e7       	ldi	r20, 0x7F	; 127
    2338:	57 e4       	ldi	r21, 0x47	; 71
    233a:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    233e:	18 16       	cp	r1, r24
    2340:	4c f5       	brge	.+82     	; 0x2394 <pingPongEvery250ms+0x354>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2342:	6b 85       	ldd	r22, Y+11	; 0x0b
    2344:	7c 85       	ldd	r23, Y+12	; 0x0c
    2346:	8d 85       	ldd	r24, Y+13	; 0x0d
    2348:	9e 85       	ldd	r25, Y+14	; 0x0e
    234a:	20 e0       	ldi	r18, 0x00	; 0
    234c:	30 e0       	ldi	r19, 0x00	; 0
    234e:	40 e2       	ldi	r20, 0x20	; 32
    2350:	51 e4       	ldi	r21, 0x41	; 65
    2352:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2356:	dc 01       	movw	r26, r24
    2358:	cb 01       	movw	r24, r22
    235a:	bc 01       	movw	r22, r24
    235c:	cd 01       	movw	r24, r26
    235e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2362:	dc 01       	movw	r26, r24
    2364:	cb 01       	movw	r24, r22
    2366:	9e 83       	std	Y+6, r25	; 0x06
    2368:	8d 83       	std	Y+5, r24	; 0x05
    236a:	0f c0       	rjmp	.+30     	; 0x238a <pingPongEvery250ms+0x34a>
    236c:	88 ec       	ldi	r24, 0xC8	; 200
    236e:	90 e0       	ldi	r25, 0x00	; 0
    2370:	9c 83       	std	Y+4, r25	; 0x04
    2372:	8b 83       	std	Y+3, r24	; 0x03
    2374:	8b 81       	ldd	r24, Y+3	; 0x03
    2376:	9c 81       	ldd	r25, Y+4	; 0x04
    2378:	01 97       	sbiw	r24, 0x01	; 1
    237a:	f1 f7       	brne	.-4      	; 0x2378 <pingPongEvery250ms+0x338>
    237c:	9c 83       	std	Y+4, r25	; 0x04
    237e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2380:	8d 81       	ldd	r24, Y+5	; 0x05
    2382:	9e 81       	ldd	r25, Y+6	; 0x06
    2384:	01 97       	sbiw	r24, 0x01	; 1
    2386:	9e 83       	std	Y+6, r25	; 0x06
    2388:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    238a:	8d 81       	ldd	r24, Y+5	; 0x05
    238c:	9e 81       	ldd	r25, Y+6	; 0x06
    238e:	00 97       	sbiw	r24, 0x00	; 0
    2390:	69 f7       	brne	.-38     	; 0x236c <pingPongEvery250ms+0x32c>
    2392:	14 c0       	rjmp	.+40     	; 0x23bc <pingPongEvery250ms+0x37c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2394:	6f 81       	ldd	r22, Y+7	; 0x07
    2396:	78 85       	ldd	r23, Y+8	; 0x08
    2398:	89 85       	ldd	r24, Y+9	; 0x09
    239a:	9a 85       	ldd	r25, Y+10	; 0x0a
    239c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    23a0:	dc 01       	movw	r26, r24
    23a2:	cb 01       	movw	r24, r22
    23a4:	9e 83       	std	Y+6, r25	; 0x06
    23a6:	8d 83       	std	Y+5, r24	; 0x05
    23a8:	8d 81       	ldd	r24, Y+5	; 0x05
    23aa:	9e 81       	ldd	r25, Y+6	; 0x06
    23ac:	9a 83       	std	Y+2, r25	; 0x02
    23ae:	89 83       	std	Y+1, r24	; 0x01
    23b0:	89 81       	ldd	r24, Y+1	; 0x01
    23b2:	9a 81       	ldd	r25, Y+2	; 0x02
    23b4:	01 97       	sbiw	r24, 0x01	; 1
    23b6:	f1 f7       	brne	.-4      	; 0x23b4 <pingPongEvery250ms+0x374>
    23b8:	9a 83       	std	Y+2, r25	; 0x02
    23ba:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(250);
		LED_voidOff     (Leds[7 - i]);
	}

	_delay_ms(250);
}
    23bc:	ac 96       	adiw	r28, 0x2c	; 44
    23be:	0f b6       	in	r0, 0x3f	; 63
    23c0:	f8 94       	cli
    23c2:	de bf       	out	0x3e, r29	; 62
    23c4:	0f be       	out	0x3f, r0	; 63
    23c6:	cd bf       	out	0x3d, r28	; 61
    23c8:	cf 91       	pop	r28
    23ca:	df 91       	pop	r29
    23cc:	08 95       	ret

000023ce <incrementingEvery250>:

void incrementingEvery250             (void) {
    23ce:	df 93       	push	r29
    23d0:	cf 93       	push	r28
    23d2:	cd b7       	in	r28, 0x3d	; 61
    23d4:	de b7       	in	r29, 0x3e	; 62
    23d6:	6e 97       	sbiw	r28, 0x1e	; 30
    23d8:	0f b6       	in	r0, 0x3f	; 63
    23da:	f8 94       	cli
    23dc:	de bf       	out	0x3e, r29	; 62
    23de:	0f be       	out	0x3f, r0	; 63
    23e0:	cd bf       	out	0x3d, r28	; 61

	LOOP(NUM_OF_LEDS)
    23e2:	1e 8e       	std	Y+30, r1	; 0x1e
    23e4:	85 c0       	rjmp	.+266    	; 0x24f0 <incrementingEvery250+0x122>
	{
		LED_voidOn     (Leds[i]);
    23e6:	8e 8d       	ldd	r24, Y+30	; 0x1e
    23e8:	28 2f       	mov	r18, r24
    23ea:	30 e0       	ldi	r19, 0x00	; 0
    23ec:	c9 01       	movw	r24, r18
    23ee:	88 0f       	add	r24, r24
    23f0:	99 1f       	adc	r25, r25
    23f2:	82 0f       	add	r24, r18
    23f4:	93 1f       	adc	r25, r19
    23f6:	fc 01       	movw	r30, r24
    23f8:	e8 59       	subi	r30, 0x98	; 152
    23fa:	ff 4f       	sbci	r31, 0xFF	; 255
    23fc:	60 81       	ld	r22, Z
    23fe:	71 81       	ldd	r23, Z+1	; 0x01
    2400:	82 81       	ldd	r24, Z+2	; 0x02
    2402:	0e 94 5f 0b 	call	0x16be	; 0x16be <LED_voidOn>
    2406:	80 e0       	ldi	r24, 0x00	; 0
    2408:	90 e0       	ldi	r25, 0x00	; 0
    240a:	aa e7       	ldi	r26, 0x7A	; 122
    240c:	b3 e4       	ldi	r27, 0x43	; 67
    240e:	89 8f       	std	Y+25, r24	; 0x19
    2410:	9a 8f       	std	Y+26, r25	; 0x1a
    2412:	ab 8f       	std	Y+27, r26	; 0x1b
    2414:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2416:	69 8d       	ldd	r22, Y+25	; 0x19
    2418:	7a 8d       	ldd	r23, Y+26	; 0x1a
    241a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    241c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    241e:	20 e0       	ldi	r18, 0x00	; 0
    2420:	30 e0       	ldi	r19, 0x00	; 0
    2422:	4a ef       	ldi	r20, 0xFA	; 250
    2424:	54 e4       	ldi	r21, 0x44	; 68
    2426:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    242a:	dc 01       	movw	r26, r24
    242c:	cb 01       	movw	r24, r22
    242e:	8d 8b       	std	Y+21, r24	; 0x15
    2430:	9e 8b       	std	Y+22, r25	; 0x16
    2432:	af 8b       	std	Y+23, r26	; 0x17
    2434:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2436:	6d 89       	ldd	r22, Y+21	; 0x15
    2438:	7e 89       	ldd	r23, Y+22	; 0x16
    243a:	8f 89       	ldd	r24, Y+23	; 0x17
    243c:	98 8d       	ldd	r25, Y+24	; 0x18
    243e:	20 e0       	ldi	r18, 0x00	; 0
    2440:	30 e0       	ldi	r19, 0x00	; 0
    2442:	40 e8       	ldi	r20, 0x80	; 128
    2444:	5f e3       	ldi	r21, 0x3F	; 63
    2446:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    244a:	88 23       	and	r24, r24
    244c:	2c f4       	brge	.+10     	; 0x2458 <incrementingEvery250+0x8a>
		__ticks = 1;
    244e:	81 e0       	ldi	r24, 0x01	; 1
    2450:	90 e0       	ldi	r25, 0x00	; 0
    2452:	9c 8b       	std	Y+20, r25	; 0x14
    2454:	8b 8b       	std	Y+19, r24	; 0x13
    2456:	3f c0       	rjmp	.+126    	; 0x24d6 <incrementingEvery250+0x108>
	else if (__tmp > 65535)
    2458:	6d 89       	ldd	r22, Y+21	; 0x15
    245a:	7e 89       	ldd	r23, Y+22	; 0x16
    245c:	8f 89       	ldd	r24, Y+23	; 0x17
    245e:	98 8d       	ldd	r25, Y+24	; 0x18
    2460:	20 e0       	ldi	r18, 0x00	; 0
    2462:	3f ef       	ldi	r19, 0xFF	; 255
    2464:	4f e7       	ldi	r20, 0x7F	; 127
    2466:	57 e4       	ldi	r21, 0x47	; 71
    2468:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    246c:	18 16       	cp	r1, r24
    246e:	4c f5       	brge	.+82     	; 0x24c2 <incrementingEvery250+0xf4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2470:	69 8d       	ldd	r22, Y+25	; 0x19
    2472:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2474:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2476:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2478:	20 e0       	ldi	r18, 0x00	; 0
    247a:	30 e0       	ldi	r19, 0x00	; 0
    247c:	40 e2       	ldi	r20, 0x20	; 32
    247e:	51 e4       	ldi	r21, 0x41	; 65
    2480:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2484:	dc 01       	movw	r26, r24
    2486:	cb 01       	movw	r24, r22
    2488:	bc 01       	movw	r22, r24
    248a:	cd 01       	movw	r24, r26
    248c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2490:	dc 01       	movw	r26, r24
    2492:	cb 01       	movw	r24, r22
    2494:	9c 8b       	std	Y+20, r25	; 0x14
    2496:	8b 8b       	std	Y+19, r24	; 0x13
    2498:	0f c0       	rjmp	.+30     	; 0x24b8 <incrementingEvery250+0xea>
    249a:	88 ec       	ldi	r24, 0xC8	; 200
    249c:	90 e0       	ldi	r25, 0x00	; 0
    249e:	9a 8b       	std	Y+18, r25	; 0x12
    24a0:	89 8b       	std	Y+17, r24	; 0x11
    24a2:	89 89       	ldd	r24, Y+17	; 0x11
    24a4:	9a 89       	ldd	r25, Y+18	; 0x12
    24a6:	01 97       	sbiw	r24, 0x01	; 1
    24a8:	f1 f7       	brne	.-4      	; 0x24a6 <incrementingEvery250+0xd8>
    24aa:	9a 8b       	std	Y+18, r25	; 0x12
    24ac:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24ae:	8b 89       	ldd	r24, Y+19	; 0x13
    24b0:	9c 89       	ldd	r25, Y+20	; 0x14
    24b2:	01 97       	sbiw	r24, 0x01	; 1
    24b4:	9c 8b       	std	Y+20, r25	; 0x14
    24b6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24b8:	8b 89       	ldd	r24, Y+19	; 0x13
    24ba:	9c 89       	ldd	r25, Y+20	; 0x14
    24bc:	00 97       	sbiw	r24, 0x00	; 0
    24be:	69 f7       	brne	.-38     	; 0x249a <incrementingEvery250+0xcc>
    24c0:	14 c0       	rjmp	.+40     	; 0x24ea <incrementingEvery250+0x11c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24c2:	6d 89       	ldd	r22, Y+21	; 0x15
    24c4:	7e 89       	ldd	r23, Y+22	; 0x16
    24c6:	8f 89       	ldd	r24, Y+23	; 0x17
    24c8:	98 8d       	ldd	r25, Y+24	; 0x18
    24ca:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    24ce:	dc 01       	movw	r26, r24
    24d0:	cb 01       	movw	r24, r22
    24d2:	9c 8b       	std	Y+20, r25	; 0x14
    24d4:	8b 8b       	std	Y+19, r24	; 0x13
    24d6:	8b 89       	ldd	r24, Y+19	; 0x13
    24d8:	9c 89       	ldd	r25, Y+20	; 0x14
    24da:	98 8b       	std	Y+16, r25	; 0x10
    24dc:	8f 87       	std	Y+15, r24	; 0x0f
    24de:	8f 85       	ldd	r24, Y+15	; 0x0f
    24e0:	98 89       	ldd	r25, Y+16	; 0x10
    24e2:	01 97       	sbiw	r24, 0x01	; 1
    24e4:	f1 f7       	brne	.-4      	; 0x24e2 <incrementingEvery250+0x114>
    24e6:	98 8b       	std	Y+16, r25	; 0x10
    24e8:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(250);
}

void incrementingEvery250             (void) {

	LOOP(NUM_OF_LEDS)
    24ea:	8e 8d       	ldd	r24, Y+30	; 0x1e
    24ec:	8f 5f       	subi	r24, 0xFF	; 255
    24ee:	8e 8f       	std	Y+30, r24	; 0x1e
    24f0:	8e 8d       	ldd	r24, Y+30	; 0x1e
    24f2:	88 30       	cpi	r24, 0x08	; 8
    24f4:	08 f4       	brcc	.+2      	; 0x24f8 <incrementingEvery250+0x12a>
    24f6:	77 cf       	rjmp	.-274    	; 0x23e6 <incrementingEvery250+0x18>
	{
		LED_voidOn     (Leds[i]);
		_delay_ms(250);
	}

	LOOP(NUM_OF_LEDS)
    24f8:	1d 8e       	std	Y+29, r1	; 0x1d
    24fa:	13 c0       	rjmp	.+38     	; 0x2522 <incrementingEvery250+0x154>
	{
		LED_voidOff     (Leds[i]);
    24fc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    24fe:	28 2f       	mov	r18, r24
    2500:	30 e0       	ldi	r19, 0x00	; 0
    2502:	c9 01       	movw	r24, r18
    2504:	88 0f       	add	r24, r24
    2506:	99 1f       	adc	r25, r25
    2508:	82 0f       	add	r24, r18
    250a:	93 1f       	adc	r25, r19
    250c:	fc 01       	movw	r30, r24
    250e:	e8 59       	subi	r30, 0x98	; 152
    2510:	ff 4f       	sbci	r31, 0xFF	; 255
    2512:	60 81       	ld	r22, Z
    2514:	71 81       	ldd	r23, Z+1	; 0x01
    2516:	82 81       	ldd	r24, Z+2	; 0x02
    2518:	0e 94 81 0b 	call	0x1702	; 0x1702 <LED_voidOff>
	{
		LED_voidOn     (Leds[i]);
		_delay_ms(250);
	}

	LOOP(NUM_OF_LEDS)
    251c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    251e:	8f 5f       	subi	r24, 0xFF	; 255
    2520:	8d 8f       	std	Y+29, r24	; 0x1d
    2522:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2524:	88 30       	cpi	r24, 0x08	; 8
    2526:	50 f3       	brcs	.-44     	; 0x24fc <incrementingEvery250+0x12e>
    2528:	80 e0       	ldi	r24, 0x00	; 0
    252a:	90 e0       	ldi	r25, 0x00	; 0
    252c:	aa e7       	ldi	r26, 0x7A	; 122
    252e:	b3 e4       	ldi	r27, 0x43	; 67
    2530:	8b 87       	std	Y+11, r24	; 0x0b
    2532:	9c 87       	std	Y+12, r25	; 0x0c
    2534:	ad 87       	std	Y+13, r26	; 0x0d
    2536:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2538:	6b 85       	ldd	r22, Y+11	; 0x0b
    253a:	7c 85       	ldd	r23, Y+12	; 0x0c
    253c:	8d 85       	ldd	r24, Y+13	; 0x0d
    253e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2540:	20 e0       	ldi	r18, 0x00	; 0
    2542:	30 e0       	ldi	r19, 0x00	; 0
    2544:	4a ef       	ldi	r20, 0xFA	; 250
    2546:	54 e4       	ldi	r21, 0x44	; 68
    2548:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    254c:	dc 01       	movw	r26, r24
    254e:	cb 01       	movw	r24, r22
    2550:	8f 83       	std	Y+7, r24	; 0x07
    2552:	98 87       	std	Y+8, r25	; 0x08
    2554:	a9 87       	std	Y+9, r26	; 0x09
    2556:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2558:	6f 81       	ldd	r22, Y+7	; 0x07
    255a:	78 85       	ldd	r23, Y+8	; 0x08
    255c:	89 85       	ldd	r24, Y+9	; 0x09
    255e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2560:	20 e0       	ldi	r18, 0x00	; 0
    2562:	30 e0       	ldi	r19, 0x00	; 0
    2564:	40 e8       	ldi	r20, 0x80	; 128
    2566:	5f e3       	ldi	r21, 0x3F	; 63
    2568:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    256c:	88 23       	and	r24, r24
    256e:	2c f4       	brge	.+10     	; 0x257a <incrementingEvery250+0x1ac>
		__ticks = 1;
    2570:	81 e0       	ldi	r24, 0x01	; 1
    2572:	90 e0       	ldi	r25, 0x00	; 0
    2574:	9e 83       	std	Y+6, r25	; 0x06
    2576:	8d 83       	std	Y+5, r24	; 0x05
    2578:	3f c0       	rjmp	.+126    	; 0x25f8 <incrementingEvery250+0x22a>
	else if (__tmp > 65535)
    257a:	6f 81       	ldd	r22, Y+7	; 0x07
    257c:	78 85       	ldd	r23, Y+8	; 0x08
    257e:	89 85       	ldd	r24, Y+9	; 0x09
    2580:	9a 85       	ldd	r25, Y+10	; 0x0a
    2582:	20 e0       	ldi	r18, 0x00	; 0
    2584:	3f ef       	ldi	r19, 0xFF	; 255
    2586:	4f e7       	ldi	r20, 0x7F	; 127
    2588:	57 e4       	ldi	r21, 0x47	; 71
    258a:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    258e:	18 16       	cp	r1, r24
    2590:	4c f5       	brge	.+82     	; 0x25e4 <incrementingEvery250+0x216>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2592:	6b 85       	ldd	r22, Y+11	; 0x0b
    2594:	7c 85       	ldd	r23, Y+12	; 0x0c
    2596:	8d 85       	ldd	r24, Y+13	; 0x0d
    2598:	9e 85       	ldd	r25, Y+14	; 0x0e
    259a:	20 e0       	ldi	r18, 0x00	; 0
    259c:	30 e0       	ldi	r19, 0x00	; 0
    259e:	40 e2       	ldi	r20, 0x20	; 32
    25a0:	51 e4       	ldi	r21, 0x41	; 65
    25a2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    25a6:	dc 01       	movw	r26, r24
    25a8:	cb 01       	movw	r24, r22
    25aa:	bc 01       	movw	r22, r24
    25ac:	cd 01       	movw	r24, r26
    25ae:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    25b2:	dc 01       	movw	r26, r24
    25b4:	cb 01       	movw	r24, r22
    25b6:	9e 83       	std	Y+6, r25	; 0x06
    25b8:	8d 83       	std	Y+5, r24	; 0x05
    25ba:	0f c0       	rjmp	.+30     	; 0x25da <incrementingEvery250+0x20c>
    25bc:	88 ec       	ldi	r24, 0xC8	; 200
    25be:	90 e0       	ldi	r25, 0x00	; 0
    25c0:	9c 83       	std	Y+4, r25	; 0x04
    25c2:	8b 83       	std	Y+3, r24	; 0x03
    25c4:	8b 81       	ldd	r24, Y+3	; 0x03
    25c6:	9c 81       	ldd	r25, Y+4	; 0x04
    25c8:	01 97       	sbiw	r24, 0x01	; 1
    25ca:	f1 f7       	brne	.-4      	; 0x25c8 <incrementingEvery250+0x1fa>
    25cc:	9c 83       	std	Y+4, r25	; 0x04
    25ce:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25d0:	8d 81       	ldd	r24, Y+5	; 0x05
    25d2:	9e 81       	ldd	r25, Y+6	; 0x06
    25d4:	01 97       	sbiw	r24, 0x01	; 1
    25d6:	9e 83       	std	Y+6, r25	; 0x06
    25d8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25da:	8d 81       	ldd	r24, Y+5	; 0x05
    25dc:	9e 81       	ldd	r25, Y+6	; 0x06
    25de:	00 97       	sbiw	r24, 0x00	; 0
    25e0:	69 f7       	brne	.-38     	; 0x25bc <incrementingEvery250+0x1ee>
    25e2:	14 c0       	rjmp	.+40     	; 0x260c <incrementingEvery250+0x23e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25e4:	6f 81       	ldd	r22, Y+7	; 0x07
    25e6:	78 85       	ldd	r23, Y+8	; 0x08
    25e8:	89 85       	ldd	r24, Y+9	; 0x09
    25ea:	9a 85       	ldd	r25, Y+10	; 0x0a
    25ec:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    25f0:	dc 01       	movw	r26, r24
    25f2:	cb 01       	movw	r24, r22
    25f4:	9e 83       	std	Y+6, r25	; 0x06
    25f6:	8d 83       	std	Y+5, r24	; 0x05
    25f8:	8d 81       	ldd	r24, Y+5	; 0x05
    25fa:	9e 81       	ldd	r25, Y+6	; 0x06
    25fc:	9a 83       	std	Y+2, r25	; 0x02
    25fe:	89 83       	std	Y+1, r24	; 0x01
    2600:	89 81       	ldd	r24, Y+1	; 0x01
    2602:	9a 81       	ldd	r25, Y+2	; 0x02
    2604:	01 97       	sbiw	r24, 0x01	; 1
    2606:	f1 f7       	brne	.-4      	; 0x2604 <incrementingEvery250+0x236>
    2608:	9a 83       	std	Y+2, r25	; 0x02
    260a:	89 83       	std	Y+1, r24	; 0x01
	{
		LED_voidOff     (Leds[i]);
	}

	_delay_ms(250);
}
    260c:	6e 96       	adiw	r28, 0x1e	; 30
    260e:	0f b6       	in	r0, 0x3f	; 63
    2610:	f8 94       	cli
    2612:	de bf       	out	0x3e, r29	; 62
    2614:	0f be       	out	0x3f, r0	; 63
    2616:	cd bf       	out	0x3d, r28	; 61
    2618:	cf 91       	pop	r28
    261a:	df 91       	pop	r29
    261c:	08 95       	ret

0000261e <twoLedsConvergeDivergeEvery250ms>:

void twoLedsConvergeDivergeEvery250ms (void) {
    261e:	df 93       	push	r29
    2620:	cf 93       	push	r28
    2622:	cd b7       	in	r28, 0x3d	; 61
    2624:	de b7       	in	r29, 0x3e	; 62
    2626:	ac 97       	sbiw	r28, 0x2c	; 44
    2628:	0f b6       	in	r0, 0x3f	; 63
    262a:	f8 94       	cli
    262c:	de bf       	out	0x3e, r29	; 62
    262e:	0f be       	out	0x3f, r0	; 63
    2630:	cd bf       	out	0x3d, r28	; 61

	LOOP(NUM_OF_LEDS / 2)
    2632:	1c a6       	std	Y+44, r1	; 0x2c
    2634:	c1 c0       	rjmp	.+386    	; 0x27b8 <twoLedsConvergeDivergeEvery250ms+0x19a>
	{
		LED_voidOn     (Leds[i]);
    2636:	8c a5       	ldd	r24, Y+44	; 0x2c
    2638:	28 2f       	mov	r18, r24
    263a:	30 e0       	ldi	r19, 0x00	; 0
    263c:	c9 01       	movw	r24, r18
    263e:	88 0f       	add	r24, r24
    2640:	99 1f       	adc	r25, r25
    2642:	82 0f       	add	r24, r18
    2644:	93 1f       	adc	r25, r19
    2646:	fc 01       	movw	r30, r24
    2648:	e8 59       	subi	r30, 0x98	; 152
    264a:	ff 4f       	sbci	r31, 0xFF	; 255
    264c:	60 81       	ld	r22, Z
    264e:	71 81       	ldd	r23, Z+1	; 0x01
    2650:	82 81       	ldd	r24, Z+2	; 0x02
    2652:	0e 94 5f 0b 	call	0x16be	; 0x16be <LED_voidOn>
		LED_voidOn     (Leds[7 - i]);
    2656:	8c a5       	ldd	r24, Y+44	; 0x2c
    2658:	28 2f       	mov	r18, r24
    265a:	30 e0       	ldi	r19, 0x00	; 0
    265c:	87 e0       	ldi	r24, 0x07	; 7
    265e:	90 e0       	ldi	r25, 0x00	; 0
    2660:	ac 01       	movw	r20, r24
    2662:	42 1b       	sub	r20, r18
    2664:	53 0b       	sbc	r21, r19
    2666:	9a 01       	movw	r18, r20
    2668:	c9 01       	movw	r24, r18
    266a:	88 0f       	add	r24, r24
    266c:	99 1f       	adc	r25, r25
    266e:	82 0f       	add	r24, r18
    2670:	93 1f       	adc	r25, r19
    2672:	fc 01       	movw	r30, r24
    2674:	e8 59       	subi	r30, 0x98	; 152
    2676:	ff 4f       	sbci	r31, 0xFF	; 255
    2678:	60 81       	ld	r22, Z
    267a:	71 81       	ldd	r23, Z+1	; 0x01
    267c:	82 81       	ldd	r24, Z+2	; 0x02
    267e:	0e 94 5f 0b 	call	0x16be	; 0x16be <LED_voidOn>
    2682:	80 e0       	ldi	r24, 0x00	; 0
    2684:	90 e0       	ldi	r25, 0x00	; 0
    2686:	aa e7       	ldi	r26, 0x7A	; 122
    2688:	b3 e4       	ldi	r27, 0x43	; 67
    268a:	8f a3       	std	Y+39, r24	; 0x27
    268c:	98 a7       	std	Y+40, r25	; 0x28
    268e:	a9 a7       	std	Y+41, r26	; 0x29
    2690:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2692:	6f a1       	ldd	r22, Y+39	; 0x27
    2694:	78 a5       	ldd	r23, Y+40	; 0x28
    2696:	89 a5       	ldd	r24, Y+41	; 0x29
    2698:	9a a5       	ldd	r25, Y+42	; 0x2a
    269a:	20 e0       	ldi	r18, 0x00	; 0
    269c:	30 e0       	ldi	r19, 0x00	; 0
    269e:	4a ef       	ldi	r20, 0xFA	; 250
    26a0:	54 e4       	ldi	r21, 0x44	; 68
    26a2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    26a6:	dc 01       	movw	r26, r24
    26a8:	cb 01       	movw	r24, r22
    26aa:	8b a3       	std	Y+35, r24	; 0x23
    26ac:	9c a3       	std	Y+36, r25	; 0x24
    26ae:	ad a3       	std	Y+37, r26	; 0x25
    26b0:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    26b2:	6b a1       	ldd	r22, Y+35	; 0x23
    26b4:	7c a1       	ldd	r23, Y+36	; 0x24
    26b6:	8d a1       	ldd	r24, Y+37	; 0x25
    26b8:	9e a1       	ldd	r25, Y+38	; 0x26
    26ba:	20 e0       	ldi	r18, 0x00	; 0
    26bc:	30 e0       	ldi	r19, 0x00	; 0
    26be:	40 e8       	ldi	r20, 0x80	; 128
    26c0:	5f e3       	ldi	r21, 0x3F	; 63
    26c2:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    26c6:	88 23       	and	r24, r24
    26c8:	2c f4       	brge	.+10     	; 0x26d4 <twoLedsConvergeDivergeEvery250ms+0xb6>
		__ticks = 1;
    26ca:	81 e0       	ldi	r24, 0x01	; 1
    26cc:	90 e0       	ldi	r25, 0x00	; 0
    26ce:	9a a3       	std	Y+34, r25	; 0x22
    26d0:	89 a3       	std	Y+33, r24	; 0x21
    26d2:	3f c0       	rjmp	.+126    	; 0x2752 <twoLedsConvergeDivergeEvery250ms+0x134>
	else if (__tmp > 65535)
    26d4:	6b a1       	ldd	r22, Y+35	; 0x23
    26d6:	7c a1       	ldd	r23, Y+36	; 0x24
    26d8:	8d a1       	ldd	r24, Y+37	; 0x25
    26da:	9e a1       	ldd	r25, Y+38	; 0x26
    26dc:	20 e0       	ldi	r18, 0x00	; 0
    26de:	3f ef       	ldi	r19, 0xFF	; 255
    26e0:	4f e7       	ldi	r20, 0x7F	; 127
    26e2:	57 e4       	ldi	r21, 0x47	; 71
    26e4:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    26e8:	18 16       	cp	r1, r24
    26ea:	4c f5       	brge	.+82     	; 0x273e <twoLedsConvergeDivergeEvery250ms+0x120>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26ec:	6f a1       	ldd	r22, Y+39	; 0x27
    26ee:	78 a5       	ldd	r23, Y+40	; 0x28
    26f0:	89 a5       	ldd	r24, Y+41	; 0x29
    26f2:	9a a5       	ldd	r25, Y+42	; 0x2a
    26f4:	20 e0       	ldi	r18, 0x00	; 0
    26f6:	30 e0       	ldi	r19, 0x00	; 0
    26f8:	40 e2       	ldi	r20, 0x20	; 32
    26fa:	51 e4       	ldi	r21, 0x41	; 65
    26fc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2700:	dc 01       	movw	r26, r24
    2702:	cb 01       	movw	r24, r22
    2704:	bc 01       	movw	r22, r24
    2706:	cd 01       	movw	r24, r26
    2708:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    270c:	dc 01       	movw	r26, r24
    270e:	cb 01       	movw	r24, r22
    2710:	9a a3       	std	Y+34, r25	; 0x22
    2712:	89 a3       	std	Y+33, r24	; 0x21
    2714:	0f c0       	rjmp	.+30     	; 0x2734 <twoLedsConvergeDivergeEvery250ms+0x116>
    2716:	88 ec       	ldi	r24, 0xC8	; 200
    2718:	90 e0       	ldi	r25, 0x00	; 0
    271a:	98 a3       	std	Y+32, r25	; 0x20
    271c:	8f 8f       	std	Y+31, r24	; 0x1f
    271e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2720:	98 a1       	ldd	r25, Y+32	; 0x20
    2722:	01 97       	sbiw	r24, 0x01	; 1
    2724:	f1 f7       	brne	.-4      	; 0x2722 <twoLedsConvergeDivergeEvery250ms+0x104>
    2726:	98 a3       	std	Y+32, r25	; 0x20
    2728:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    272a:	89 a1       	ldd	r24, Y+33	; 0x21
    272c:	9a a1       	ldd	r25, Y+34	; 0x22
    272e:	01 97       	sbiw	r24, 0x01	; 1
    2730:	9a a3       	std	Y+34, r25	; 0x22
    2732:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2734:	89 a1       	ldd	r24, Y+33	; 0x21
    2736:	9a a1       	ldd	r25, Y+34	; 0x22
    2738:	00 97       	sbiw	r24, 0x00	; 0
    273a:	69 f7       	brne	.-38     	; 0x2716 <twoLedsConvergeDivergeEvery250ms+0xf8>
    273c:	14 c0       	rjmp	.+40     	; 0x2766 <twoLedsConvergeDivergeEvery250ms+0x148>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    273e:	6b a1       	ldd	r22, Y+35	; 0x23
    2740:	7c a1       	ldd	r23, Y+36	; 0x24
    2742:	8d a1       	ldd	r24, Y+37	; 0x25
    2744:	9e a1       	ldd	r25, Y+38	; 0x26
    2746:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    274a:	dc 01       	movw	r26, r24
    274c:	cb 01       	movw	r24, r22
    274e:	9a a3       	std	Y+34, r25	; 0x22
    2750:	89 a3       	std	Y+33, r24	; 0x21
    2752:	89 a1       	ldd	r24, Y+33	; 0x21
    2754:	9a a1       	ldd	r25, Y+34	; 0x22
    2756:	9e 8f       	std	Y+30, r25	; 0x1e
    2758:	8d 8f       	std	Y+29, r24	; 0x1d
    275a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    275c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    275e:	01 97       	sbiw	r24, 0x01	; 1
    2760:	f1 f7       	brne	.-4      	; 0x275e <twoLedsConvergeDivergeEvery250ms+0x140>
    2762:	9e 8f       	std	Y+30, r25	; 0x1e
    2764:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(250);
		LED_voidOff     (Leds[i]);
    2766:	8c a5       	ldd	r24, Y+44	; 0x2c
    2768:	28 2f       	mov	r18, r24
    276a:	30 e0       	ldi	r19, 0x00	; 0
    276c:	c9 01       	movw	r24, r18
    276e:	88 0f       	add	r24, r24
    2770:	99 1f       	adc	r25, r25
    2772:	82 0f       	add	r24, r18
    2774:	93 1f       	adc	r25, r19
    2776:	fc 01       	movw	r30, r24
    2778:	e8 59       	subi	r30, 0x98	; 152
    277a:	ff 4f       	sbci	r31, 0xFF	; 255
    277c:	60 81       	ld	r22, Z
    277e:	71 81       	ldd	r23, Z+1	; 0x01
    2780:	82 81       	ldd	r24, Z+2	; 0x02
    2782:	0e 94 81 0b 	call	0x1702	; 0x1702 <LED_voidOff>
		LED_voidOff     (Leds[7 - i]);
    2786:	8c a5       	ldd	r24, Y+44	; 0x2c
    2788:	28 2f       	mov	r18, r24
    278a:	30 e0       	ldi	r19, 0x00	; 0
    278c:	87 e0       	ldi	r24, 0x07	; 7
    278e:	90 e0       	ldi	r25, 0x00	; 0
    2790:	ac 01       	movw	r20, r24
    2792:	42 1b       	sub	r20, r18
    2794:	53 0b       	sbc	r21, r19
    2796:	9a 01       	movw	r18, r20
    2798:	c9 01       	movw	r24, r18
    279a:	88 0f       	add	r24, r24
    279c:	99 1f       	adc	r25, r25
    279e:	82 0f       	add	r24, r18
    27a0:	93 1f       	adc	r25, r19
    27a2:	fc 01       	movw	r30, r24
    27a4:	e8 59       	subi	r30, 0x98	; 152
    27a6:	ff 4f       	sbci	r31, 0xFF	; 255
    27a8:	60 81       	ld	r22, Z
    27aa:	71 81       	ldd	r23, Z+1	; 0x01
    27ac:	82 81       	ldd	r24, Z+2	; 0x02
    27ae:	0e 94 81 0b 	call	0x1702	; 0x1702 <LED_voidOff>
	_delay_ms(250);
}

void twoLedsConvergeDivergeEvery250ms (void) {

	LOOP(NUM_OF_LEDS / 2)
    27b2:	8c a5       	ldd	r24, Y+44	; 0x2c
    27b4:	8f 5f       	subi	r24, 0xFF	; 255
    27b6:	8c a7       	std	Y+44, r24	; 0x2c
    27b8:	8c a5       	ldd	r24, Y+44	; 0x2c
    27ba:	84 30       	cpi	r24, 0x04	; 4
    27bc:	08 f4       	brcc	.+2      	; 0x27c0 <twoLedsConvergeDivergeEvery250ms+0x1a2>
    27be:	3b cf       	rjmp	.-394    	; 0x2636 <twoLedsConvergeDivergeEvery250ms+0x18>
    27c0:	80 e0       	ldi	r24, 0x00	; 0
    27c2:	90 e0       	ldi	r25, 0x00	; 0
    27c4:	aa e7       	ldi	r26, 0x7A	; 122
    27c6:	b3 e4       	ldi	r27, 0x43	; 67
    27c8:	89 8f       	std	Y+25, r24	; 0x19
    27ca:	9a 8f       	std	Y+26, r25	; 0x1a
    27cc:	ab 8f       	std	Y+27, r26	; 0x1b
    27ce:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27d0:	69 8d       	ldd	r22, Y+25	; 0x19
    27d2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    27d4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    27d6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    27d8:	20 e0       	ldi	r18, 0x00	; 0
    27da:	30 e0       	ldi	r19, 0x00	; 0
    27dc:	4a ef       	ldi	r20, 0xFA	; 250
    27de:	54 e4       	ldi	r21, 0x44	; 68
    27e0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    27e4:	dc 01       	movw	r26, r24
    27e6:	cb 01       	movw	r24, r22
    27e8:	8d 8b       	std	Y+21, r24	; 0x15
    27ea:	9e 8b       	std	Y+22, r25	; 0x16
    27ec:	af 8b       	std	Y+23, r26	; 0x17
    27ee:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    27f0:	6d 89       	ldd	r22, Y+21	; 0x15
    27f2:	7e 89       	ldd	r23, Y+22	; 0x16
    27f4:	8f 89       	ldd	r24, Y+23	; 0x17
    27f6:	98 8d       	ldd	r25, Y+24	; 0x18
    27f8:	20 e0       	ldi	r18, 0x00	; 0
    27fa:	30 e0       	ldi	r19, 0x00	; 0
    27fc:	40 e8       	ldi	r20, 0x80	; 128
    27fe:	5f e3       	ldi	r21, 0x3F	; 63
    2800:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2804:	88 23       	and	r24, r24
    2806:	2c f4       	brge	.+10     	; 0x2812 <twoLedsConvergeDivergeEvery250ms+0x1f4>
		__ticks = 1;
    2808:	81 e0       	ldi	r24, 0x01	; 1
    280a:	90 e0       	ldi	r25, 0x00	; 0
    280c:	9c 8b       	std	Y+20, r25	; 0x14
    280e:	8b 8b       	std	Y+19, r24	; 0x13
    2810:	3f c0       	rjmp	.+126    	; 0x2890 <twoLedsConvergeDivergeEvery250ms+0x272>
	else if (__tmp > 65535)
    2812:	6d 89       	ldd	r22, Y+21	; 0x15
    2814:	7e 89       	ldd	r23, Y+22	; 0x16
    2816:	8f 89       	ldd	r24, Y+23	; 0x17
    2818:	98 8d       	ldd	r25, Y+24	; 0x18
    281a:	20 e0       	ldi	r18, 0x00	; 0
    281c:	3f ef       	ldi	r19, 0xFF	; 255
    281e:	4f e7       	ldi	r20, 0x7F	; 127
    2820:	57 e4       	ldi	r21, 0x47	; 71
    2822:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2826:	18 16       	cp	r1, r24
    2828:	4c f5       	brge	.+82     	; 0x287c <twoLedsConvergeDivergeEvery250ms+0x25e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    282a:	69 8d       	ldd	r22, Y+25	; 0x19
    282c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    282e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2830:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2832:	20 e0       	ldi	r18, 0x00	; 0
    2834:	30 e0       	ldi	r19, 0x00	; 0
    2836:	40 e2       	ldi	r20, 0x20	; 32
    2838:	51 e4       	ldi	r21, 0x41	; 65
    283a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    283e:	dc 01       	movw	r26, r24
    2840:	cb 01       	movw	r24, r22
    2842:	bc 01       	movw	r22, r24
    2844:	cd 01       	movw	r24, r26
    2846:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    284a:	dc 01       	movw	r26, r24
    284c:	cb 01       	movw	r24, r22
    284e:	9c 8b       	std	Y+20, r25	; 0x14
    2850:	8b 8b       	std	Y+19, r24	; 0x13
    2852:	0f c0       	rjmp	.+30     	; 0x2872 <twoLedsConvergeDivergeEvery250ms+0x254>
    2854:	88 ec       	ldi	r24, 0xC8	; 200
    2856:	90 e0       	ldi	r25, 0x00	; 0
    2858:	9a 8b       	std	Y+18, r25	; 0x12
    285a:	89 8b       	std	Y+17, r24	; 0x11
    285c:	89 89       	ldd	r24, Y+17	; 0x11
    285e:	9a 89       	ldd	r25, Y+18	; 0x12
    2860:	01 97       	sbiw	r24, 0x01	; 1
    2862:	f1 f7       	brne	.-4      	; 0x2860 <twoLedsConvergeDivergeEvery250ms+0x242>
    2864:	9a 8b       	std	Y+18, r25	; 0x12
    2866:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2868:	8b 89       	ldd	r24, Y+19	; 0x13
    286a:	9c 89       	ldd	r25, Y+20	; 0x14
    286c:	01 97       	sbiw	r24, 0x01	; 1
    286e:	9c 8b       	std	Y+20, r25	; 0x14
    2870:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2872:	8b 89       	ldd	r24, Y+19	; 0x13
    2874:	9c 89       	ldd	r25, Y+20	; 0x14
    2876:	00 97       	sbiw	r24, 0x00	; 0
    2878:	69 f7       	brne	.-38     	; 0x2854 <twoLedsConvergeDivergeEvery250ms+0x236>
    287a:	14 c0       	rjmp	.+40     	; 0x28a4 <twoLedsConvergeDivergeEvery250ms+0x286>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    287c:	6d 89       	ldd	r22, Y+21	; 0x15
    287e:	7e 89       	ldd	r23, Y+22	; 0x16
    2880:	8f 89       	ldd	r24, Y+23	; 0x17
    2882:	98 8d       	ldd	r25, Y+24	; 0x18
    2884:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2888:	dc 01       	movw	r26, r24
    288a:	cb 01       	movw	r24, r22
    288c:	9c 8b       	std	Y+20, r25	; 0x14
    288e:	8b 8b       	std	Y+19, r24	; 0x13
    2890:	8b 89       	ldd	r24, Y+19	; 0x13
    2892:	9c 89       	ldd	r25, Y+20	; 0x14
    2894:	98 8b       	std	Y+16, r25	; 0x10
    2896:	8f 87       	std	Y+15, r24	; 0x0f
    2898:	8f 85       	ldd	r24, Y+15	; 0x0f
    289a:	98 89       	ldd	r25, Y+16	; 0x10
    289c:	01 97       	sbiw	r24, 0x01	; 1
    289e:	f1 f7       	brne	.-4      	; 0x289c <twoLedsConvergeDivergeEvery250ms+0x27e>
    28a0:	98 8b       	std	Y+16, r25	; 0x10
    28a2:	8f 87       	std	Y+15, r24	; 0x0f
		LED_voidOff     (Leds[7 - i]);
	}

	_delay_ms(250);

	LOOP(NUM_OF_LEDS / 2)
    28a4:	1b a6       	std	Y+43, r1	; 0x2b
    28a6:	c7 c0       	rjmp	.+398    	; 0x2a36 <twoLedsConvergeDivergeEvery250ms+0x418>
	{
		LED_voidOn     (Leds[i + 4]);
    28a8:	8b a5       	ldd	r24, Y+43	; 0x2b
    28aa:	88 2f       	mov	r24, r24
    28ac:	90 e0       	ldi	r25, 0x00	; 0
    28ae:	9c 01       	movw	r18, r24
    28b0:	2c 5f       	subi	r18, 0xFC	; 252
    28b2:	3f 4f       	sbci	r19, 0xFF	; 255
    28b4:	c9 01       	movw	r24, r18
    28b6:	88 0f       	add	r24, r24
    28b8:	99 1f       	adc	r25, r25
    28ba:	82 0f       	add	r24, r18
    28bc:	93 1f       	adc	r25, r19
    28be:	fc 01       	movw	r30, r24
    28c0:	e8 59       	subi	r30, 0x98	; 152
    28c2:	ff 4f       	sbci	r31, 0xFF	; 255
    28c4:	60 81       	ld	r22, Z
    28c6:	71 81       	ldd	r23, Z+1	; 0x01
    28c8:	82 81       	ldd	r24, Z+2	; 0x02
    28ca:	0e 94 5f 0b 	call	0x16be	; 0x16be <LED_voidOn>
		LED_voidOn     (Leds[3 - i]);
    28ce:	8b a5       	ldd	r24, Y+43	; 0x2b
    28d0:	28 2f       	mov	r18, r24
    28d2:	30 e0       	ldi	r19, 0x00	; 0
    28d4:	83 e0       	ldi	r24, 0x03	; 3
    28d6:	90 e0       	ldi	r25, 0x00	; 0
    28d8:	ac 01       	movw	r20, r24
    28da:	42 1b       	sub	r20, r18
    28dc:	53 0b       	sbc	r21, r19
    28de:	9a 01       	movw	r18, r20
    28e0:	c9 01       	movw	r24, r18
    28e2:	88 0f       	add	r24, r24
    28e4:	99 1f       	adc	r25, r25
    28e6:	82 0f       	add	r24, r18
    28e8:	93 1f       	adc	r25, r19
    28ea:	fc 01       	movw	r30, r24
    28ec:	e8 59       	subi	r30, 0x98	; 152
    28ee:	ff 4f       	sbci	r31, 0xFF	; 255
    28f0:	60 81       	ld	r22, Z
    28f2:	71 81       	ldd	r23, Z+1	; 0x01
    28f4:	82 81       	ldd	r24, Z+2	; 0x02
    28f6:	0e 94 5f 0b 	call	0x16be	; 0x16be <LED_voidOn>
    28fa:	80 e0       	ldi	r24, 0x00	; 0
    28fc:	90 e0       	ldi	r25, 0x00	; 0
    28fe:	aa e7       	ldi	r26, 0x7A	; 122
    2900:	b3 e4       	ldi	r27, 0x43	; 67
    2902:	8b 87       	std	Y+11, r24	; 0x0b
    2904:	9c 87       	std	Y+12, r25	; 0x0c
    2906:	ad 87       	std	Y+13, r26	; 0x0d
    2908:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    290a:	6b 85       	ldd	r22, Y+11	; 0x0b
    290c:	7c 85       	ldd	r23, Y+12	; 0x0c
    290e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2910:	9e 85       	ldd	r25, Y+14	; 0x0e
    2912:	20 e0       	ldi	r18, 0x00	; 0
    2914:	30 e0       	ldi	r19, 0x00	; 0
    2916:	4a ef       	ldi	r20, 0xFA	; 250
    2918:	54 e4       	ldi	r21, 0x44	; 68
    291a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    291e:	dc 01       	movw	r26, r24
    2920:	cb 01       	movw	r24, r22
    2922:	8f 83       	std	Y+7, r24	; 0x07
    2924:	98 87       	std	Y+8, r25	; 0x08
    2926:	a9 87       	std	Y+9, r26	; 0x09
    2928:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    292a:	6f 81       	ldd	r22, Y+7	; 0x07
    292c:	78 85       	ldd	r23, Y+8	; 0x08
    292e:	89 85       	ldd	r24, Y+9	; 0x09
    2930:	9a 85       	ldd	r25, Y+10	; 0x0a
    2932:	20 e0       	ldi	r18, 0x00	; 0
    2934:	30 e0       	ldi	r19, 0x00	; 0
    2936:	40 e8       	ldi	r20, 0x80	; 128
    2938:	5f e3       	ldi	r21, 0x3F	; 63
    293a:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    293e:	88 23       	and	r24, r24
    2940:	2c f4       	brge	.+10     	; 0x294c <twoLedsConvergeDivergeEvery250ms+0x32e>
		__ticks = 1;
    2942:	81 e0       	ldi	r24, 0x01	; 1
    2944:	90 e0       	ldi	r25, 0x00	; 0
    2946:	9e 83       	std	Y+6, r25	; 0x06
    2948:	8d 83       	std	Y+5, r24	; 0x05
    294a:	3f c0       	rjmp	.+126    	; 0x29ca <twoLedsConvergeDivergeEvery250ms+0x3ac>
	else if (__tmp > 65535)
    294c:	6f 81       	ldd	r22, Y+7	; 0x07
    294e:	78 85       	ldd	r23, Y+8	; 0x08
    2950:	89 85       	ldd	r24, Y+9	; 0x09
    2952:	9a 85       	ldd	r25, Y+10	; 0x0a
    2954:	20 e0       	ldi	r18, 0x00	; 0
    2956:	3f ef       	ldi	r19, 0xFF	; 255
    2958:	4f e7       	ldi	r20, 0x7F	; 127
    295a:	57 e4       	ldi	r21, 0x47	; 71
    295c:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2960:	18 16       	cp	r1, r24
    2962:	4c f5       	brge	.+82     	; 0x29b6 <twoLedsConvergeDivergeEvery250ms+0x398>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2964:	6b 85       	ldd	r22, Y+11	; 0x0b
    2966:	7c 85       	ldd	r23, Y+12	; 0x0c
    2968:	8d 85       	ldd	r24, Y+13	; 0x0d
    296a:	9e 85       	ldd	r25, Y+14	; 0x0e
    296c:	20 e0       	ldi	r18, 0x00	; 0
    296e:	30 e0       	ldi	r19, 0x00	; 0
    2970:	40 e2       	ldi	r20, 0x20	; 32
    2972:	51 e4       	ldi	r21, 0x41	; 65
    2974:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2978:	dc 01       	movw	r26, r24
    297a:	cb 01       	movw	r24, r22
    297c:	bc 01       	movw	r22, r24
    297e:	cd 01       	movw	r24, r26
    2980:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2984:	dc 01       	movw	r26, r24
    2986:	cb 01       	movw	r24, r22
    2988:	9e 83       	std	Y+6, r25	; 0x06
    298a:	8d 83       	std	Y+5, r24	; 0x05
    298c:	0f c0       	rjmp	.+30     	; 0x29ac <twoLedsConvergeDivergeEvery250ms+0x38e>
    298e:	88 ec       	ldi	r24, 0xC8	; 200
    2990:	90 e0       	ldi	r25, 0x00	; 0
    2992:	9c 83       	std	Y+4, r25	; 0x04
    2994:	8b 83       	std	Y+3, r24	; 0x03
    2996:	8b 81       	ldd	r24, Y+3	; 0x03
    2998:	9c 81       	ldd	r25, Y+4	; 0x04
    299a:	01 97       	sbiw	r24, 0x01	; 1
    299c:	f1 f7       	brne	.-4      	; 0x299a <twoLedsConvergeDivergeEvery250ms+0x37c>
    299e:	9c 83       	std	Y+4, r25	; 0x04
    29a0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29a2:	8d 81       	ldd	r24, Y+5	; 0x05
    29a4:	9e 81       	ldd	r25, Y+6	; 0x06
    29a6:	01 97       	sbiw	r24, 0x01	; 1
    29a8:	9e 83       	std	Y+6, r25	; 0x06
    29aa:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29ac:	8d 81       	ldd	r24, Y+5	; 0x05
    29ae:	9e 81       	ldd	r25, Y+6	; 0x06
    29b0:	00 97       	sbiw	r24, 0x00	; 0
    29b2:	69 f7       	brne	.-38     	; 0x298e <twoLedsConvergeDivergeEvery250ms+0x370>
    29b4:	14 c0       	rjmp	.+40     	; 0x29de <twoLedsConvergeDivergeEvery250ms+0x3c0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29b6:	6f 81       	ldd	r22, Y+7	; 0x07
    29b8:	78 85       	ldd	r23, Y+8	; 0x08
    29ba:	89 85       	ldd	r24, Y+9	; 0x09
    29bc:	9a 85       	ldd	r25, Y+10	; 0x0a
    29be:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    29c2:	dc 01       	movw	r26, r24
    29c4:	cb 01       	movw	r24, r22
    29c6:	9e 83       	std	Y+6, r25	; 0x06
    29c8:	8d 83       	std	Y+5, r24	; 0x05
    29ca:	8d 81       	ldd	r24, Y+5	; 0x05
    29cc:	9e 81       	ldd	r25, Y+6	; 0x06
    29ce:	9a 83       	std	Y+2, r25	; 0x02
    29d0:	89 83       	std	Y+1, r24	; 0x01
    29d2:	89 81       	ldd	r24, Y+1	; 0x01
    29d4:	9a 81       	ldd	r25, Y+2	; 0x02
    29d6:	01 97       	sbiw	r24, 0x01	; 1
    29d8:	f1 f7       	brne	.-4      	; 0x29d6 <twoLedsConvergeDivergeEvery250ms+0x3b8>
    29da:	9a 83       	std	Y+2, r25	; 0x02
    29dc:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(250);
		LED_voidOff     (Leds[i + 4]);
    29de:	8b a5       	ldd	r24, Y+43	; 0x2b
    29e0:	88 2f       	mov	r24, r24
    29e2:	90 e0       	ldi	r25, 0x00	; 0
    29e4:	9c 01       	movw	r18, r24
    29e6:	2c 5f       	subi	r18, 0xFC	; 252
    29e8:	3f 4f       	sbci	r19, 0xFF	; 255
    29ea:	c9 01       	movw	r24, r18
    29ec:	88 0f       	add	r24, r24
    29ee:	99 1f       	adc	r25, r25
    29f0:	82 0f       	add	r24, r18
    29f2:	93 1f       	adc	r25, r19
    29f4:	fc 01       	movw	r30, r24
    29f6:	e8 59       	subi	r30, 0x98	; 152
    29f8:	ff 4f       	sbci	r31, 0xFF	; 255
    29fa:	60 81       	ld	r22, Z
    29fc:	71 81       	ldd	r23, Z+1	; 0x01
    29fe:	82 81       	ldd	r24, Z+2	; 0x02
    2a00:	0e 94 81 0b 	call	0x1702	; 0x1702 <LED_voidOff>
		LED_voidOff     (Leds[3 - i]);
    2a04:	8b a5       	ldd	r24, Y+43	; 0x2b
    2a06:	28 2f       	mov	r18, r24
    2a08:	30 e0       	ldi	r19, 0x00	; 0
    2a0a:	83 e0       	ldi	r24, 0x03	; 3
    2a0c:	90 e0       	ldi	r25, 0x00	; 0
    2a0e:	ac 01       	movw	r20, r24
    2a10:	42 1b       	sub	r20, r18
    2a12:	53 0b       	sbc	r21, r19
    2a14:	9a 01       	movw	r18, r20
    2a16:	c9 01       	movw	r24, r18
    2a18:	88 0f       	add	r24, r24
    2a1a:	99 1f       	adc	r25, r25
    2a1c:	82 0f       	add	r24, r18
    2a1e:	93 1f       	adc	r25, r19
    2a20:	fc 01       	movw	r30, r24
    2a22:	e8 59       	subi	r30, 0x98	; 152
    2a24:	ff 4f       	sbci	r31, 0xFF	; 255
    2a26:	60 81       	ld	r22, Z
    2a28:	71 81       	ldd	r23, Z+1	; 0x01
    2a2a:	82 81       	ldd	r24, Z+2	; 0x02
    2a2c:	0e 94 81 0b 	call	0x1702	; 0x1702 <LED_voidOff>
		LED_voidOff     (Leds[7 - i]);
	}

	_delay_ms(250);

	LOOP(NUM_OF_LEDS / 2)
    2a30:	8b a5       	ldd	r24, Y+43	; 0x2b
    2a32:	8f 5f       	subi	r24, 0xFF	; 255
    2a34:	8b a7       	std	Y+43, r24	; 0x2b
    2a36:	8b a5       	ldd	r24, Y+43	; 0x2b
    2a38:	84 30       	cpi	r24, 0x04	; 4
    2a3a:	08 f4       	brcc	.+2      	; 0x2a3e <twoLedsConvergeDivergeEvery250ms+0x420>
    2a3c:	35 cf       	rjmp	.-406    	; 0x28a8 <twoLedsConvergeDivergeEvery250ms+0x28a>
		LED_voidOn     (Leds[3 - i]);
		_delay_ms(250);
		LED_voidOff     (Leds[i + 4]);
		LED_voidOff     (Leds[3 - i]);
	}
}
    2a3e:	ac 96       	adiw	r28, 0x2c	; 44
    2a40:	0f b6       	in	r0, 0x3f	; 63
    2a42:	f8 94       	cli
    2a44:	de bf       	out	0x3e, r29	; 62
    2a46:	0f be       	out	0x3f, r0	; 63
    2a48:	cd bf       	out	0x3d, r28	; 61
    2a4a:	cf 91       	pop	r28
    2a4c:	df 91       	pop	r29
    2a4e:	08 95       	ret

00002a50 <__prologue_saves__>:
    2a50:	2f 92       	push	r2
    2a52:	3f 92       	push	r3
    2a54:	4f 92       	push	r4
    2a56:	5f 92       	push	r5
    2a58:	6f 92       	push	r6
    2a5a:	7f 92       	push	r7
    2a5c:	8f 92       	push	r8
    2a5e:	9f 92       	push	r9
    2a60:	af 92       	push	r10
    2a62:	bf 92       	push	r11
    2a64:	cf 92       	push	r12
    2a66:	df 92       	push	r13
    2a68:	ef 92       	push	r14
    2a6a:	ff 92       	push	r15
    2a6c:	0f 93       	push	r16
    2a6e:	1f 93       	push	r17
    2a70:	cf 93       	push	r28
    2a72:	df 93       	push	r29
    2a74:	cd b7       	in	r28, 0x3d	; 61
    2a76:	de b7       	in	r29, 0x3e	; 62
    2a78:	ca 1b       	sub	r28, r26
    2a7a:	db 0b       	sbc	r29, r27
    2a7c:	0f b6       	in	r0, 0x3f	; 63
    2a7e:	f8 94       	cli
    2a80:	de bf       	out	0x3e, r29	; 62
    2a82:	0f be       	out	0x3f, r0	; 63
    2a84:	cd bf       	out	0x3d, r28	; 61
    2a86:	09 94       	ijmp

00002a88 <__epilogue_restores__>:
    2a88:	2a 88       	ldd	r2, Y+18	; 0x12
    2a8a:	39 88       	ldd	r3, Y+17	; 0x11
    2a8c:	48 88       	ldd	r4, Y+16	; 0x10
    2a8e:	5f 84       	ldd	r5, Y+15	; 0x0f
    2a90:	6e 84       	ldd	r6, Y+14	; 0x0e
    2a92:	7d 84       	ldd	r7, Y+13	; 0x0d
    2a94:	8c 84       	ldd	r8, Y+12	; 0x0c
    2a96:	9b 84       	ldd	r9, Y+11	; 0x0b
    2a98:	aa 84       	ldd	r10, Y+10	; 0x0a
    2a9a:	b9 84       	ldd	r11, Y+9	; 0x09
    2a9c:	c8 84       	ldd	r12, Y+8	; 0x08
    2a9e:	df 80       	ldd	r13, Y+7	; 0x07
    2aa0:	ee 80       	ldd	r14, Y+6	; 0x06
    2aa2:	fd 80       	ldd	r15, Y+5	; 0x05
    2aa4:	0c 81       	ldd	r16, Y+4	; 0x04
    2aa6:	1b 81       	ldd	r17, Y+3	; 0x03
    2aa8:	aa 81       	ldd	r26, Y+2	; 0x02
    2aaa:	b9 81       	ldd	r27, Y+1	; 0x01
    2aac:	ce 0f       	add	r28, r30
    2aae:	d1 1d       	adc	r29, r1
    2ab0:	0f b6       	in	r0, 0x3f	; 63
    2ab2:	f8 94       	cli
    2ab4:	de bf       	out	0x3e, r29	; 62
    2ab6:	0f be       	out	0x3f, r0	; 63
    2ab8:	cd bf       	out	0x3d, r28	; 61
    2aba:	ed 01       	movw	r28, r26
    2abc:	08 95       	ret

00002abe <_exit>:
    2abe:	f8 94       	cli

00002ac0 <__stop_program>:
    2ac0:	ff cf       	rjmp	.-2      	; 0x2ac0 <__stop_program>
