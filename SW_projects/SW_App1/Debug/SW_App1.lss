
SW_App1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000e38  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  00000e38  00000ecc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000003  0080006a  0080006a  00000ed6  2**0
                  ALLOC
  3 .stab         00001380  00000000  00000000  00000ed8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000b23  00000000  00000000  00002258  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 e3       	ldi	r30, 0x38	; 56
  68:	fe e0       	ldi	r31, 0x0E	; 14
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	aa 36       	cpi	r26, 0x6A	; 106
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	aa e6       	ldi	r26, 0x6A	; 106
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ad 36       	cpi	r26, 0x6D	; 109
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 be 06 	call	0xd7c	; 0xd7c <main>
  8a:	0c 94 1a 07 	jmp	0xe34	; 0xe34 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <DIO_enumSetPinDirection>:
#include "DIO_private.h"

/*<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< IO PIN <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<*/

DIO_ErrorStatus DIO_enumSetPinDirection (u8 Copy_u8Port, u8 Copy_u8Pin, u8 Copy_u8Direction)
{
  92:	df 93       	push	r29
  94:	cf 93       	push	r28
  96:	cd b7       	in	r28, 0x3d	; 61
  98:	de b7       	in	r29, 0x3e	; 62
  9a:	28 97       	sbiw	r28, 0x08	; 8
  9c:	0f b6       	in	r0, 0x3f	; 63
  9e:	f8 94       	cli
  a0:	de bf       	out	0x3e, r29	; 62
  a2:	0f be       	out	0x3f, r0	; 63
  a4:	cd bf       	out	0x3d, r28	; 61
  a6:	8a 83       	std	Y+2, r24	; 0x02
  a8:	6b 83       	std	Y+3, r22	; 0x03
  aa:	4c 83       	std	Y+4, r20	; 0x04
	DIO_ErrorStatus LOC_enumState = DIO_OK;
  ac:	81 e0       	ldi	r24, 0x01	; 1
  ae:	89 83       	std	Y+1, r24	; 0x01
	
	if (Copy_u8Port <= DIO_PORTD && Copy_u8Pin <= DIO_PIN7)
  b0:	8a 81       	ldd	r24, Y+2	; 0x02
  b2:	84 30       	cpi	r24, 0x04	; 4
  b4:	08 f0       	brcs	.+2      	; 0xb8 <DIO_enumSetPinDirection+0x26>
  b6:	f1 c0       	rjmp	.+482    	; 0x29a <DIO_enumSetPinDirection+0x208>
  b8:	8b 81       	ldd	r24, Y+3	; 0x03
  ba:	88 30       	cpi	r24, 0x08	; 8
  bc:	08 f0       	brcs	.+2      	; 0xc0 <DIO_enumSetPinDirection+0x2e>
  be:	ed c0       	rjmp	.+474    	; 0x29a <DIO_enumSetPinDirection+0x208>
	{
		if (Copy_u8Direction == DIO_PIN_OUTPUT)
  c0:	8c 81       	ldd	r24, Y+4	; 0x04
  c2:	81 30       	cpi	r24, 0x01	; 1
  c4:	09 f0       	breq	.+2      	; 0xc8 <DIO_enumSetPinDirection+0x36>
  c6:	6f c0       	rjmp	.+222    	; 0x1a6 <DIO_enumSetPinDirection+0x114>
		{
			switch (Copy_u8Port)
  c8:	8a 81       	ldd	r24, Y+2	; 0x02
  ca:	28 2f       	mov	r18, r24
  cc:	30 e0       	ldi	r19, 0x00	; 0
  ce:	38 87       	std	Y+8, r19	; 0x08
  d0:	2f 83       	std	Y+7, r18	; 0x07
  d2:	8f 81       	ldd	r24, Y+7	; 0x07
  d4:	98 85       	ldd	r25, Y+8	; 0x08
  d6:	81 30       	cpi	r24, 0x01	; 1
  d8:	91 05       	cpc	r25, r1
  da:	49 f1       	breq	.+82     	; 0x12e <DIO_enumSetPinDirection+0x9c>
  dc:	2f 81       	ldd	r18, Y+7	; 0x07
  de:	38 85       	ldd	r19, Y+8	; 0x08
  e0:	22 30       	cpi	r18, 0x02	; 2
  e2:	31 05       	cpc	r19, r1
  e4:	2c f4       	brge	.+10     	; 0xf0 <DIO_enumSetPinDirection+0x5e>
  e6:	8f 81       	ldd	r24, Y+7	; 0x07
  e8:	98 85       	ldd	r25, Y+8	; 0x08
  ea:	00 97       	sbiw	r24, 0x00	; 0
  ec:	61 f0       	breq	.+24     	; 0x106 <DIO_enumSetPinDirection+0x74>
  ee:	d6 c0       	rjmp	.+428    	; 0x29c <DIO_enumSetPinDirection+0x20a>
  f0:	2f 81       	ldd	r18, Y+7	; 0x07
  f2:	38 85       	ldd	r19, Y+8	; 0x08
  f4:	22 30       	cpi	r18, 0x02	; 2
  f6:	31 05       	cpc	r19, r1
  f8:	71 f1       	breq	.+92     	; 0x156 <DIO_enumSetPinDirection+0xc4>
  fa:	8f 81       	ldd	r24, Y+7	; 0x07
  fc:	98 85       	ldd	r25, Y+8	; 0x08
  fe:	83 30       	cpi	r24, 0x03	; 3
 100:	91 05       	cpc	r25, r1
 102:	e9 f1       	breq	.+122    	; 0x17e <DIO_enumSetPinDirection+0xec>
 104:	cb c0       	rjmp	.+406    	; 0x29c <DIO_enumSetPinDirection+0x20a>
			{
			case DIO_PORTA : SET_BIT(DDRA_Register, Copy_u8Pin); break;
 106:	aa e3       	ldi	r26, 0x3A	; 58
 108:	b0 e0       	ldi	r27, 0x00	; 0
 10a:	ea e3       	ldi	r30, 0x3A	; 58
 10c:	f0 e0       	ldi	r31, 0x00	; 0
 10e:	80 81       	ld	r24, Z
 110:	48 2f       	mov	r20, r24
 112:	8b 81       	ldd	r24, Y+3	; 0x03
 114:	28 2f       	mov	r18, r24
 116:	30 e0       	ldi	r19, 0x00	; 0
 118:	81 e0       	ldi	r24, 0x01	; 1
 11a:	90 e0       	ldi	r25, 0x00	; 0
 11c:	02 2e       	mov	r0, r18
 11e:	02 c0       	rjmp	.+4      	; 0x124 <DIO_enumSetPinDirection+0x92>
 120:	88 0f       	add	r24, r24
 122:	99 1f       	adc	r25, r25
 124:	0a 94       	dec	r0
 126:	e2 f7       	brpl	.-8      	; 0x120 <DIO_enumSetPinDirection+0x8e>
 128:	84 2b       	or	r24, r20
 12a:	8c 93       	st	X, r24
 12c:	b7 c0       	rjmp	.+366    	; 0x29c <DIO_enumSetPinDirection+0x20a>
			case DIO_PORTB : SET_BIT(DDRB_Register, Copy_u8Pin); break;
 12e:	a7 e3       	ldi	r26, 0x37	; 55
 130:	b0 e0       	ldi	r27, 0x00	; 0
 132:	e7 e3       	ldi	r30, 0x37	; 55
 134:	f0 e0       	ldi	r31, 0x00	; 0
 136:	80 81       	ld	r24, Z
 138:	48 2f       	mov	r20, r24
 13a:	8b 81       	ldd	r24, Y+3	; 0x03
 13c:	28 2f       	mov	r18, r24
 13e:	30 e0       	ldi	r19, 0x00	; 0
 140:	81 e0       	ldi	r24, 0x01	; 1
 142:	90 e0       	ldi	r25, 0x00	; 0
 144:	02 2e       	mov	r0, r18
 146:	02 c0       	rjmp	.+4      	; 0x14c <DIO_enumSetPinDirection+0xba>
 148:	88 0f       	add	r24, r24
 14a:	99 1f       	adc	r25, r25
 14c:	0a 94       	dec	r0
 14e:	e2 f7       	brpl	.-8      	; 0x148 <DIO_enumSetPinDirection+0xb6>
 150:	84 2b       	or	r24, r20
 152:	8c 93       	st	X, r24
 154:	a3 c0       	rjmp	.+326    	; 0x29c <DIO_enumSetPinDirection+0x20a>
			case DIO_PORTC : SET_BIT(DDRC_Register, Copy_u8Pin); break;
 156:	a4 e3       	ldi	r26, 0x34	; 52
 158:	b0 e0       	ldi	r27, 0x00	; 0
 15a:	e4 e3       	ldi	r30, 0x34	; 52
 15c:	f0 e0       	ldi	r31, 0x00	; 0
 15e:	80 81       	ld	r24, Z
 160:	48 2f       	mov	r20, r24
 162:	8b 81       	ldd	r24, Y+3	; 0x03
 164:	28 2f       	mov	r18, r24
 166:	30 e0       	ldi	r19, 0x00	; 0
 168:	81 e0       	ldi	r24, 0x01	; 1
 16a:	90 e0       	ldi	r25, 0x00	; 0
 16c:	02 2e       	mov	r0, r18
 16e:	02 c0       	rjmp	.+4      	; 0x174 <DIO_enumSetPinDirection+0xe2>
 170:	88 0f       	add	r24, r24
 172:	99 1f       	adc	r25, r25
 174:	0a 94       	dec	r0
 176:	e2 f7       	brpl	.-8      	; 0x170 <DIO_enumSetPinDirection+0xde>
 178:	84 2b       	or	r24, r20
 17a:	8c 93       	st	X, r24
 17c:	8f c0       	rjmp	.+286    	; 0x29c <DIO_enumSetPinDirection+0x20a>
			case DIO_PORTD : SET_BIT(DDRD_Register, Copy_u8Pin); break;
 17e:	a1 e3       	ldi	r26, 0x31	; 49
 180:	b0 e0       	ldi	r27, 0x00	; 0
 182:	e1 e3       	ldi	r30, 0x31	; 49
 184:	f0 e0       	ldi	r31, 0x00	; 0
 186:	80 81       	ld	r24, Z
 188:	48 2f       	mov	r20, r24
 18a:	8b 81       	ldd	r24, Y+3	; 0x03
 18c:	28 2f       	mov	r18, r24
 18e:	30 e0       	ldi	r19, 0x00	; 0
 190:	81 e0       	ldi	r24, 0x01	; 1
 192:	90 e0       	ldi	r25, 0x00	; 0
 194:	02 2e       	mov	r0, r18
 196:	02 c0       	rjmp	.+4      	; 0x19c <DIO_enumSetPinDirection+0x10a>
 198:	88 0f       	add	r24, r24
 19a:	99 1f       	adc	r25, r25
 19c:	0a 94       	dec	r0
 19e:	e2 f7       	brpl	.-8      	; 0x198 <DIO_enumSetPinDirection+0x106>
 1a0:	84 2b       	or	r24, r20
 1a2:	8c 93       	st	X, r24
 1a4:	7b c0       	rjmp	.+246    	; 0x29c <DIO_enumSetPinDirection+0x20a>
			}
		}
		
		else if (Copy_u8Direction == DIO_PIN_INPUT)
 1a6:	8c 81       	ldd	r24, Y+4	; 0x04
 1a8:	88 23       	and	r24, r24
 1aa:	09 f0       	breq	.+2      	; 0x1ae <DIO_enumSetPinDirection+0x11c>
 1ac:	74 c0       	rjmp	.+232    	; 0x296 <DIO_enumSetPinDirection+0x204>
		{
			switch (Copy_u8Port)
 1ae:	8a 81       	ldd	r24, Y+2	; 0x02
 1b0:	28 2f       	mov	r18, r24
 1b2:	30 e0       	ldi	r19, 0x00	; 0
 1b4:	3e 83       	std	Y+6, r19	; 0x06
 1b6:	2d 83       	std	Y+5, r18	; 0x05
 1b8:	8d 81       	ldd	r24, Y+5	; 0x05
 1ba:	9e 81       	ldd	r25, Y+6	; 0x06
 1bc:	81 30       	cpi	r24, 0x01	; 1
 1be:	91 05       	cpc	r25, r1
 1c0:	59 f1       	breq	.+86     	; 0x218 <DIO_enumSetPinDirection+0x186>
 1c2:	2d 81       	ldd	r18, Y+5	; 0x05
 1c4:	3e 81       	ldd	r19, Y+6	; 0x06
 1c6:	22 30       	cpi	r18, 0x02	; 2
 1c8:	31 05       	cpc	r19, r1
 1ca:	2c f4       	brge	.+10     	; 0x1d6 <DIO_enumSetPinDirection+0x144>
 1cc:	8d 81       	ldd	r24, Y+5	; 0x05
 1ce:	9e 81       	ldd	r25, Y+6	; 0x06
 1d0:	00 97       	sbiw	r24, 0x00	; 0
 1d2:	69 f0       	breq	.+26     	; 0x1ee <DIO_enumSetPinDirection+0x15c>
 1d4:	63 c0       	rjmp	.+198    	; 0x29c <DIO_enumSetPinDirection+0x20a>
 1d6:	2d 81       	ldd	r18, Y+5	; 0x05
 1d8:	3e 81       	ldd	r19, Y+6	; 0x06
 1da:	22 30       	cpi	r18, 0x02	; 2
 1dc:	31 05       	cpc	r19, r1
 1de:	89 f1       	breq	.+98     	; 0x242 <DIO_enumSetPinDirection+0x1b0>
 1e0:	8d 81       	ldd	r24, Y+5	; 0x05
 1e2:	9e 81       	ldd	r25, Y+6	; 0x06
 1e4:	83 30       	cpi	r24, 0x03	; 3
 1e6:	91 05       	cpc	r25, r1
 1e8:	09 f4       	brne	.+2      	; 0x1ec <DIO_enumSetPinDirection+0x15a>
 1ea:	40 c0       	rjmp	.+128    	; 0x26c <DIO_enumSetPinDirection+0x1da>
 1ec:	57 c0       	rjmp	.+174    	; 0x29c <DIO_enumSetPinDirection+0x20a>
			{
			case DIO_PORTA : CLR_BIT(DDRA_Register, Copy_u8Pin); break;
 1ee:	aa e3       	ldi	r26, 0x3A	; 58
 1f0:	b0 e0       	ldi	r27, 0x00	; 0
 1f2:	ea e3       	ldi	r30, 0x3A	; 58
 1f4:	f0 e0       	ldi	r31, 0x00	; 0
 1f6:	80 81       	ld	r24, Z
 1f8:	48 2f       	mov	r20, r24
 1fa:	8b 81       	ldd	r24, Y+3	; 0x03
 1fc:	28 2f       	mov	r18, r24
 1fe:	30 e0       	ldi	r19, 0x00	; 0
 200:	81 e0       	ldi	r24, 0x01	; 1
 202:	90 e0       	ldi	r25, 0x00	; 0
 204:	02 2e       	mov	r0, r18
 206:	02 c0       	rjmp	.+4      	; 0x20c <DIO_enumSetPinDirection+0x17a>
 208:	88 0f       	add	r24, r24
 20a:	99 1f       	adc	r25, r25
 20c:	0a 94       	dec	r0
 20e:	e2 f7       	brpl	.-8      	; 0x208 <DIO_enumSetPinDirection+0x176>
 210:	80 95       	com	r24
 212:	84 23       	and	r24, r20
 214:	8c 93       	st	X, r24
 216:	42 c0       	rjmp	.+132    	; 0x29c <DIO_enumSetPinDirection+0x20a>
			case DIO_PORTB : CLR_BIT(DDRB_Register, Copy_u8Pin); break;
 218:	a7 e3       	ldi	r26, 0x37	; 55
 21a:	b0 e0       	ldi	r27, 0x00	; 0
 21c:	e7 e3       	ldi	r30, 0x37	; 55
 21e:	f0 e0       	ldi	r31, 0x00	; 0
 220:	80 81       	ld	r24, Z
 222:	48 2f       	mov	r20, r24
 224:	8b 81       	ldd	r24, Y+3	; 0x03
 226:	28 2f       	mov	r18, r24
 228:	30 e0       	ldi	r19, 0x00	; 0
 22a:	81 e0       	ldi	r24, 0x01	; 1
 22c:	90 e0       	ldi	r25, 0x00	; 0
 22e:	02 2e       	mov	r0, r18
 230:	02 c0       	rjmp	.+4      	; 0x236 <DIO_enumSetPinDirection+0x1a4>
 232:	88 0f       	add	r24, r24
 234:	99 1f       	adc	r25, r25
 236:	0a 94       	dec	r0
 238:	e2 f7       	brpl	.-8      	; 0x232 <DIO_enumSetPinDirection+0x1a0>
 23a:	80 95       	com	r24
 23c:	84 23       	and	r24, r20
 23e:	8c 93       	st	X, r24
 240:	2d c0       	rjmp	.+90     	; 0x29c <DIO_enumSetPinDirection+0x20a>
			case DIO_PORTC : CLR_BIT(DDRC_Register, Copy_u8Pin); break;
 242:	a4 e3       	ldi	r26, 0x34	; 52
 244:	b0 e0       	ldi	r27, 0x00	; 0
 246:	e4 e3       	ldi	r30, 0x34	; 52
 248:	f0 e0       	ldi	r31, 0x00	; 0
 24a:	80 81       	ld	r24, Z
 24c:	48 2f       	mov	r20, r24
 24e:	8b 81       	ldd	r24, Y+3	; 0x03
 250:	28 2f       	mov	r18, r24
 252:	30 e0       	ldi	r19, 0x00	; 0
 254:	81 e0       	ldi	r24, 0x01	; 1
 256:	90 e0       	ldi	r25, 0x00	; 0
 258:	02 2e       	mov	r0, r18
 25a:	02 c0       	rjmp	.+4      	; 0x260 <DIO_enumSetPinDirection+0x1ce>
 25c:	88 0f       	add	r24, r24
 25e:	99 1f       	adc	r25, r25
 260:	0a 94       	dec	r0
 262:	e2 f7       	brpl	.-8      	; 0x25c <DIO_enumSetPinDirection+0x1ca>
 264:	80 95       	com	r24
 266:	84 23       	and	r24, r20
 268:	8c 93       	st	X, r24
 26a:	18 c0       	rjmp	.+48     	; 0x29c <DIO_enumSetPinDirection+0x20a>
			case DIO_PORTD : CLR_BIT(DDRD_Register, Copy_u8Pin); break;
 26c:	a1 e3       	ldi	r26, 0x31	; 49
 26e:	b0 e0       	ldi	r27, 0x00	; 0
 270:	e1 e3       	ldi	r30, 0x31	; 49
 272:	f0 e0       	ldi	r31, 0x00	; 0
 274:	80 81       	ld	r24, Z
 276:	48 2f       	mov	r20, r24
 278:	8b 81       	ldd	r24, Y+3	; 0x03
 27a:	28 2f       	mov	r18, r24
 27c:	30 e0       	ldi	r19, 0x00	; 0
 27e:	81 e0       	ldi	r24, 0x01	; 1
 280:	90 e0       	ldi	r25, 0x00	; 0
 282:	02 2e       	mov	r0, r18
 284:	02 c0       	rjmp	.+4      	; 0x28a <DIO_enumSetPinDirection+0x1f8>
 286:	88 0f       	add	r24, r24
 288:	99 1f       	adc	r25, r25
 28a:	0a 94       	dec	r0
 28c:	e2 f7       	brpl	.-8      	; 0x286 <DIO_enumSetPinDirection+0x1f4>
 28e:	80 95       	com	r24
 290:	84 23       	and	r24, r20
 292:	8c 93       	st	X, r24
 294:	03 c0       	rjmp	.+6      	; 0x29c <DIO_enumSetPinDirection+0x20a>
			}			
		}
		
		else
		{
			LOC_enumState = DIO_NOK;
 296:	19 82       	std	Y+1, r1	; 0x01
 298:	01 c0       	rjmp	.+2      	; 0x29c <DIO_enumSetPinDirection+0x20a>
		}
	}
	
	else
	{
		LOC_enumState = DIO_NOK;
 29a:	19 82       	std	Y+1, r1	; 0x01
	}
	
	return LOC_enumState; 
 29c:	89 81       	ldd	r24, Y+1	; 0x01
}
 29e:	28 96       	adiw	r28, 0x08	; 8
 2a0:	0f b6       	in	r0, 0x3f	; 63
 2a2:	f8 94       	cli
 2a4:	de bf       	out	0x3e, r29	; 62
 2a6:	0f be       	out	0x3f, r0	; 63
 2a8:	cd bf       	out	0x3d, r28	; 61
 2aa:	cf 91       	pop	r28
 2ac:	df 91       	pop	r29
 2ae:	08 95       	ret

000002b0 <DIO_enumSetPinValue>:

DIO_ErrorStatus DIO_enumSetPinValue     (u8 Copy_u8Port, u8 Copy_u8Pin, u8 Copy_u8Value    )
{
 2b0:	df 93       	push	r29
 2b2:	cf 93       	push	r28
 2b4:	cd b7       	in	r28, 0x3d	; 61
 2b6:	de b7       	in	r29, 0x3e	; 62
 2b8:	28 97       	sbiw	r28, 0x08	; 8
 2ba:	0f b6       	in	r0, 0x3f	; 63
 2bc:	f8 94       	cli
 2be:	de bf       	out	0x3e, r29	; 62
 2c0:	0f be       	out	0x3f, r0	; 63
 2c2:	cd bf       	out	0x3d, r28	; 61
 2c4:	8a 83       	std	Y+2, r24	; 0x02
 2c6:	6b 83       	std	Y+3, r22	; 0x03
 2c8:	4c 83       	std	Y+4, r20	; 0x04
	DIO_ErrorStatus LOC_enumState = DIO_OK;
 2ca:	81 e0       	ldi	r24, 0x01	; 1
 2cc:	89 83       	std	Y+1, r24	; 0x01
	
	if (Copy_u8Port <= DIO_PORTD && Copy_u8Pin <= DIO_PIN7)
 2ce:	8a 81       	ldd	r24, Y+2	; 0x02
 2d0:	84 30       	cpi	r24, 0x04	; 4
 2d2:	08 f0       	brcs	.+2      	; 0x2d6 <DIO_enumSetPinValue+0x26>
 2d4:	f1 c0       	rjmp	.+482    	; 0x4b8 <DIO_enumSetPinValue+0x208>
 2d6:	8b 81       	ldd	r24, Y+3	; 0x03
 2d8:	88 30       	cpi	r24, 0x08	; 8
 2da:	08 f0       	brcs	.+2      	; 0x2de <DIO_enumSetPinValue+0x2e>
 2dc:	ed c0       	rjmp	.+474    	; 0x4b8 <DIO_enumSetPinValue+0x208>
	{
		if (Copy_u8Value == DIO_PIN_HIGH)
 2de:	8c 81       	ldd	r24, Y+4	; 0x04
 2e0:	81 30       	cpi	r24, 0x01	; 1
 2e2:	09 f0       	breq	.+2      	; 0x2e6 <DIO_enumSetPinValue+0x36>
 2e4:	6f c0       	rjmp	.+222    	; 0x3c4 <DIO_enumSetPinValue+0x114>
		{
			switch (Copy_u8Port)
 2e6:	8a 81       	ldd	r24, Y+2	; 0x02
 2e8:	28 2f       	mov	r18, r24
 2ea:	30 e0       	ldi	r19, 0x00	; 0
 2ec:	38 87       	std	Y+8, r19	; 0x08
 2ee:	2f 83       	std	Y+7, r18	; 0x07
 2f0:	8f 81       	ldd	r24, Y+7	; 0x07
 2f2:	98 85       	ldd	r25, Y+8	; 0x08
 2f4:	81 30       	cpi	r24, 0x01	; 1
 2f6:	91 05       	cpc	r25, r1
 2f8:	49 f1       	breq	.+82     	; 0x34c <DIO_enumSetPinValue+0x9c>
 2fa:	2f 81       	ldd	r18, Y+7	; 0x07
 2fc:	38 85       	ldd	r19, Y+8	; 0x08
 2fe:	22 30       	cpi	r18, 0x02	; 2
 300:	31 05       	cpc	r19, r1
 302:	2c f4       	brge	.+10     	; 0x30e <DIO_enumSetPinValue+0x5e>
 304:	8f 81       	ldd	r24, Y+7	; 0x07
 306:	98 85       	ldd	r25, Y+8	; 0x08
 308:	00 97       	sbiw	r24, 0x00	; 0
 30a:	61 f0       	breq	.+24     	; 0x324 <DIO_enumSetPinValue+0x74>
 30c:	d6 c0       	rjmp	.+428    	; 0x4ba <DIO_enumSetPinValue+0x20a>
 30e:	2f 81       	ldd	r18, Y+7	; 0x07
 310:	38 85       	ldd	r19, Y+8	; 0x08
 312:	22 30       	cpi	r18, 0x02	; 2
 314:	31 05       	cpc	r19, r1
 316:	71 f1       	breq	.+92     	; 0x374 <DIO_enumSetPinValue+0xc4>
 318:	8f 81       	ldd	r24, Y+7	; 0x07
 31a:	98 85       	ldd	r25, Y+8	; 0x08
 31c:	83 30       	cpi	r24, 0x03	; 3
 31e:	91 05       	cpc	r25, r1
 320:	e9 f1       	breq	.+122    	; 0x39c <DIO_enumSetPinValue+0xec>
 322:	cb c0       	rjmp	.+406    	; 0x4ba <DIO_enumSetPinValue+0x20a>
			{
			case DIO_PORTA : SET_BIT(PORTA_Register, Copy_u8Pin); break;
 324:	ab e3       	ldi	r26, 0x3B	; 59
 326:	b0 e0       	ldi	r27, 0x00	; 0
 328:	eb e3       	ldi	r30, 0x3B	; 59
 32a:	f0 e0       	ldi	r31, 0x00	; 0
 32c:	80 81       	ld	r24, Z
 32e:	48 2f       	mov	r20, r24
 330:	8b 81       	ldd	r24, Y+3	; 0x03
 332:	28 2f       	mov	r18, r24
 334:	30 e0       	ldi	r19, 0x00	; 0
 336:	81 e0       	ldi	r24, 0x01	; 1
 338:	90 e0       	ldi	r25, 0x00	; 0
 33a:	02 2e       	mov	r0, r18
 33c:	02 c0       	rjmp	.+4      	; 0x342 <DIO_enumSetPinValue+0x92>
 33e:	88 0f       	add	r24, r24
 340:	99 1f       	adc	r25, r25
 342:	0a 94       	dec	r0
 344:	e2 f7       	brpl	.-8      	; 0x33e <DIO_enumSetPinValue+0x8e>
 346:	84 2b       	or	r24, r20
 348:	8c 93       	st	X, r24
 34a:	b7 c0       	rjmp	.+366    	; 0x4ba <DIO_enumSetPinValue+0x20a>
			case DIO_PORTB : SET_BIT(PORTB_Register, Copy_u8Pin); break;
 34c:	a8 e3       	ldi	r26, 0x38	; 56
 34e:	b0 e0       	ldi	r27, 0x00	; 0
 350:	e8 e3       	ldi	r30, 0x38	; 56
 352:	f0 e0       	ldi	r31, 0x00	; 0
 354:	80 81       	ld	r24, Z
 356:	48 2f       	mov	r20, r24
 358:	8b 81       	ldd	r24, Y+3	; 0x03
 35a:	28 2f       	mov	r18, r24
 35c:	30 e0       	ldi	r19, 0x00	; 0
 35e:	81 e0       	ldi	r24, 0x01	; 1
 360:	90 e0       	ldi	r25, 0x00	; 0
 362:	02 2e       	mov	r0, r18
 364:	02 c0       	rjmp	.+4      	; 0x36a <DIO_enumSetPinValue+0xba>
 366:	88 0f       	add	r24, r24
 368:	99 1f       	adc	r25, r25
 36a:	0a 94       	dec	r0
 36c:	e2 f7       	brpl	.-8      	; 0x366 <DIO_enumSetPinValue+0xb6>
 36e:	84 2b       	or	r24, r20
 370:	8c 93       	st	X, r24
 372:	a3 c0       	rjmp	.+326    	; 0x4ba <DIO_enumSetPinValue+0x20a>
			case DIO_PORTC : SET_BIT(PORTC_Register, Copy_u8Pin); break;
 374:	a5 e3       	ldi	r26, 0x35	; 53
 376:	b0 e0       	ldi	r27, 0x00	; 0
 378:	e5 e3       	ldi	r30, 0x35	; 53
 37a:	f0 e0       	ldi	r31, 0x00	; 0
 37c:	80 81       	ld	r24, Z
 37e:	48 2f       	mov	r20, r24
 380:	8b 81       	ldd	r24, Y+3	; 0x03
 382:	28 2f       	mov	r18, r24
 384:	30 e0       	ldi	r19, 0x00	; 0
 386:	81 e0       	ldi	r24, 0x01	; 1
 388:	90 e0       	ldi	r25, 0x00	; 0
 38a:	02 2e       	mov	r0, r18
 38c:	02 c0       	rjmp	.+4      	; 0x392 <DIO_enumSetPinValue+0xe2>
 38e:	88 0f       	add	r24, r24
 390:	99 1f       	adc	r25, r25
 392:	0a 94       	dec	r0
 394:	e2 f7       	brpl	.-8      	; 0x38e <DIO_enumSetPinValue+0xde>
 396:	84 2b       	or	r24, r20
 398:	8c 93       	st	X, r24
 39a:	8f c0       	rjmp	.+286    	; 0x4ba <DIO_enumSetPinValue+0x20a>
			case DIO_PORTD : SET_BIT(PORTD_Register, Copy_u8Pin); break;
 39c:	a2 e3       	ldi	r26, 0x32	; 50
 39e:	b0 e0       	ldi	r27, 0x00	; 0
 3a0:	e2 e3       	ldi	r30, 0x32	; 50
 3a2:	f0 e0       	ldi	r31, 0x00	; 0
 3a4:	80 81       	ld	r24, Z
 3a6:	48 2f       	mov	r20, r24
 3a8:	8b 81       	ldd	r24, Y+3	; 0x03
 3aa:	28 2f       	mov	r18, r24
 3ac:	30 e0       	ldi	r19, 0x00	; 0
 3ae:	81 e0       	ldi	r24, 0x01	; 1
 3b0:	90 e0       	ldi	r25, 0x00	; 0
 3b2:	02 2e       	mov	r0, r18
 3b4:	02 c0       	rjmp	.+4      	; 0x3ba <DIO_enumSetPinValue+0x10a>
 3b6:	88 0f       	add	r24, r24
 3b8:	99 1f       	adc	r25, r25
 3ba:	0a 94       	dec	r0
 3bc:	e2 f7       	brpl	.-8      	; 0x3b6 <DIO_enumSetPinValue+0x106>
 3be:	84 2b       	or	r24, r20
 3c0:	8c 93       	st	X, r24
 3c2:	7b c0       	rjmp	.+246    	; 0x4ba <DIO_enumSetPinValue+0x20a>
			}
		}
		
		else if (Copy_u8Value == DIO_PIN_LOW)
 3c4:	8c 81       	ldd	r24, Y+4	; 0x04
 3c6:	88 23       	and	r24, r24
 3c8:	09 f0       	breq	.+2      	; 0x3cc <DIO_enumSetPinValue+0x11c>
 3ca:	74 c0       	rjmp	.+232    	; 0x4b4 <DIO_enumSetPinValue+0x204>
		{
			switch (Copy_u8Port)
 3cc:	8a 81       	ldd	r24, Y+2	; 0x02
 3ce:	28 2f       	mov	r18, r24
 3d0:	30 e0       	ldi	r19, 0x00	; 0
 3d2:	3e 83       	std	Y+6, r19	; 0x06
 3d4:	2d 83       	std	Y+5, r18	; 0x05
 3d6:	8d 81       	ldd	r24, Y+5	; 0x05
 3d8:	9e 81       	ldd	r25, Y+6	; 0x06
 3da:	81 30       	cpi	r24, 0x01	; 1
 3dc:	91 05       	cpc	r25, r1
 3de:	59 f1       	breq	.+86     	; 0x436 <DIO_enumSetPinValue+0x186>
 3e0:	2d 81       	ldd	r18, Y+5	; 0x05
 3e2:	3e 81       	ldd	r19, Y+6	; 0x06
 3e4:	22 30       	cpi	r18, 0x02	; 2
 3e6:	31 05       	cpc	r19, r1
 3e8:	2c f4       	brge	.+10     	; 0x3f4 <DIO_enumSetPinValue+0x144>
 3ea:	8d 81       	ldd	r24, Y+5	; 0x05
 3ec:	9e 81       	ldd	r25, Y+6	; 0x06
 3ee:	00 97       	sbiw	r24, 0x00	; 0
 3f0:	69 f0       	breq	.+26     	; 0x40c <DIO_enumSetPinValue+0x15c>
 3f2:	63 c0       	rjmp	.+198    	; 0x4ba <DIO_enumSetPinValue+0x20a>
 3f4:	2d 81       	ldd	r18, Y+5	; 0x05
 3f6:	3e 81       	ldd	r19, Y+6	; 0x06
 3f8:	22 30       	cpi	r18, 0x02	; 2
 3fa:	31 05       	cpc	r19, r1
 3fc:	89 f1       	breq	.+98     	; 0x460 <DIO_enumSetPinValue+0x1b0>
 3fe:	8d 81       	ldd	r24, Y+5	; 0x05
 400:	9e 81       	ldd	r25, Y+6	; 0x06
 402:	83 30       	cpi	r24, 0x03	; 3
 404:	91 05       	cpc	r25, r1
 406:	09 f4       	brne	.+2      	; 0x40a <DIO_enumSetPinValue+0x15a>
 408:	40 c0       	rjmp	.+128    	; 0x48a <DIO_enumSetPinValue+0x1da>
 40a:	57 c0       	rjmp	.+174    	; 0x4ba <DIO_enumSetPinValue+0x20a>
			{
			case DIO_PORTA : CLR_BIT(PORTA_Register, Copy_u8Pin); break;
 40c:	ab e3       	ldi	r26, 0x3B	; 59
 40e:	b0 e0       	ldi	r27, 0x00	; 0
 410:	eb e3       	ldi	r30, 0x3B	; 59
 412:	f0 e0       	ldi	r31, 0x00	; 0
 414:	80 81       	ld	r24, Z
 416:	48 2f       	mov	r20, r24
 418:	8b 81       	ldd	r24, Y+3	; 0x03
 41a:	28 2f       	mov	r18, r24
 41c:	30 e0       	ldi	r19, 0x00	; 0
 41e:	81 e0       	ldi	r24, 0x01	; 1
 420:	90 e0       	ldi	r25, 0x00	; 0
 422:	02 2e       	mov	r0, r18
 424:	02 c0       	rjmp	.+4      	; 0x42a <DIO_enumSetPinValue+0x17a>
 426:	88 0f       	add	r24, r24
 428:	99 1f       	adc	r25, r25
 42a:	0a 94       	dec	r0
 42c:	e2 f7       	brpl	.-8      	; 0x426 <DIO_enumSetPinValue+0x176>
 42e:	80 95       	com	r24
 430:	84 23       	and	r24, r20
 432:	8c 93       	st	X, r24
 434:	42 c0       	rjmp	.+132    	; 0x4ba <DIO_enumSetPinValue+0x20a>
			case DIO_PORTB : CLR_BIT(PORTB_Register, Copy_u8Pin); break;
 436:	a8 e3       	ldi	r26, 0x38	; 56
 438:	b0 e0       	ldi	r27, 0x00	; 0
 43a:	e8 e3       	ldi	r30, 0x38	; 56
 43c:	f0 e0       	ldi	r31, 0x00	; 0
 43e:	80 81       	ld	r24, Z
 440:	48 2f       	mov	r20, r24
 442:	8b 81       	ldd	r24, Y+3	; 0x03
 444:	28 2f       	mov	r18, r24
 446:	30 e0       	ldi	r19, 0x00	; 0
 448:	81 e0       	ldi	r24, 0x01	; 1
 44a:	90 e0       	ldi	r25, 0x00	; 0
 44c:	02 2e       	mov	r0, r18
 44e:	02 c0       	rjmp	.+4      	; 0x454 <DIO_enumSetPinValue+0x1a4>
 450:	88 0f       	add	r24, r24
 452:	99 1f       	adc	r25, r25
 454:	0a 94       	dec	r0
 456:	e2 f7       	brpl	.-8      	; 0x450 <DIO_enumSetPinValue+0x1a0>
 458:	80 95       	com	r24
 45a:	84 23       	and	r24, r20
 45c:	8c 93       	st	X, r24
 45e:	2d c0       	rjmp	.+90     	; 0x4ba <DIO_enumSetPinValue+0x20a>
			case DIO_PORTC : CLR_BIT(PORTC_Register, Copy_u8Pin); break;
 460:	a5 e3       	ldi	r26, 0x35	; 53
 462:	b0 e0       	ldi	r27, 0x00	; 0
 464:	e5 e3       	ldi	r30, 0x35	; 53
 466:	f0 e0       	ldi	r31, 0x00	; 0
 468:	80 81       	ld	r24, Z
 46a:	48 2f       	mov	r20, r24
 46c:	8b 81       	ldd	r24, Y+3	; 0x03
 46e:	28 2f       	mov	r18, r24
 470:	30 e0       	ldi	r19, 0x00	; 0
 472:	81 e0       	ldi	r24, 0x01	; 1
 474:	90 e0       	ldi	r25, 0x00	; 0
 476:	02 2e       	mov	r0, r18
 478:	02 c0       	rjmp	.+4      	; 0x47e <DIO_enumSetPinValue+0x1ce>
 47a:	88 0f       	add	r24, r24
 47c:	99 1f       	adc	r25, r25
 47e:	0a 94       	dec	r0
 480:	e2 f7       	brpl	.-8      	; 0x47a <DIO_enumSetPinValue+0x1ca>
 482:	80 95       	com	r24
 484:	84 23       	and	r24, r20
 486:	8c 93       	st	X, r24
 488:	18 c0       	rjmp	.+48     	; 0x4ba <DIO_enumSetPinValue+0x20a>
			case DIO_PORTD : CLR_BIT(PORTD_Register, Copy_u8Pin); break;
 48a:	a2 e3       	ldi	r26, 0x32	; 50
 48c:	b0 e0       	ldi	r27, 0x00	; 0
 48e:	e2 e3       	ldi	r30, 0x32	; 50
 490:	f0 e0       	ldi	r31, 0x00	; 0
 492:	80 81       	ld	r24, Z
 494:	48 2f       	mov	r20, r24
 496:	8b 81       	ldd	r24, Y+3	; 0x03
 498:	28 2f       	mov	r18, r24
 49a:	30 e0       	ldi	r19, 0x00	; 0
 49c:	81 e0       	ldi	r24, 0x01	; 1
 49e:	90 e0       	ldi	r25, 0x00	; 0
 4a0:	02 2e       	mov	r0, r18
 4a2:	02 c0       	rjmp	.+4      	; 0x4a8 <DIO_enumSetPinValue+0x1f8>
 4a4:	88 0f       	add	r24, r24
 4a6:	99 1f       	adc	r25, r25
 4a8:	0a 94       	dec	r0
 4aa:	e2 f7       	brpl	.-8      	; 0x4a4 <DIO_enumSetPinValue+0x1f4>
 4ac:	80 95       	com	r24
 4ae:	84 23       	and	r24, r20
 4b0:	8c 93       	st	X, r24
 4b2:	03 c0       	rjmp	.+6      	; 0x4ba <DIO_enumSetPinValue+0x20a>
			}			
		}
		
		else
		{
			LOC_enumState = DIO_NOK;
 4b4:	19 82       	std	Y+1, r1	; 0x01
 4b6:	01 c0       	rjmp	.+2      	; 0x4ba <DIO_enumSetPinValue+0x20a>
		}
	}
	
	else
	{
		LOC_enumState = DIO_NOK;
 4b8:	19 82       	std	Y+1, r1	; 0x01
	}
	
	return LOC_enumState; 	
 4ba:	89 81       	ldd	r24, Y+1	; 0x01
}
 4bc:	28 96       	adiw	r28, 0x08	; 8
 4be:	0f b6       	in	r0, 0x3f	; 63
 4c0:	f8 94       	cli
 4c2:	de bf       	out	0x3e, r29	; 62
 4c4:	0f be       	out	0x3f, r0	; 63
 4c6:	cd bf       	out	0x3d, r28	; 61
 4c8:	cf 91       	pop	r28
 4ca:	df 91       	pop	r29
 4cc:	08 95       	ret

000004ce <DIO_enumGetPinValue>:

DIO_ErrorStatus DIO_enumGetPinValue     (u8 Copy_u8Port, u8 Copy_u8Pin, u8 *Copy_u8PtrData )
{
 4ce:	df 93       	push	r29
 4d0:	cf 93       	push	r28
 4d2:	cd b7       	in	r28, 0x3d	; 61
 4d4:	de b7       	in	r29, 0x3e	; 62
 4d6:	27 97       	sbiw	r28, 0x07	; 7
 4d8:	0f b6       	in	r0, 0x3f	; 63
 4da:	f8 94       	cli
 4dc:	de bf       	out	0x3e, r29	; 62
 4de:	0f be       	out	0x3f, r0	; 63
 4e0:	cd bf       	out	0x3d, r28	; 61
 4e2:	8a 83       	std	Y+2, r24	; 0x02
 4e4:	6b 83       	std	Y+3, r22	; 0x03
 4e6:	5d 83       	std	Y+5, r21	; 0x05
 4e8:	4c 83       	std	Y+4, r20	; 0x04
	DIO_ErrorStatus LOC_enumState = DIO_OK;
 4ea:	81 e0       	ldi	r24, 0x01	; 1
 4ec:	89 83       	std	Y+1, r24	; 0x01
	
	if (Copy_u8Port <= DIO_PORTD && Copy_u8Pin <= DIO_PIN7)
 4ee:	8a 81       	ldd	r24, Y+2	; 0x02
 4f0:	84 30       	cpi	r24, 0x04	; 4
 4f2:	08 f0       	brcs	.+2      	; 0x4f6 <DIO_enumGetPinValue+0x28>
 4f4:	a6 c0       	rjmp	.+332    	; 0x642 <DIO_enumGetPinValue+0x174>
 4f6:	8b 81       	ldd	r24, Y+3	; 0x03
 4f8:	88 30       	cpi	r24, 0x08	; 8
 4fa:	08 f0       	brcs	.+2      	; 0x4fe <DIO_enumGetPinValue+0x30>
 4fc:	a2 c0       	rjmp	.+324    	; 0x642 <DIO_enumGetPinValue+0x174>
	{
		switch (Copy_u8Port)
 4fe:	8a 81       	ldd	r24, Y+2	; 0x02
 500:	28 2f       	mov	r18, r24
 502:	30 e0       	ldi	r19, 0x00	; 0
 504:	3f 83       	std	Y+7, r19	; 0x07
 506:	2e 83       	std	Y+6, r18	; 0x06
 508:	4e 81       	ldd	r20, Y+6	; 0x06
 50a:	5f 81       	ldd	r21, Y+7	; 0x07
 50c:	41 30       	cpi	r20, 0x01	; 1
 50e:	51 05       	cpc	r21, r1
 510:	c1 f1       	breq	.+112    	; 0x582 <DIO_enumGetPinValue+0xb4>
 512:	8e 81       	ldd	r24, Y+6	; 0x06
 514:	9f 81       	ldd	r25, Y+7	; 0x07
 516:	82 30       	cpi	r24, 0x02	; 2
 518:	91 05       	cpc	r25, r1
 51a:	34 f4       	brge	.+12     	; 0x528 <DIO_enumGetPinValue+0x5a>
 51c:	2e 81       	ldd	r18, Y+6	; 0x06
 51e:	3f 81       	ldd	r19, Y+7	; 0x07
 520:	21 15       	cp	r18, r1
 522:	31 05       	cpc	r19, r1
 524:	71 f0       	breq	.+28     	; 0x542 <DIO_enumGetPinValue+0x74>
 526:	8e c0       	rjmp	.+284    	; 0x644 <DIO_enumGetPinValue+0x176>
 528:	4e 81       	ldd	r20, Y+6	; 0x06
 52a:	5f 81       	ldd	r21, Y+7	; 0x07
 52c:	42 30       	cpi	r20, 0x02	; 2
 52e:	51 05       	cpc	r21, r1
 530:	09 f4       	brne	.+2      	; 0x534 <DIO_enumGetPinValue+0x66>
 532:	47 c0       	rjmp	.+142    	; 0x5c2 <DIO_enumGetPinValue+0xf4>
 534:	8e 81       	ldd	r24, Y+6	; 0x06
 536:	9f 81       	ldd	r25, Y+7	; 0x07
 538:	83 30       	cpi	r24, 0x03	; 3
 53a:	91 05       	cpc	r25, r1
 53c:	09 f4       	brne	.+2      	; 0x540 <DIO_enumGetPinValue+0x72>
 53e:	61 c0       	rjmp	.+194    	; 0x602 <DIO_enumGetPinValue+0x134>
 540:	81 c0       	rjmp	.+258    	; 0x644 <DIO_enumGetPinValue+0x176>
		{
		case DIO_PORTA : *Copy_u8PtrData = GET_BIT(PINA_Register, Copy_u8Pin); break;
 542:	e9 e3       	ldi	r30, 0x39	; 57
 544:	f0 e0       	ldi	r31, 0x00	; 0
 546:	80 81       	ld	r24, Z
 548:	48 2f       	mov	r20, r24
 54a:	50 e0       	ldi	r21, 0x00	; 0
 54c:	8b 81       	ldd	r24, Y+3	; 0x03
 54e:	28 2f       	mov	r18, r24
 550:	30 e0       	ldi	r19, 0x00	; 0
 552:	81 e0       	ldi	r24, 0x01	; 1
 554:	90 e0       	ldi	r25, 0x00	; 0
 556:	02 c0       	rjmp	.+4      	; 0x55c <DIO_enumGetPinValue+0x8e>
 558:	88 0f       	add	r24, r24
 55a:	99 1f       	adc	r25, r25
 55c:	2a 95       	dec	r18
 55e:	e2 f7       	brpl	.-8      	; 0x558 <DIO_enumGetPinValue+0x8a>
 560:	9a 01       	movw	r18, r20
 562:	28 23       	and	r18, r24
 564:	39 23       	and	r19, r25
 566:	8b 81       	ldd	r24, Y+3	; 0x03
 568:	88 2f       	mov	r24, r24
 56a:	90 e0       	ldi	r25, 0x00	; 0
 56c:	a9 01       	movw	r20, r18
 56e:	02 c0       	rjmp	.+4      	; 0x574 <DIO_enumGetPinValue+0xa6>
 570:	55 95       	asr	r21
 572:	47 95       	ror	r20
 574:	8a 95       	dec	r24
 576:	e2 f7       	brpl	.-8      	; 0x570 <DIO_enumGetPinValue+0xa2>
 578:	ca 01       	movw	r24, r20
 57a:	ec 81       	ldd	r30, Y+4	; 0x04
 57c:	fd 81       	ldd	r31, Y+5	; 0x05
 57e:	80 83       	st	Z, r24
 580:	61 c0       	rjmp	.+194    	; 0x644 <DIO_enumGetPinValue+0x176>
		case DIO_PORTB : *Copy_u8PtrData = GET_BIT(PINB_Register, Copy_u8Pin); break;
 582:	e6 e3       	ldi	r30, 0x36	; 54
 584:	f0 e0       	ldi	r31, 0x00	; 0
 586:	80 81       	ld	r24, Z
 588:	48 2f       	mov	r20, r24
 58a:	50 e0       	ldi	r21, 0x00	; 0
 58c:	8b 81       	ldd	r24, Y+3	; 0x03
 58e:	28 2f       	mov	r18, r24
 590:	30 e0       	ldi	r19, 0x00	; 0
 592:	81 e0       	ldi	r24, 0x01	; 1
 594:	90 e0       	ldi	r25, 0x00	; 0
 596:	02 c0       	rjmp	.+4      	; 0x59c <DIO_enumGetPinValue+0xce>
 598:	88 0f       	add	r24, r24
 59a:	99 1f       	adc	r25, r25
 59c:	2a 95       	dec	r18
 59e:	e2 f7       	brpl	.-8      	; 0x598 <DIO_enumGetPinValue+0xca>
 5a0:	9a 01       	movw	r18, r20
 5a2:	28 23       	and	r18, r24
 5a4:	39 23       	and	r19, r25
 5a6:	8b 81       	ldd	r24, Y+3	; 0x03
 5a8:	88 2f       	mov	r24, r24
 5aa:	90 e0       	ldi	r25, 0x00	; 0
 5ac:	a9 01       	movw	r20, r18
 5ae:	02 c0       	rjmp	.+4      	; 0x5b4 <DIO_enumGetPinValue+0xe6>
 5b0:	55 95       	asr	r21
 5b2:	47 95       	ror	r20
 5b4:	8a 95       	dec	r24
 5b6:	e2 f7       	brpl	.-8      	; 0x5b0 <DIO_enumGetPinValue+0xe2>
 5b8:	ca 01       	movw	r24, r20
 5ba:	ec 81       	ldd	r30, Y+4	; 0x04
 5bc:	fd 81       	ldd	r31, Y+5	; 0x05
 5be:	80 83       	st	Z, r24
 5c0:	41 c0       	rjmp	.+130    	; 0x644 <DIO_enumGetPinValue+0x176>
		case DIO_PORTC : *Copy_u8PtrData = GET_BIT(PINC_Register, Copy_u8Pin); break;
 5c2:	e3 e3       	ldi	r30, 0x33	; 51
 5c4:	f0 e0       	ldi	r31, 0x00	; 0
 5c6:	80 81       	ld	r24, Z
 5c8:	48 2f       	mov	r20, r24
 5ca:	50 e0       	ldi	r21, 0x00	; 0
 5cc:	8b 81       	ldd	r24, Y+3	; 0x03
 5ce:	28 2f       	mov	r18, r24
 5d0:	30 e0       	ldi	r19, 0x00	; 0
 5d2:	81 e0       	ldi	r24, 0x01	; 1
 5d4:	90 e0       	ldi	r25, 0x00	; 0
 5d6:	02 c0       	rjmp	.+4      	; 0x5dc <DIO_enumGetPinValue+0x10e>
 5d8:	88 0f       	add	r24, r24
 5da:	99 1f       	adc	r25, r25
 5dc:	2a 95       	dec	r18
 5de:	e2 f7       	brpl	.-8      	; 0x5d8 <DIO_enumGetPinValue+0x10a>
 5e0:	9a 01       	movw	r18, r20
 5e2:	28 23       	and	r18, r24
 5e4:	39 23       	and	r19, r25
 5e6:	8b 81       	ldd	r24, Y+3	; 0x03
 5e8:	88 2f       	mov	r24, r24
 5ea:	90 e0       	ldi	r25, 0x00	; 0
 5ec:	a9 01       	movw	r20, r18
 5ee:	02 c0       	rjmp	.+4      	; 0x5f4 <DIO_enumGetPinValue+0x126>
 5f0:	55 95       	asr	r21
 5f2:	47 95       	ror	r20
 5f4:	8a 95       	dec	r24
 5f6:	e2 f7       	brpl	.-8      	; 0x5f0 <DIO_enumGetPinValue+0x122>
 5f8:	ca 01       	movw	r24, r20
 5fa:	ec 81       	ldd	r30, Y+4	; 0x04
 5fc:	fd 81       	ldd	r31, Y+5	; 0x05
 5fe:	80 83       	st	Z, r24
 600:	21 c0       	rjmp	.+66     	; 0x644 <DIO_enumGetPinValue+0x176>
		case DIO_PORTD : *Copy_u8PtrData = GET_BIT(PIND_Register, Copy_u8Pin); break;
 602:	e0 e3       	ldi	r30, 0x30	; 48
 604:	f0 e0       	ldi	r31, 0x00	; 0
 606:	80 81       	ld	r24, Z
 608:	48 2f       	mov	r20, r24
 60a:	50 e0       	ldi	r21, 0x00	; 0
 60c:	8b 81       	ldd	r24, Y+3	; 0x03
 60e:	28 2f       	mov	r18, r24
 610:	30 e0       	ldi	r19, 0x00	; 0
 612:	81 e0       	ldi	r24, 0x01	; 1
 614:	90 e0       	ldi	r25, 0x00	; 0
 616:	02 c0       	rjmp	.+4      	; 0x61c <DIO_enumGetPinValue+0x14e>
 618:	88 0f       	add	r24, r24
 61a:	99 1f       	adc	r25, r25
 61c:	2a 95       	dec	r18
 61e:	e2 f7       	brpl	.-8      	; 0x618 <DIO_enumGetPinValue+0x14a>
 620:	9a 01       	movw	r18, r20
 622:	28 23       	and	r18, r24
 624:	39 23       	and	r19, r25
 626:	8b 81       	ldd	r24, Y+3	; 0x03
 628:	88 2f       	mov	r24, r24
 62a:	90 e0       	ldi	r25, 0x00	; 0
 62c:	a9 01       	movw	r20, r18
 62e:	02 c0       	rjmp	.+4      	; 0x634 <DIO_enumGetPinValue+0x166>
 630:	55 95       	asr	r21
 632:	47 95       	ror	r20
 634:	8a 95       	dec	r24
 636:	e2 f7       	brpl	.-8      	; 0x630 <DIO_enumGetPinValue+0x162>
 638:	ca 01       	movw	r24, r20
 63a:	ec 81       	ldd	r30, Y+4	; 0x04
 63c:	fd 81       	ldd	r31, Y+5	; 0x05
 63e:	80 83       	st	Z, r24
 640:	01 c0       	rjmp	.+2      	; 0x644 <DIO_enumGetPinValue+0x176>
		}
	}
	
	else
	{
		LOC_enumState = DIO_NOK;
 642:	19 82       	std	Y+1, r1	; 0x01
	}
	
	return LOC_enumState; 	
 644:	89 81       	ldd	r24, Y+1	; 0x01
}
 646:	27 96       	adiw	r28, 0x07	; 7
 648:	0f b6       	in	r0, 0x3f	; 63
 64a:	f8 94       	cli
 64c:	de bf       	out	0x3e, r29	; 62
 64e:	0f be       	out	0x3f, r0	; 63
 650:	cd bf       	out	0x3d, r28	; 61
 652:	cf 91       	pop	r28
 654:	df 91       	pop	r29
 656:	08 95       	ret

00000658 <DIO_enumTogglePinValue>:

DIO_ErrorStatus DIO_enumTogglePinValue  (u8 Copy_u8Port, u8 Copy_u8Pin                               )
{
 658:	df 93       	push	r29
 65a:	cf 93       	push	r28
 65c:	00 d0       	rcall	.+0      	; 0x65e <DIO_enumTogglePinValue+0x6>
 65e:	00 d0       	rcall	.+0      	; 0x660 <DIO_enumTogglePinValue+0x8>
 660:	0f 92       	push	r0
 662:	cd b7       	in	r28, 0x3d	; 61
 664:	de b7       	in	r29, 0x3e	; 62
 666:	8a 83       	std	Y+2, r24	; 0x02
 668:	6b 83       	std	Y+3, r22	; 0x03
	DIO_ErrorStatus LOC_enumState = DIO_OK;
 66a:	81 e0       	ldi	r24, 0x01	; 1
 66c:	89 83       	std	Y+1, r24	; 0x01
	
	if (Copy_u8Port <= DIO_PORTD && Copy_u8Pin <= DIO_PIN7)
 66e:	8a 81       	ldd	r24, Y+2	; 0x02
 670:	84 30       	cpi	r24, 0x04	; 4
 672:	08 f0       	brcs	.+2      	; 0x676 <DIO_enumTogglePinValue+0x1e>
 674:	73 c0       	rjmp	.+230    	; 0x75c <DIO_enumTogglePinValue+0x104>
 676:	8b 81       	ldd	r24, Y+3	; 0x03
 678:	88 30       	cpi	r24, 0x08	; 8
 67a:	08 f0       	brcs	.+2      	; 0x67e <DIO_enumTogglePinValue+0x26>
 67c:	6f c0       	rjmp	.+222    	; 0x75c <DIO_enumTogglePinValue+0x104>
	{
		switch (Copy_u8Port)
 67e:	8a 81       	ldd	r24, Y+2	; 0x02
 680:	28 2f       	mov	r18, r24
 682:	30 e0       	ldi	r19, 0x00	; 0
 684:	3d 83       	std	Y+5, r19	; 0x05
 686:	2c 83       	std	Y+4, r18	; 0x04
 688:	8c 81       	ldd	r24, Y+4	; 0x04
 68a:	9d 81       	ldd	r25, Y+5	; 0x05
 68c:	81 30       	cpi	r24, 0x01	; 1
 68e:	91 05       	cpc	r25, r1
 690:	49 f1       	breq	.+82     	; 0x6e4 <DIO_enumTogglePinValue+0x8c>
 692:	2c 81       	ldd	r18, Y+4	; 0x04
 694:	3d 81       	ldd	r19, Y+5	; 0x05
 696:	22 30       	cpi	r18, 0x02	; 2
 698:	31 05       	cpc	r19, r1
 69a:	2c f4       	brge	.+10     	; 0x6a6 <DIO_enumTogglePinValue+0x4e>
 69c:	8c 81       	ldd	r24, Y+4	; 0x04
 69e:	9d 81       	ldd	r25, Y+5	; 0x05
 6a0:	00 97       	sbiw	r24, 0x00	; 0
 6a2:	61 f0       	breq	.+24     	; 0x6bc <DIO_enumTogglePinValue+0x64>
 6a4:	5c c0       	rjmp	.+184    	; 0x75e <DIO_enumTogglePinValue+0x106>
 6a6:	2c 81       	ldd	r18, Y+4	; 0x04
 6a8:	3d 81       	ldd	r19, Y+5	; 0x05
 6aa:	22 30       	cpi	r18, 0x02	; 2
 6ac:	31 05       	cpc	r19, r1
 6ae:	71 f1       	breq	.+92     	; 0x70c <DIO_enumTogglePinValue+0xb4>
 6b0:	8c 81       	ldd	r24, Y+4	; 0x04
 6b2:	9d 81       	ldd	r25, Y+5	; 0x05
 6b4:	83 30       	cpi	r24, 0x03	; 3
 6b6:	91 05       	cpc	r25, r1
 6b8:	e9 f1       	breq	.+122    	; 0x734 <DIO_enumTogglePinValue+0xdc>
 6ba:	51 c0       	rjmp	.+162    	; 0x75e <DIO_enumTogglePinValue+0x106>
		{
		case DIO_PORTA : TOG_BIT(PORTA_Register, Copy_u8Pin); break;
 6bc:	ab e3       	ldi	r26, 0x3B	; 59
 6be:	b0 e0       	ldi	r27, 0x00	; 0
 6c0:	eb e3       	ldi	r30, 0x3B	; 59
 6c2:	f0 e0       	ldi	r31, 0x00	; 0
 6c4:	80 81       	ld	r24, Z
 6c6:	48 2f       	mov	r20, r24
 6c8:	8b 81       	ldd	r24, Y+3	; 0x03
 6ca:	28 2f       	mov	r18, r24
 6cc:	30 e0       	ldi	r19, 0x00	; 0
 6ce:	81 e0       	ldi	r24, 0x01	; 1
 6d0:	90 e0       	ldi	r25, 0x00	; 0
 6d2:	02 2e       	mov	r0, r18
 6d4:	02 c0       	rjmp	.+4      	; 0x6da <DIO_enumTogglePinValue+0x82>
 6d6:	88 0f       	add	r24, r24
 6d8:	99 1f       	adc	r25, r25
 6da:	0a 94       	dec	r0
 6dc:	e2 f7       	brpl	.-8      	; 0x6d6 <DIO_enumTogglePinValue+0x7e>
 6de:	84 27       	eor	r24, r20
 6e0:	8c 93       	st	X, r24
 6e2:	3d c0       	rjmp	.+122    	; 0x75e <DIO_enumTogglePinValue+0x106>
		case DIO_PORTB : TOG_BIT(PORTB_Register, Copy_u8Pin); break;
 6e4:	a8 e3       	ldi	r26, 0x38	; 56
 6e6:	b0 e0       	ldi	r27, 0x00	; 0
 6e8:	e8 e3       	ldi	r30, 0x38	; 56
 6ea:	f0 e0       	ldi	r31, 0x00	; 0
 6ec:	80 81       	ld	r24, Z
 6ee:	48 2f       	mov	r20, r24
 6f0:	8b 81       	ldd	r24, Y+3	; 0x03
 6f2:	28 2f       	mov	r18, r24
 6f4:	30 e0       	ldi	r19, 0x00	; 0
 6f6:	81 e0       	ldi	r24, 0x01	; 1
 6f8:	90 e0       	ldi	r25, 0x00	; 0
 6fa:	02 2e       	mov	r0, r18
 6fc:	02 c0       	rjmp	.+4      	; 0x702 <DIO_enumTogglePinValue+0xaa>
 6fe:	88 0f       	add	r24, r24
 700:	99 1f       	adc	r25, r25
 702:	0a 94       	dec	r0
 704:	e2 f7       	brpl	.-8      	; 0x6fe <DIO_enumTogglePinValue+0xa6>
 706:	84 27       	eor	r24, r20
 708:	8c 93       	st	X, r24
 70a:	29 c0       	rjmp	.+82     	; 0x75e <DIO_enumTogglePinValue+0x106>
		case DIO_PORTC : TOG_BIT(PORTC_Register, Copy_u8Pin); break;
 70c:	a5 e3       	ldi	r26, 0x35	; 53
 70e:	b0 e0       	ldi	r27, 0x00	; 0
 710:	e5 e3       	ldi	r30, 0x35	; 53
 712:	f0 e0       	ldi	r31, 0x00	; 0
 714:	80 81       	ld	r24, Z
 716:	48 2f       	mov	r20, r24
 718:	8b 81       	ldd	r24, Y+3	; 0x03
 71a:	28 2f       	mov	r18, r24
 71c:	30 e0       	ldi	r19, 0x00	; 0
 71e:	81 e0       	ldi	r24, 0x01	; 1
 720:	90 e0       	ldi	r25, 0x00	; 0
 722:	02 2e       	mov	r0, r18
 724:	02 c0       	rjmp	.+4      	; 0x72a <DIO_enumTogglePinValue+0xd2>
 726:	88 0f       	add	r24, r24
 728:	99 1f       	adc	r25, r25
 72a:	0a 94       	dec	r0
 72c:	e2 f7       	brpl	.-8      	; 0x726 <DIO_enumTogglePinValue+0xce>
 72e:	84 27       	eor	r24, r20
 730:	8c 93       	st	X, r24
 732:	15 c0       	rjmp	.+42     	; 0x75e <DIO_enumTogglePinValue+0x106>
		case DIO_PORTD : TOG_BIT(PORTD_Register, Copy_u8Pin); break;
 734:	a2 e3       	ldi	r26, 0x32	; 50
 736:	b0 e0       	ldi	r27, 0x00	; 0
 738:	e2 e3       	ldi	r30, 0x32	; 50
 73a:	f0 e0       	ldi	r31, 0x00	; 0
 73c:	80 81       	ld	r24, Z
 73e:	48 2f       	mov	r20, r24
 740:	8b 81       	ldd	r24, Y+3	; 0x03
 742:	28 2f       	mov	r18, r24
 744:	30 e0       	ldi	r19, 0x00	; 0
 746:	81 e0       	ldi	r24, 0x01	; 1
 748:	90 e0       	ldi	r25, 0x00	; 0
 74a:	02 2e       	mov	r0, r18
 74c:	02 c0       	rjmp	.+4      	; 0x752 <DIO_enumTogglePinValue+0xfa>
 74e:	88 0f       	add	r24, r24
 750:	99 1f       	adc	r25, r25
 752:	0a 94       	dec	r0
 754:	e2 f7       	brpl	.-8      	; 0x74e <DIO_enumTogglePinValue+0xf6>
 756:	84 27       	eor	r24, r20
 758:	8c 93       	st	X, r24
 75a:	01 c0       	rjmp	.+2      	; 0x75e <DIO_enumTogglePinValue+0x106>
		}		
	}

	else
	{
		LOC_enumState = DIO_NOK;
 75c:	19 82       	std	Y+1, r1	; 0x01
	}
	
	return LOC_enumState; 
 75e:	89 81       	ldd	r24, Y+1	; 0x01
}
 760:	0f 90       	pop	r0
 762:	0f 90       	pop	r0
 764:	0f 90       	pop	r0
 766:	0f 90       	pop	r0
 768:	0f 90       	pop	r0
 76a:	cf 91       	pop	r28
 76c:	df 91       	pop	r29
 76e:	08 95       	ret

00000770 <DIO_enumSetPortDirection>:

/*<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< IO PORT <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<*/

DIO_ErrorStatus DIO_enumSetPortDirection (u8 Copy_u8Port, u8 Copy_u8Direction)
{
 770:	df 93       	push	r29
 772:	cf 93       	push	r28
 774:	00 d0       	rcall	.+0      	; 0x776 <DIO_enumSetPortDirection+0x6>
 776:	00 d0       	rcall	.+0      	; 0x778 <DIO_enumSetPortDirection+0x8>
 778:	0f 92       	push	r0
 77a:	cd b7       	in	r28, 0x3d	; 61
 77c:	de b7       	in	r29, 0x3e	; 62
 77e:	8a 83       	std	Y+2, r24	; 0x02
 780:	6b 83       	std	Y+3, r22	; 0x03
	DIO_ErrorStatus LOC_enumState = DIO_OK;
 782:	81 e0       	ldi	r24, 0x01	; 1
 784:	89 83       	std	Y+1, r24	; 0x01
	
	if (Copy_u8Port <= DIO_PORTD)
 786:	8a 81       	ldd	r24, Y+2	; 0x02
 788:	84 30       	cpi	r24, 0x04	; 4
 78a:	a8 f5       	brcc	.+106    	; 0x7f6 <DIO_enumSetPortDirection+0x86>
	{
		switch (Copy_u8Port)
 78c:	8a 81       	ldd	r24, Y+2	; 0x02
 78e:	28 2f       	mov	r18, r24
 790:	30 e0       	ldi	r19, 0x00	; 0
 792:	3d 83       	std	Y+5, r19	; 0x05
 794:	2c 83       	std	Y+4, r18	; 0x04
 796:	8c 81       	ldd	r24, Y+4	; 0x04
 798:	9d 81       	ldd	r25, Y+5	; 0x05
 79a:	81 30       	cpi	r24, 0x01	; 1
 79c:	91 05       	cpc	r25, r1
 79e:	d1 f0       	breq	.+52     	; 0x7d4 <DIO_enumSetPortDirection+0x64>
 7a0:	2c 81       	ldd	r18, Y+4	; 0x04
 7a2:	3d 81       	ldd	r19, Y+5	; 0x05
 7a4:	22 30       	cpi	r18, 0x02	; 2
 7a6:	31 05       	cpc	r19, r1
 7a8:	2c f4       	brge	.+10     	; 0x7b4 <DIO_enumSetPortDirection+0x44>
 7aa:	8c 81       	ldd	r24, Y+4	; 0x04
 7ac:	9d 81       	ldd	r25, Y+5	; 0x05
 7ae:	00 97       	sbiw	r24, 0x00	; 0
 7b0:	61 f0       	breq	.+24     	; 0x7ca <DIO_enumSetPortDirection+0x5a>
 7b2:	1f c0       	rjmp	.+62     	; 0x7f2 <DIO_enumSetPortDirection+0x82>
 7b4:	2c 81       	ldd	r18, Y+4	; 0x04
 7b6:	3d 81       	ldd	r19, Y+5	; 0x05
 7b8:	22 30       	cpi	r18, 0x02	; 2
 7ba:	31 05       	cpc	r19, r1
 7bc:	81 f0       	breq	.+32     	; 0x7de <DIO_enumSetPortDirection+0x6e>
 7be:	8c 81       	ldd	r24, Y+4	; 0x04
 7c0:	9d 81       	ldd	r25, Y+5	; 0x05
 7c2:	83 30       	cpi	r24, 0x03	; 3
 7c4:	91 05       	cpc	r25, r1
 7c6:	81 f0       	breq	.+32     	; 0x7e8 <DIO_enumSetPortDirection+0x78>
 7c8:	14 c0       	rjmp	.+40     	; 0x7f2 <DIO_enumSetPortDirection+0x82>
		{
		case DIO_PORTA : DDRA_Register = Copy_u8Direction; break;
 7ca:	ea e3       	ldi	r30, 0x3A	; 58
 7cc:	f0 e0       	ldi	r31, 0x00	; 0
 7ce:	8b 81       	ldd	r24, Y+3	; 0x03
 7d0:	80 83       	st	Z, r24
 7d2:	12 c0       	rjmp	.+36     	; 0x7f8 <DIO_enumSetPortDirection+0x88>
		case DIO_PORTB : DDRB_Register = Copy_u8Direction; break;
 7d4:	e7 e3       	ldi	r30, 0x37	; 55
 7d6:	f0 e0       	ldi	r31, 0x00	; 0
 7d8:	8b 81       	ldd	r24, Y+3	; 0x03
 7da:	80 83       	st	Z, r24
 7dc:	0d c0       	rjmp	.+26     	; 0x7f8 <DIO_enumSetPortDirection+0x88>
		case DIO_PORTC : DDRC_Register = Copy_u8Direction; break;
 7de:	e4 e3       	ldi	r30, 0x34	; 52
 7e0:	f0 e0       	ldi	r31, 0x00	; 0
 7e2:	8b 81       	ldd	r24, Y+3	; 0x03
 7e4:	80 83       	st	Z, r24
 7e6:	08 c0       	rjmp	.+16     	; 0x7f8 <DIO_enumSetPortDirection+0x88>
		case DIO_PORTD : DDRD_Register = Copy_u8Direction; break;
 7e8:	e1 e3       	ldi	r30, 0x31	; 49
 7ea:	f0 e0       	ldi	r31, 0x00	; 0
 7ec:	8b 81       	ldd	r24, Y+3	; 0x03
 7ee:	80 83       	st	Z, r24
 7f0:	03 c0       	rjmp	.+6      	; 0x7f8 <DIO_enumSetPortDirection+0x88>
		default        : LOC_enumState = DIO_NOK         ; break;
 7f2:	19 82       	std	Y+1, r1	; 0x01
 7f4:	01 c0       	rjmp	.+2      	; 0x7f8 <DIO_enumSetPortDirection+0x88>
		}
	}
	
	else
	{
		LOC_enumState = DIO_NOK;
 7f6:	19 82       	std	Y+1, r1	; 0x01
	}
	
	return LOC_enumState; 
 7f8:	89 81       	ldd	r24, Y+1	; 0x01
}
 7fa:	0f 90       	pop	r0
 7fc:	0f 90       	pop	r0
 7fe:	0f 90       	pop	r0
 800:	0f 90       	pop	r0
 802:	0f 90       	pop	r0
 804:	cf 91       	pop	r28
 806:	df 91       	pop	r29
 808:	08 95       	ret

0000080a <DIO_enumSetPortValue>:

DIO_ErrorStatus DIO_enumSetPortValue     (u8 Copy_u8Port, u8 Copy_u8Value    )
{
 80a:	df 93       	push	r29
 80c:	cf 93       	push	r28
 80e:	00 d0       	rcall	.+0      	; 0x810 <DIO_enumSetPortValue+0x6>
 810:	00 d0       	rcall	.+0      	; 0x812 <DIO_enumSetPortValue+0x8>
 812:	0f 92       	push	r0
 814:	cd b7       	in	r28, 0x3d	; 61
 816:	de b7       	in	r29, 0x3e	; 62
 818:	8a 83       	std	Y+2, r24	; 0x02
 81a:	6b 83       	std	Y+3, r22	; 0x03
	DIO_ErrorStatus LOC_enumState = DIO_OK;
 81c:	81 e0       	ldi	r24, 0x01	; 1
 81e:	89 83       	std	Y+1, r24	; 0x01
	
	if (Copy_u8Port <= DIO_PORTD)
 820:	8a 81       	ldd	r24, Y+2	; 0x02
 822:	84 30       	cpi	r24, 0x04	; 4
 824:	a8 f5       	brcc	.+106    	; 0x890 <__stack+0x31>
	{
		switch (Copy_u8Port)
 826:	8a 81       	ldd	r24, Y+2	; 0x02
 828:	28 2f       	mov	r18, r24
 82a:	30 e0       	ldi	r19, 0x00	; 0
 82c:	3d 83       	std	Y+5, r19	; 0x05
 82e:	2c 83       	std	Y+4, r18	; 0x04
 830:	8c 81       	ldd	r24, Y+4	; 0x04
 832:	9d 81       	ldd	r25, Y+5	; 0x05
 834:	81 30       	cpi	r24, 0x01	; 1
 836:	91 05       	cpc	r25, r1
 838:	d1 f0       	breq	.+52     	; 0x86e <__stack+0xf>
 83a:	2c 81       	ldd	r18, Y+4	; 0x04
 83c:	3d 81       	ldd	r19, Y+5	; 0x05
 83e:	22 30       	cpi	r18, 0x02	; 2
 840:	31 05       	cpc	r19, r1
 842:	2c f4       	brge	.+10     	; 0x84e <DIO_enumSetPortValue+0x44>
 844:	8c 81       	ldd	r24, Y+4	; 0x04
 846:	9d 81       	ldd	r25, Y+5	; 0x05
 848:	00 97       	sbiw	r24, 0x00	; 0
 84a:	61 f0       	breq	.+24     	; 0x864 <__stack+0x5>
 84c:	1f c0       	rjmp	.+62     	; 0x88c <__stack+0x2d>
 84e:	2c 81       	ldd	r18, Y+4	; 0x04
 850:	3d 81       	ldd	r19, Y+5	; 0x05
 852:	22 30       	cpi	r18, 0x02	; 2
 854:	31 05       	cpc	r19, r1
 856:	81 f0       	breq	.+32     	; 0x878 <__stack+0x19>
 858:	8c 81       	ldd	r24, Y+4	; 0x04
 85a:	9d 81       	ldd	r25, Y+5	; 0x05
 85c:	83 30       	cpi	r24, 0x03	; 3
 85e:	91 05       	cpc	r25, r1
 860:	81 f0       	breq	.+32     	; 0x882 <__stack+0x23>
 862:	14 c0       	rjmp	.+40     	; 0x88c <__stack+0x2d>
		{
		case DIO_PORTA : PORTA_Register = Copy_u8Value; break;
 864:	eb e3       	ldi	r30, 0x3B	; 59
 866:	f0 e0       	ldi	r31, 0x00	; 0
 868:	8b 81       	ldd	r24, Y+3	; 0x03
 86a:	80 83       	st	Z, r24
 86c:	12 c0       	rjmp	.+36     	; 0x892 <__stack+0x33>
		case DIO_PORTB : PORTB_Register = Copy_u8Value; break;
 86e:	e8 e3       	ldi	r30, 0x38	; 56
 870:	f0 e0       	ldi	r31, 0x00	; 0
 872:	8b 81       	ldd	r24, Y+3	; 0x03
 874:	80 83       	st	Z, r24
 876:	0d c0       	rjmp	.+26     	; 0x892 <__stack+0x33>
		case DIO_PORTC : PORTC_Register = Copy_u8Value; break;
 878:	e5 e3       	ldi	r30, 0x35	; 53
 87a:	f0 e0       	ldi	r31, 0x00	; 0
 87c:	8b 81       	ldd	r24, Y+3	; 0x03
 87e:	80 83       	st	Z, r24
 880:	08 c0       	rjmp	.+16     	; 0x892 <__stack+0x33>
		case DIO_PORTD : PORTD_Register = Copy_u8Value; break;
 882:	e2 e3       	ldi	r30, 0x32	; 50
 884:	f0 e0       	ldi	r31, 0x00	; 0
 886:	8b 81       	ldd	r24, Y+3	; 0x03
 888:	80 83       	st	Z, r24
 88a:	03 c0       	rjmp	.+6      	; 0x892 <__stack+0x33>
		default        : LOC_enumState  = DIO_NOK          ; break;
 88c:	19 82       	std	Y+1, r1	; 0x01
 88e:	01 c0       	rjmp	.+2      	; 0x892 <__stack+0x33>
		}
	}
	
	else
	{
		LOC_enumState = DIO_NOK;
 890:	19 82       	std	Y+1, r1	; 0x01
	}
	
	return LOC_enumState; 
 892:	89 81       	ldd	r24, Y+1	; 0x01
}
 894:	0f 90       	pop	r0
 896:	0f 90       	pop	r0
 898:	0f 90       	pop	r0
 89a:	0f 90       	pop	r0
 89c:	0f 90       	pop	r0
 89e:	cf 91       	pop	r28
 8a0:	df 91       	pop	r29
 8a2:	08 95       	ret

000008a4 <DIO_enumGetPortValue>:

DIO_ErrorStatus DIO_enumGetPortValue     (u8 Copy_u8Port, u8 *Copy_u8PtrData )
{
 8a4:	df 93       	push	r29
 8a6:	cf 93       	push	r28
 8a8:	00 d0       	rcall	.+0      	; 0x8aa <DIO_enumGetPortValue+0x6>
 8aa:	00 d0       	rcall	.+0      	; 0x8ac <DIO_enumGetPortValue+0x8>
 8ac:	00 d0       	rcall	.+0      	; 0x8ae <DIO_enumGetPortValue+0xa>
 8ae:	cd b7       	in	r28, 0x3d	; 61
 8b0:	de b7       	in	r29, 0x3e	; 62
 8b2:	8a 83       	std	Y+2, r24	; 0x02
 8b4:	7c 83       	std	Y+4, r23	; 0x04
 8b6:	6b 83       	std	Y+3, r22	; 0x03
	DIO_ErrorStatus LOC_enumState = DIO_OK;
 8b8:	81 e0       	ldi	r24, 0x01	; 1
 8ba:	89 83       	std	Y+1, r24	; 0x01
	
	if (Copy_u8Port <= DIO_PORTD)
 8bc:	8a 81       	ldd	r24, Y+2	; 0x02
 8be:	84 30       	cpi	r24, 0x04	; 4
 8c0:	e8 f5       	brcc	.+122    	; 0x93c <DIO_enumGetPortValue+0x98>
	{
		switch (Copy_u8Port)
 8c2:	8a 81       	ldd	r24, Y+2	; 0x02
 8c4:	28 2f       	mov	r18, r24
 8c6:	30 e0       	ldi	r19, 0x00	; 0
 8c8:	3e 83       	std	Y+6, r19	; 0x06
 8ca:	2d 83       	std	Y+5, r18	; 0x05
 8cc:	8d 81       	ldd	r24, Y+5	; 0x05
 8ce:	9e 81       	ldd	r25, Y+6	; 0x06
 8d0:	81 30       	cpi	r24, 0x01	; 1
 8d2:	91 05       	cpc	r25, r1
 8d4:	e1 f0       	breq	.+56     	; 0x90e <DIO_enumGetPortValue+0x6a>
 8d6:	2d 81       	ldd	r18, Y+5	; 0x05
 8d8:	3e 81       	ldd	r19, Y+6	; 0x06
 8da:	22 30       	cpi	r18, 0x02	; 2
 8dc:	31 05       	cpc	r19, r1
 8de:	2c f4       	brge	.+10     	; 0x8ea <DIO_enumGetPortValue+0x46>
 8e0:	8d 81       	ldd	r24, Y+5	; 0x05
 8e2:	9e 81       	ldd	r25, Y+6	; 0x06
 8e4:	00 97       	sbiw	r24, 0x00	; 0
 8e6:	61 f0       	breq	.+24     	; 0x900 <DIO_enumGetPortValue+0x5c>
 8e8:	27 c0       	rjmp	.+78     	; 0x938 <DIO_enumGetPortValue+0x94>
 8ea:	2d 81       	ldd	r18, Y+5	; 0x05
 8ec:	3e 81       	ldd	r19, Y+6	; 0x06
 8ee:	22 30       	cpi	r18, 0x02	; 2
 8f0:	31 05       	cpc	r19, r1
 8f2:	a1 f0       	breq	.+40     	; 0x91c <DIO_enumGetPortValue+0x78>
 8f4:	8d 81       	ldd	r24, Y+5	; 0x05
 8f6:	9e 81       	ldd	r25, Y+6	; 0x06
 8f8:	83 30       	cpi	r24, 0x03	; 3
 8fa:	91 05       	cpc	r25, r1
 8fc:	b1 f0       	breq	.+44     	; 0x92a <DIO_enumGetPortValue+0x86>
 8fe:	1c c0       	rjmp	.+56     	; 0x938 <DIO_enumGetPortValue+0x94>
		{
		case DIO_PORTA : *Copy_u8PtrData = PINA_Register; break;
 900:	e9 e3       	ldi	r30, 0x39	; 57
 902:	f0 e0       	ldi	r31, 0x00	; 0
 904:	80 81       	ld	r24, Z
 906:	eb 81       	ldd	r30, Y+3	; 0x03
 908:	fc 81       	ldd	r31, Y+4	; 0x04
 90a:	80 83       	st	Z, r24
 90c:	18 c0       	rjmp	.+48     	; 0x93e <DIO_enumGetPortValue+0x9a>
		case DIO_PORTB : *Copy_u8PtrData = PINB_Register; break;
 90e:	e6 e3       	ldi	r30, 0x36	; 54
 910:	f0 e0       	ldi	r31, 0x00	; 0
 912:	80 81       	ld	r24, Z
 914:	eb 81       	ldd	r30, Y+3	; 0x03
 916:	fc 81       	ldd	r31, Y+4	; 0x04
 918:	80 83       	st	Z, r24
 91a:	11 c0       	rjmp	.+34     	; 0x93e <DIO_enumGetPortValue+0x9a>
		case DIO_PORTC : *Copy_u8PtrData = PINC_Register; break;
 91c:	e3 e3       	ldi	r30, 0x33	; 51
 91e:	f0 e0       	ldi	r31, 0x00	; 0
 920:	80 81       	ld	r24, Z
 922:	eb 81       	ldd	r30, Y+3	; 0x03
 924:	fc 81       	ldd	r31, Y+4	; 0x04
 926:	80 83       	st	Z, r24
 928:	0a c0       	rjmp	.+20     	; 0x93e <DIO_enumGetPortValue+0x9a>
		case DIO_PORTD : *Copy_u8PtrData = PIND_Register; break;
 92a:	e0 e3       	ldi	r30, 0x30	; 48
 92c:	f0 e0       	ldi	r31, 0x00	; 0
 92e:	80 81       	ld	r24, Z
 930:	eb 81       	ldd	r30, Y+3	; 0x03
 932:	fc 81       	ldd	r31, Y+4	; 0x04
 934:	80 83       	st	Z, r24
 936:	03 c0       	rjmp	.+6      	; 0x93e <DIO_enumGetPortValue+0x9a>
		default        : LOC_enumState        = DIO_NOK      ; break;
 938:	19 82       	std	Y+1, r1	; 0x01
 93a:	01 c0       	rjmp	.+2      	; 0x93e <DIO_enumGetPortValue+0x9a>
		}
	}
	else
	{
		LOC_enumState = DIO_NOK;
 93c:	19 82       	std	Y+1, r1	; 0x01
	}
	
	return LOC_enumState;
 93e:	89 81       	ldd	r24, Y+1	; 0x01
}
 940:	26 96       	adiw	r28, 0x06	; 6
 942:	0f b6       	in	r0, 0x3f	; 63
 944:	f8 94       	cli
 946:	de bf       	out	0x3e, r29	; 62
 948:	0f be       	out	0x3f, r0	; 63
 94a:	cd bf       	out	0x3d, r28	; 61
 94c:	cf 91       	pop	r28
 94e:	df 91       	pop	r29
 950:	08 95       	ret

00000952 <DIO_enumTogglePortValue>:

DIO_ErrorStatus DIO_enumTogglePortValue  (u8 Copy_u8Port                               )
{
 952:	df 93       	push	r29
 954:	cf 93       	push	r28
 956:	00 d0       	rcall	.+0      	; 0x958 <DIO_enumTogglePortValue+0x6>
 958:	00 d0       	rcall	.+0      	; 0x95a <DIO_enumTogglePortValue+0x8>
 95a:	cd b7       	in	r28, 0x3d	; 61
 95c:	de b7       	in	r29, 0x3e	; 62
 95e:	8a 83       	std	Y+2, r24	; 0x02
	DIO_ErrorStatus LOC_enumState = DIO_OK;
 960:	81 e0       	ldi	r24, 0x01	; 1
 962:	89 83       	std	Y+1, r24	; 0x01
	
	if (Copy_u8Port <= DIO_PORTD)
 964:	8a 81       	ldd	r24, Y+2	; 0x02
 966:	84 30       	cpi	r24, 0x04	; 4
 968:	08 f0       	brcs	.+2      	; 0x96c <DIO_enumTogglePortValue+0x1a>
 96a:	41 c0       	rjmp	.+130    	; 0x9ee <DIO_enumTogglePortValue+0x9c>
	{
		switch (Copy_u8Port)
 96c:	8a 81       	ldd	r24, Y+2	; 0x02
 96e:	28 2f       	mov	r18, r24
 970:	30 e0       	ldi	r19, 0x00	; 0
 972:	3c 83       	std	Y+4, r19	; 0x04
 974:	2b 83       	std	Y+3, r18	; 0x03
 976:	8b 81       	ldd	r24, Y+3	; 0x03
 978:	9c 81       	ldd	r25, Y+4	; 0x04
 97a:	81 30       	cpi	r24, 0x01	; 1
 97c:	91 05       	cpc	r25, r1
 97e:	e9 f0       	breq	.+58     	; 0x9ba <DIO_enumTogglePortValue+0x68>
 980:	2b 81       	ldd	r18, Y+3	; 0x03
 982:	3c 81       	ldd	r19, Y+4	; 0x04
 984:	22 30       	cpi	r18, 0x02	; 2
 986:	31 05       	cpc	r19, r1
 988:	2c f4       	brge	.+10     	; 0x994 <DIO_enumTogglePortValue+0x42>
 98a:	8b 81       	ldd	r24, Y+3	; 0x03
 98c:	9c 81       	ldd	r25, Y+4	; 0x04
 98e:	00 97       	sbiw	r24, 0x00	; 0
 990:	61 f0       	breq	.+24     	; 0x9aa <DIO_enumTogglePortValue+0x58>
 992:	2b c0       	rjmp	.+86     	; 0x9ea <DIO_enumTogglePortValue+0x98>
 994:	2b 81       	ldd	r18, Y+3	; 0x03
 996:	3c 81       	ldd	r19, Y+4	; 0x04
 998:	22 30       	cpi	r18, 0x02	; 2
 99a:	31 05       	cpc	r19, r1
 99c:	b1 f0       	breq	.+44     	; 0x9ca <DIO_enumTogglePortValue+0x78>
 99e:	8b 81       	ldd	r24, Y+3	; 0x03
 9a0:	9c 81       	ldd	r25, Y+4	; 0x04
 9a2:	83 30       	cpi	r24, 0x03	; 3
 9a4:	91 05       	cpc	r25, r1
 9a6:	c9 f0       	breq	.+50     	; 0x9da <DIO_enumTogglePortValue+0x88>
 9a8:	20 c0       	rjmp	.+64     	; 0x9ea <DIO_enumTogglePortValue+0x98>
		{
		case DIO_PORTA : PORTA_Register = ~ PORTA_Register; break;
 9aa:	ab e3       	ldi	r26, 0x3B	; 59
 9ac:	b0 e0       	ldi	r27, 0x00	; 0
 9ae:	eb e3       	ldi	r30, 0x3B	; 59
 9b0:	f0 e0       	ldi	r31, 0x00	; 0
 9b2:	80 81       	ld	r24, Z
 9b4:	80 95       	com	r24
 9b6:	8c 93       	st	X, r24
 9b8:	1b c0       	rjmp	.+54     	; 0x9f0 <DIO_enumTogglePortValue+0x9e>
		case DIO_PORTB : PORTB_Register = ~ PORTB_Register; break;
 9ba:	a8 e3       	ldi	r26, 0x38	; 56
 9bc:	b0 e0       	ldi	r27, 0x00	; 0
 9be:	e8 e3       	ldi	r30, 0x38	; 56
 9c0:	f0 e0       	ldi	r31, 0x00	; 0
 9c2:	80 81       	ld	r24, Z
 9c4:	80 95       	com	r24
 9c6:	8c 93       	st	X, r24
 9c8:	13 c0       	rjmp	.+38     	; 0x9f0 <DIO_enumTogglePortValue+0x9e>
		case DIO_PORTC : PORTC_Register = ~ PORTC_Register; break;
 9ca:	a5 e3       	ldi	r26, 0x35	; 53
 9cc:	b0 e0       	ldi	r27, 0x00	; 0
 9ce:	e5 e3       	ldi	r30, 0x35	; 53
 9d0:	f0 e0       	ldi	r31, 0x00	; 0
 9d2:	80 81       	ld	r24, Z
 9d4:	80 95       	com	r24
 9d6:	8c 93       	st	X, r24
 9d8:	0b c0       	rjmp	.+22     	; 0x9f0 <DIO_enumTogglePortValue+0x9e>
		case DIO_PORTD : PORTD_Register = ~ PORTD_Register; break;
 9da:	a2 e3       	ldi	r26, 0x32	; 50
 9dc:	b0 e0       	ldi	r27, 0x00	; 0
 9de:	e2 e3       	ldi	r30, 0x32	; 50
 9e0:	f0 e0       	ldi	r31, 0x00	; 0
 9e2:	80 81       	ld	r24, Z
 9e4:	80 95       	com	r24
 9e6:	8c 93       	st	X, r24
 9e8:	03 c0       	rjmp	.+6      	; 0x9f0 <DIO_enumTogglePortValue+0x9e>
		default        : LOC_enumState  = DIO_NOK         ; break;
 9ea:	19 82       	std	Y+1, r1	; 0x01
 9ec:	01 c0       	rjmp	.+2      	; 0x9f0 <DIO_enumTogglePortValue+0x9e>
		}		
	}
	
	else
	{
		LOC_enumState = DIO_NOK;
 9ee:	19 82       	std	Y+1, r1	; 0x01
	}
	
	return LOC_enumState;
 9f0:	89 81       	ldd	r24, Y+1	; 0x01
}
 9f2:	0f 90       	pop	r0
 9f4:	0f 90       	pop	r0
 9f6:	0f 90       	pop	r0
 9f8:	0f 90       	pop	r0
 9fa:	cf 91       	pop	r28
 9fc:	df 91       	pop	r29
 9fe:	08 95       	ret

00000a00 <DIO_enumWritHighNibbles>:

/*<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< IO NIBBLES <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<*/

DIO_ErrorStatus DIO_enumWritHighNibbles (u8 Copy_u8Port, u8 Copy_u8Value)
{
 a00:	df 93       	push	r29
 a02:	cf 93       	push	r28
 a04:	00 d0       	rcall	.+0      	; 0xa06 <DIO_enumWritHighNibbles+0x6>
 a06:	00 d0       	rcall	.+0      	; 0xa08 <DIO_enumWritHighNibbles+0x8>
 a08:	0f 92       	push	r0
 a0a:	cd b7       	in	r28, 0x3d	; 61
 a0c:	de b7       	in	r29, 0x3e	; 62
 a0e:	8a 83       	std	Y+2, r24	; 0x02
 a10:	6b 83       	std	Y+3, r22	; 0x03
	DIO_ErrorStatus LOC_enumState = DIO_OK;
 a12:	81 e0       	ldi	r24, 0x01	; 1
 a14:	89 83       	std	Y+1, r24	; 0x01
	
	if (Copy_u8Port <= DIO_PORTD)
 a16:	8a 81       	ldd	r24, Y+2	; 0x02
 a18:	84 30       	cpi	r24, 0x04	; 4
 a1a:	08 f0       	brcs	.+2      	; 0xa1e <DIO_enumWritHighNibbles+0x1e>
 a1c:	65 c0       	rjmp	.+202    	; 0xae8 <DIO_enumWritHighNibbles+0xe8>
	{
		Copy_u8Value <<= 4;
 a1e:	8b 81       	ldd	r24, Y+3	; 0x03
 a20:	82 95       	swap	r24
 a22:	80 7f       	andi	r24, 0xF0	; 240
 a24:	8b 83       	std	Y+3, r24	; 0x03
		
		switch (Copy_u8Port)
 a26:	8a 81       	ldd	r24, Y+2	; 0x02
 a28:	28 2f       	mov	r18, r24
 a2a:	30 e0       	ldi	r19, 0x00	; 0
 a2c:	3d 83       	std	Y+5, r19	; 0x05
 a2e:	2c 83       	std	Y+4, r18	; 0x04
 a30:	8c 81       	ldd	r24, Y+4	; 0x04
 a32:	9d 81       	ldd	r25, Y+5	; 0x05
 a34:	81 30       	cpi	r24, 0x01	; 1
 a36:	91 05       	cpc	r25, r1
 a38:	29 f1       	breq	.+74     	; 0xa84 <DIO_enumWritHighNibbles+0x84>
 a3a:	2c 81       	ldd	r18, Y+4	; 0x04
 a3c:	3d 81       	ldd	r19, Y+5	; 0x05
 a3e:	22 30       	cpi	r18, 0x02	; 2
 a40:	31 05       	cpc	r19, r1
 a42:	2c f4       	brge	.+10     	; 0xa4e <DIO_enumWritHighNibbles+0x4e>
 a44:	8c 81       	ldd	r24, Y+4	; 0x04
 a46:	9d 81       	ldd	r25, Y+5	; 0x05
 a48:	00 97       	sbiw	r24, 0x00	; 0
 a4a:	61 f0       	breq	.+24     	; 0xa64 <DIO_enumWritHighNibbles+0x64>
 a4c:	4b c0       	rjmp	.+150    	; 0xae4 <DIO_enumWritHighNibbles+0xe4>
 a4e:	2c 81       	ldd	r18, Y+4	; 0x04
 a50:	3d 81       	ldd	r19, Y+5	; 0x05
 a52:	22 30       	cpi	r18, 0x02	; 2
 a54:	31 05       	cpc	r19, r1
 a56:	31 f1       	breq	.+76     	; 0xaa4 <DIO_enumWritHighNibbles+0xa4>
 a58:	8c 81       	ldd	r24, Y+4	; 0x04
 a5a:	9d 81       	ldd	r25, Y+5	; 0x05
 a5c:	83 30       	cpi	r24, 0x03	; 3
 a5e:	91 05       	cpc	r25, r1
 a60:	89 f1       	breq	.+98     	; 0xac4 <DIO_enumWritHighNibbles+0xc4>
 a62:	40 c0       	rjmp	.+128    	; 0xae4 <DIO_enumWritHighNibbles+0xe4>
		{
		case DIO_PORTA : 
			PORTA_Register &= 0x0f;
 a64:	ab e3       	ldi	r26, 0x3B	; 59
 a66:	b0 e0       	ldi	r27, 0x00	; 0
 a68:	eb e3       	ldi	r30, 0x3B	; 59
 a6a:	f0 e0       	ldi	r31, 0x00	; 0
 a6c:	80 81       	ld	r24, Z
 a6e:	8f 70       	andi	r24, 0x0F	; 15
 a70:	8c 93       	st	X, r24
			PORTA_Register |= Copy_u8Value;
 a72:	ab e3       	ldi	r26, 0x3B	; 59
 a74:	b0 e0       	ldi	r27, 0x00	; 0
 a76:	eb e3       	ldi	r30, 0x3B	; 59
 a78:	f0 e0       	ldi	r31, 0x00	; 0
 a7a:	90 81       	ld	r25, Z
 a7c:	8b 81       	ldd	r24, Y+3	; 0x03
 a7e:	89 2b       	or	r24, r25
 a80:	8c 93       	st	X, r24
 a82:	33 c0       	rjmp	.+102    	; 0xaea <DIO_enumWritHighNibbles+0xea>
		    break; 
		case DIO_PORTB :
		    PORTB_Register &= 0x0f;
 a84:	a8 e3       	ldi	r26, 0x38	; 56
 a86:	b0 e0       	ldi	r27, 0x00	; 0
 a88:	e8 e3       	ldi	r30, 0x38	; 56
 a8a:	f0 e0       	ldi	r31, 0x00	; 0
 a8c:	80 81       	ld	r24, Z
 a8e:	8f 70       	andi	r24, 0x0F	; 15
 a90:	8c 93       	st	X, r24
			PORTB_Register |= Copy_u8Value;
 a92:	a8 e3       	ldi	r26, 0x38	; 56
 a94:	b0 e0       	ldi	r27, 0x00	; 0
 a96:	e8 e3       	ldi	r30, 0x38	; 56
 a98:	f0 e0       	ldi	r31, 0x00	; 0
 a9a:	90 81       	ld	r25, Z
 a9c:	8b 81       	ldd	r24, Y+3	; 0x03
 a9e:	89 2b       	or	r24, r25
 aa0:	8c 93       	st	X, r24
 aa2:	23 c0       	rjmp	.+70     	; 0xaea <DIO_enumWritHighNibbles+0xea>
		    break; 
		case DIO_PORTC :
			PORTC_Register &= 0x0f;
 aa4:	a5 e3       	ldi	r26, 0x35	; 53
 aa6:	b0 e0       	ldi	r27, 0x00	; 0
 aa8:	e5 e3       	ldi	r30, 0x35	; 53
 aaa:	f0 e0       	ldi	r31, 0x00	; 0
 aac:	80 81       	ld	r24, Z
 aae:	8f 70       	andi	r24, 0x0F	; 15
 ab0:	8c 93       	st	X, r24
			PORTC_Register |= Copy_u8Value;
 ab2:	a5 e3       	ldi	r26, 0x35	; 53
 ab4:	b0 e0       	ldi	r27, 0x00	; 0
 ab6:	e5 e3       	ldi	r30, 0x35	; 53
 ab8:	f0 e0       	ldi	r31, 0x00	; 0
 aba:	90 81       	ld	r25, Z
 abc:	8b 81       	ldd	r24, Y+3	; 0x03
 abe:	89 2b       	or	r24, r25
 ac0:	8c 93       	st	X, r24
 ac2:	13 c0       	rjmp	.+38     	; 0xaea <DIO_enumWritHighNibbles+0xea>
		    break; 
		case DIO_PORTD :
			PORTD_Register &= 0x0f;
 ac4:	a2 e3       	ldi	r26, 0x32	; 50
 ac6:	b0 e0       	ldi	r27, 0x00	; 0
 ac8:	e2 e3       	ldi	r30, 0x32	; 50
 aca:	f0 e0       	ldi	r31, 0x00	; 0
 acc:	80 81       	ld	r24, Z
 ace:	8f 70       	andi	r24, 0x0F	; 15
 ad0:	8c 93       	st	X, r24
			PORTD_Register |= Copy_u8Value;
 ad2:	a2 e3       	ldi	r26, 0x32	; 50
 ad4:	b0 e0       	ldi	r27, 0x00	; 0
 ad6:	e2 e3       	ldi	r30, 0x32	; 50
 ad8:	f0 e0       	ldi	r31, 0x00	; 0
 ada:	90 81       	ld	r25, Z
 adc:	8b 81       	ldd	r24, Y+3	; 0x03
 ade:	89 2b       	or	r24, r25
 ae0:	8c 93       	st	X, r24
 ae2:	03 c0       	rjmp	.+6      	; 0xaea <DIO_enumWritHighNibbles+0xea>
		    break; 
		default : LOC_enumState = DIO_NOK;
 ae4:	19 82       	std	Y+1, r1	; 0x01
 ae6:	01 c0       	rjmp	.+2      	; 0xaea <DIO_enumWritHighNibbles+0xea>
		}		
	}
	
	else
	{
		LOC_enumState = DIO_NOK;
 ae8:	19 82       	std	Y+1, r1	; 0x01
	}
	
	return LOC_enumState;	
 aea:	89 81       	ldd	r24, Y+1	; 0x01
}
 aec:	0f 90       	pop	r0
 aee:	0f 90       	pop	r0
 af0:	0f 90       	pop	r0
 af2:	0f 90       	pop	r0
 af4:	0f 90       	pop	r0
 af6:	cf 91       	pop	r28
 af8:	df 91       	pop	r29
 afa:	08 95       	ret

00000afc <DIO_enumWritLowNibbles>:

DIO_ErrorStatus DIO_enumWritLowNibbles  (u8 Copy_u8Port, u8 Copy_u8Value)
{
 afc:	df 93       	push	r29
 afe:	cf 93       	push	r28
 b00:	00 d0       	rcall	.+0      	; 0xb02 <DIO_enumWritLowNibbles+0x6>
 b02:	00 d0       	rcall	.+0      	; 0xb04 <DIO_enumWritLowNibbles+0x8>
 b04:	0f 92       	push	r0
 b06:	cd b7       	in	r28, 0x3d	; 61
 b08:	de b7       	in	r29, 0x3e	; 62
 b0a:	8a 83       	std	Y+2, r24	; 0x02
 b0c:	6b 83       	std	Y+3, r22	; 0x03
	DIO_ErrorStatus LOC_enumState = DIO_OK;
 b0e:	81 e0       	ldi	r24, 0x01	; 1
 b10:	89 83       	std	Y+1, r24	; 0x01
	
	if (Copy_u8Port <= DIO_PORTD)
 b12:	8a 81       	ldd	r24, Y+2	; 0x02
 b14:	84 30       	cpi	r24, 0x04	; 4
 b16:	08 f0       	brcs	.+2      	; 0xb1a <DIO_enumWritLowNibbles+0x1e>
 b18:	61 c0       	rjmp	.+194    	; 0xbdc <DIO_enumWritLowNibbles+0xe0>
	{
		switch (Copy_u8Port)
 b1a:	8a 81       	ldd	r24, Y+2	; 0x02
 b1c:	28 2f       	mov	r18, r24
 b1e:	30 e0       	ldi	r19, 0x00	; 0
 b20:	3d 83       	std	Y+5, r19	; 0x05
 b22:	2c 83       	std	Y+4, r18	; 0x04
 b24:	8c 81       	ldd	r24, Y+4	; 0x04
 b26:	9d 81       	ldd	r25, Y+5	; 0x05
 b28:	81 30       	cpi	r24, 0x01	; 1
 b2a:	91 05       	cpc	r25, r1
 b2c:	29 f1       	breq	.+74     	; 0xb78 <DIO_enumWritLowNibbles+0x7c>
 b2e:	2c 81       	ldd	r18, Y+4	; 0x04
 b30:	3d 81       	ldd	r19, Y+5	; 0x05
 b32:	22 30       	cpi	r18, 0x02	; 2
 b34:	31 05       	cpc	r19, r1
 b36:	2c f4       	brge	.+10     	; 0xb42 <DIO_enumWritLowNibbles+0x46>
 b38:	8c 81       	ldd	r24, Y+4	; 0x04
 b3a:	9d 81       	ldd	r25, Y+5	; 0x05
 b3c:	00 97       	sbiw	r24, 0x00	; 0
 b3e:	61 f0       	breq	.+24     	; 0xb58 <DIO_enumWritLowNibbles+0x5c>
 b40:	4b c0       	rjmp	.+150    	; 0xbd8 <DIO_enumWritLowNibbles+0xdc>
 b42:	2c 81       	ldd	r18, Y+4	; 0x04
 b44:	3d 81       	ldd	r19, Y+5	; 0x05
 b46:	22 30       	cpi	r18, 0x02	; 2
 b48:	31 05       	cpc	r19, r1
 b4a:	31 f1       	breq	.+76     	; 0xb98 <DIO_enumWritLowNibbles+0x9c>
 b4c:	8c 81       	ldd	r24, Y+4	; 0x04
 b4e:	9d 81       	ldd	r25, Y+5	; 0x05
 b50:	83 30       	cpi	r24, 0x03	; 3
 b52:	91 05       	cpc	r25, r1
 b54:	89 f1       	breq	.+98     	; 0xbb8 <DIO_enumWritLowNibbles+0xbc>
 b56:	40 c0       	rjmp	.+128    	; 0xbd8 <DIO_enumWritLowNibbles+0xdc>
		{
		case DIO_PORTA : 
			PORTA_Register &= 0xf0;
 b58:	ab e3       	ldi	r26, 0x3B	; 59
 b5a:	b0 e0       	ldi	r27, 0x00	; 0
 b5c:	eb e3       	ldi	r30, 0x3B	; 59
 b5e:	f0 e0       	ldi	r31, 0x00	; 0
 b60:	80 81       	ld	r24, Z
 b62:	80 7f       	andi	r24, 0xF0	; 240
 b64:	8c 93       	st	X, r24
			PORTA_Register |= Copy_u8Value;
 b66:	ab e3       	ldi	r26, 0x3B	; 59
 b68:	b0 e0       	ldi	r27, 0x00	; 0
 b6a:	eb e3       	ldi	r30, 0x3B	; 59
 b6c:	f0 e0       	ldi	r31, 0x00	; 0
 b6e:	90 81       	ld	r25, Z
 b70:	8b 81       	ldd	r24, Y+3	; 0x03
 b72:	89 2b       	or	r24, r25
 b74:	8c 93       	st	X, r24
 b76:	33 c0       	rjmp	.+102    	; 0xbde <DIO_enumWritLowNibbles+0xe2>
		    break; 
		case DIO_PORTB :
			PORTB_Register &= 0xf0;
 b78:	a8 e3       	ldi	r26, 0x38	; 56
 b7a:	b0 e0       	ldi	r27, 0x00	; 0
 b7c:	e8 e3       	ldi	r30, 0x38	; 56
 b7e:	f0 e0       	ldi	r31, 0x00	; 0
 b80:	80 81       	ld	r24, Z
 b82:	80 7f       	andi	r24, 0xF0	; 240
 b84:	8c 93       	st	X, r24
			PORTB_Register |= Copy_u8Value;
 b86:	a8 e3       	ldi	r26, 0x38	; 56
 b88:	b0 e0       	ldi	r27, 0x00	; 0
 b8a:	e8 e3       	ldi	r30, 0x38	; 56
 b8c:	f0 e0       	ldi	r31, 0x00	; 0
 b8e:	90 81       	ld	r25, Z
 b90:	8b 81       	ldd	r24, Y+3	; 0x03
 b92:	89 2b       	or	r24, r25
 b94:	8c 93       	st	X, r24
 b96:	23 c0       	rjmp	.+70     	; 0xbde <DIO_enumWritLowNibbles+0xe2>
		    break; 
		case DIO_PORTC :
			PORTC_Register &= 0xf0;
 b98:	a5 e3       	ldi	r26, 0x35	; 53
 b9a:	b0 e0       	ldi	r27, 0x00	; 0
 b9c:	e5 e3       	ldi	r30, 0x35	; 53
 b9e:	f0 e0       	ldi	r31, 0x00	; 0
 ba0:	80 81       	ld	r24, Z
 ba2:	80 7f       	andi	r24, 0xF0	; 240
 ba4:	8c 93       	st	X, r24
			PORTC_Register |= Copy_u8Value;
 ba6:	a5 e3       	ldi	r26, 0x35	; 53
 ba8:	b0 e0       	ldi	r27, 0x00	; 0
 baa:	e5 e3       	ldi	r30, 0x35	; 53
 bac:	f0 e0       	ldi	r31, 0x00	; 0
 bae:	90 81       	ld	r25, Z
 bb0:	8b 81       	ldd	r24, Y+3	; 0x03
 bb2:	89 2b       	or	r24, r25
 bb4:	8c 93       	st	X, r24
 bb6:	13 c0       	rjmp	.+38     	; 0xbde <DIO_enumWritLowNibbles+0xe2>
		    break; 
		case DIO_PORTD :
			PORTD_Register &= 0xf0;
 bb8:	a2 e3       	ldi	r26, 0x32	; 50
 bba:	b0 e0       	ldi	r27, 0x00	; 0
 bbc:	e2 e3       	ldi	r30, 0x32	; 50
 bbe:	f0 e0       	ldi	r31, 0x00	; 0
 bc0:	80 81       	ld	r24, Z
 bc2:	80 7f       	andi	r24, 0xF0	; 240
 bc4:	8c 93       	st	X, r24
			PORTD_Register |= Copy_u8Value;
 bc6:	a2 e3       	ldi	r26, 0x32	; 50
 bc8:	b0 e0       	ldi	r27, 0x00	; 0
 bca:	e2 e3       	ldi	r30, 0x32	; 50
 bcc:	f0 e0       	ldi	r31, 0x00	; 0
 bce:	90 81       	ld	r25, Z
 bd0:	8b 81       	ldd	r24, Y+3	; 0x03
 bd2:	89 2b       	or	r24, r25
 bd4:	8c 93       	st	X, r24
 bd6:	03 c0       	rjmp	.+6      	; 0xbde <DIO_enumWritLowNibbles+0xe2>
		    break; 
		default : LOC_enumState = DIO_NOK;
 bd8:	19 82       	std	Y+1, r1	; 0x01
 bda:	01 c0       	rjmp	.+2      	; 0xbde <DIO_enumWritLowNibbles+0xe2>
		}		
	}
	
	else
	{
		LOC_enumState = DIO_NOK;
 bdc:	19 82       	std	Y+1, r1	; 0x01
	}
	
	return LOC_enumState;	
 bde:	89 81       	ldd	r24, Y+1	; 0x01
}
 be0:	0f 90       	pop	r0
 be2:	0f 90       	pop	r0
 be4:	0f 90       	pop	r0
 be6:	0f 90       	pop	r0
 be8:	0f 90       	pop	r0
 bea:	cf 91       	pop	r28
 bec:	df 91       	pop	r29
 bee:	08 95       	ret

00000bf0 <LED_voidInit>:
#include "LED_interface.h"

#include "LED_private.h"

void LED_voidInit   (LED_Type_t Copy_structLedConfig)
{
 bf0:	df 93       	push	r29
 bf2:	cf 93       	push	r28
 bf4:	00 d0       	rcall	.+0      	; 0xbf6 <LED_voidInit+0x6>
 bf6:	0f 92       	push	r0
 bf8:	cd b7       	in	r28, 0x3d	; 61
 bfa:	de b7       	in	r29, 0x3e	; 62
 bfc:	69 83       	std	Y+1, r22	; 0x01
 bfe:	7a 83       	std	Y+2, r23	; 0x02
 c00:	8b 83       	std	Y+3, r24	; 0x03
	DIO_enumSetPinDirection (Copy_structLedConfig.Port, Copy_structLedConfig.Pin, DIO_PIN_OUTPUT);
 c02:	89 81       	ldd	r24, Y+1	; 0x01
 c04:	9a 81       	ldd	r25, Y+2	; 0x02
 c06:	69 2f       	mov	r22, r25
 c08:	41 e0       	ldi	r20, 0x01	; 1
 c0a:	0e 94 49 00 	call	0x92	; 0x92 <DIO_enumSetPinDirection>
}
 c0e:	0f 90       	pop	r0
 c10:	0f 90       	pop	r0
 c12:	0f 90       	pop	r0
 c14:	cf 91       	pop	r28
 c16:	df 91       	pop	r29
 c18:	08 95       	ret

00000c1a <LED_voidOn>:

void LED_voidOn     (LED_Type_t Copy_structLedConfig)
{
 c1a:	df 93       	push	r29
 c1c:	cf 93       	push	r28
 c1e:	00 d0       	rcall	.+0      	; 0xc20 <LED_voidOn+0x6>
 c20:	0f 92       	push	r0
 c22:	cd b7       	in	r28, 0x3d	; 61
 c24:	de b7       	in	r29, 0x3e	; 62
 c26:	69 83       	std	Y+1, r22	; 0x01
 c28:	7a 83       	std	Y+2, r23	; 0x02
 c2a:	8b 83       	std	Y+3, r24	; 0x03
	if (Copy_structLedConfig.Active_State == ACTIVE_HIGH)
 c2c:	8b 81       	ldd	r24, Y+3	; 0x03
 c2e:	81 30       	cpi	r24, 0x01	; 1
 c30:	39 f4       	brne	.+14     	; 0xc40 <LED_voidOn+0x26>
	{
		DIO_enumSetPinValue (Copy_structLedConfig.Port, Copy_structLedConfig.Pin, DIO_PIN_HIGH);
 c32:	89 81       	ldd	r24, Y+1	; 0x01
 c34:	9a 81       	ldd	r25, Y+2	; 0x02
 c36:	69 2f       	mov	r22, r25
 c38:	41 e0       	ldi	r20, 0x01	; 1
 c3a:	0e 94 58 01 	call	0x2b0	; 0x2b0 <DIO_enumSetPinValue>
 c3e:	09 c0       	rjmp	.+18     	; 0xc52 <LED_voidOn+0x38>
	}
	
	else if (Copy_structLedConfig.Active_State == ACTIVE_LOW)
 c40:	8b 81       	ldd	r24, Y+3	; 0x03
 c42:	88 23       	and	r24, r24
 c44:	31 f4       	brne	.+12     	; 0xc52 <LED_voidOn+0x38>
	{
		DIO_enumSetPinValue (Copy_structLedConfig.Port, Copy_structLedConfig.Pin, DIO_PIN_LOW);
 c46:	89 81       	ldd	r24, Y+1	; 0x01
 c48:	9a 81       	ldd	r25, Y+2	; 0x02
 c4a:	69 2f       	mov	r22, r25
 c4c:	40 e0       	ldi	r20, 0x00	; 0
 c4e:	0e 94 58 01 	call	0x2b0	; 0x2b0 <DIO_enumSetPinValue>
	}
}
 c52:	0f 90       	pop	r0
 c54:	0f 90       	pop	r0
 c56:	0f 90       	pop	r0
 c58:	cf 91       	pop	r28
 c5a:	df 91       	pop	r29
 c5c:	08 95       	ret

00000c5e <LED_voidOff>:

void LED_voidOff    (LED_Type_t Copy_structLedConfig)
{
 c5e:	df 93       	push	r29
 c60:	cf 93       	push	r28
 c62:	00 d0       	rcall	.+0      	; 0xc64 <LED_voidOff+0x6>
 c64:	0f 92       	push	r0
 c66:	cd b7       	in	r28, 0x3d	; 61
 c68:	de b7       	in	r29, 0x3e	; 62
 c6a:	69 83       	std	Y+1, r22	; 0x01
 c6c:	7a 83       	std	Y+2, r23	; 0x02
 c6e:	8b 83       	std	Y+3, r24	; 0x03
	if (Copy_structLedConfig.Active_State == ACTIVE_HIGH)
 c70:	8b 81       	ldd	r24, Y+3	; 0x03
 c72:	81 30       	cpi	r24, 0x01	; 1
 c74:	39 f4       	brne	.+14     	; 0xc84 <LED_voidOff+0x26>
	{
		DIO_enumSetPinValue (Copy_structLedConfig.Port, Copy_structLedConfig.Pin, DIO_PIN_LOW);
 c76:	89 81       	ldd	r24, Y+1	; 0x01
 c78:	9a 81       	ldd	r25, Y+2	; 0x02
 c7a:	69 2f       	mov	r22, r25
 c7c:	40 e0       	ldi	r20, 0x00	; 0
 c7e:	0e 94 58 01 	call	0x2b0	; 0x2b0 <DIO_enumSetPinValue>
 c82:	09 c0       	rjmp	.+18     	; 0xc96 <LED_voidOff+0x38>
	}
	
	else if (Copy_structLedConfig.Active_State == ACTIVE_LOW)
 c84:	8b 81       	ldd	r24, Y+3	; 0x03
 c86:	88 23       	and	r24, r24
 c88:	31 f4       	brne	.+12     	; 0xc96 <LED_voidOff+0x38>
	{
		DIO_enumSetPinValue (Copy_structLedConfig.Port, Copy_structLedConfig.Pin, DIO_PIN_HIGH);
 c8a:	89 81       	ldd	r24, Y+1	; 0x01
 c8c:	9a 81       	ldd	r25, Y+2	; 0x02
 c8e:	69 2f       	mov	r22, r25
 c90:	41 e0       	ldi	r20, 0x01	; 1
 c92:	0e 94 58 01 	call	0x2b0	; 0x2b0 <DIO_enumSetPinValue>
	}	
}
 c96:	0f 90       	pop	r0
 c98:	0f 90       	pop	r0
 c9a:	0f 90       	pop	r0
 c9c:	cf 91       	pop	r28
 c9e:	df 91       	pop	r29
 ca0:	08 95       	ret

00000ca2 <LED_voidToggle>:

void LED_voidToggle (LED_Type_t Copy_structLedConfig)
{
 ca2:	df 93       	push	r29
 ca4:	cf 93       	push	r28
 ca6:	00 d0       	rcall	.+0      	; 0xca8 <LED_voidToggle+0x6>
 ca8:	0f 92       	push	r0
 caa:	cd b7       	in	r28, 0x3d	; 61
 cac:	de b7       	in	r29, 0x3e	; 62
 cae:	69 83       	std	Y+1, r22	; 0x01
 cb0:	7a 83       	std	Y+2, r23	; 0x02
 cb2:	8b 83       	std	Y+3, r24	; 0x03
	DIO_enumTogglePinValue (Copy_structLedConfig.Port, Copy_structLedConfig.Pin);
 cb4:	89 81       	ldd	r24, Y+1	; 0x01
 cb6:	9a 81       	ldd	r25, Y+2	; 0x02
 cb8:	69 2f       	mov	r22, r25
 cba:	0e 94 2c 03 	call	0x658	; 0x658 <DIO_enumTogglePinValue>
}
 cbe:	0f 90       	pop	r0
 cc0:	0f 90       	pop	r0
 cc2:	0f 90       	pop	r0
 cc4:	cf 91       	pop	r28
 cc6:	df 91       	pop	r29
 cc8:	08 95       	ret

00000cca <SW_voidInit>:

#include "DIO_interface.h"
#include "SW_interface.h"

void SW_voidInit     (SW_Type_t Copy_structSwConfig)
{
 cca:	df 93       	push	r29
 ccc:	cf 93       	push	r28
 cce:	00 d0       	rcall	.+0      	; 0xcd0 <SW_voidInit+0x6>
 cd0:	0f 92       	push	r0
 cd2:	cd b7       	in	r28, 0x3d	; 61
 cd4:	de b7       	in	r29, 0x3e	; 62
 cd6:	69 83       	std	Y+1, r22	; 0x01
 cd8:	7a 83       	std	Y+2, r23	; 0x02
 cda:	8b 83       	std	Y+3, r24	; 0x03
	DIO_enumSetPinDirection (Copy_structSwConfig.Port, Copy_structSwConfig.Pin, DIO_PIN_INPUT);
 cdc:	89 81       	ldd	r24, Y+1	; 0x01
 cde:	9a 81       	ldd	r25, Y+2	; 0x02
 ce0:	69 2f       	mov	r22, r25
 ce2:	40 e0       	ldi	r20, 0x00	; 0
 ce4:	0e 94 49 00 	call	0x92	; 0x92 <DIO_enumSetPinDirection>
	
	if (Copy_structSwConfig.Pull_State == SW_Int_PULL_UP) {
 ce8:	8b 81       	ldd	r24, Y+3	; 0x03
 cea:	88 23       	and	r24, r24
 cec:	31 f4       	brne	.+12     	; 0xcfa <SW_voidInit+0x30>
		DIO_enumSetPinValue (Copy_structSwConfig.Port, Copy_structSwConfig.Pin, DIO_PIN_HIGH);
 cee:	89 81       	ldd	r24, Y+1	; 0x01
 cf0:	9a 81       	ldd	r25, Y+2	; 0x02
 cf2:	69 2f       	mov	r22, r25
 cf4:	41 e0       	ldi	r20, 0x01	; 1
 cf6:	0e 94 58 01 	call	0x2b0	; 0x2b0 <DIO_enumSetPinValue>
	}
}
 cfa:	0f 90       	pop	r0
 cfc:	0f 90       	pop	r0
 cfe:	0f 90       	pop	r0
 d00:	cf 91       	pop	r28
 d02:	df 91       	pop	r29
 d04:	08 95       	ret

00000d06 <SW_u8GetPressed>:

u8   SW_u8GetPressed (SW_Type_t Copy_structSwConfig)
{
 d06:	df 93       	push	r29
 d08:	cf 93       	push	r28
 d0a:	00 d0       	rcall	.+0      	; 0xd0c <SW_u8GetPressed+0x6>
 d0c:	00 d0       	rcall	.+0      	; 0xd0e <SW_u8GetPressed+0x8>
 d0e:	0f 92       	push	r0
 d10:	cd b7       	in	r28, 0x3d	; 61
 d12:	de b7       	in	r29, 0x3e	; 62
 d14:	6b 83       	std	Y+3, r22	; 0x03
 d16:	7c 83       	std	Y+4, r23	; 0x04
 d18:	8d 83       	std	Y+5, r24	; 0x05
	u8 LOC_u8Result = SW_NOT_PRESSED;
 d1a:	19 82       	std	Y+1, r1	; 0x01
	u8 LOC_u8PinValue  = SW_NOT_PRESSED;
 d1c:	1a 82       	std	Y+2, r1	; 0x02
	
	if (Copy_structSwConfig.Pull_State == SW_Int_PULL_UP || Copy_structSwConfig.Pull_State == SW_Ext_PULL_UP) {
 d1e:	8d 81       	ldd	r24, Y+5	; 0x05
 d20:	88 23       	and	r24, r24
 d22:	19 f0       	breq	.+6      	; 0xd2a <SW_u8GetPressed+0x24>
 d24:	8d 81       	ldd	r24, Y+5	; 0x05
 d26:	81 30       	cpi	r24, 0x01	; 1
 d28:	79 f4       	brne	.+30     	; 0xd48 <SW_u8GetPressed+0x42>
		DIO_enumGetPinValue (Copy_structSwConfig.Port, Copy_structSwConfig.Pin, &LOC_u8PinValue);
 d2a:	8b 81       	ldd	r24, Y+3	; 0x03
 d2c:	9c 81       	ldd	r25, Y+4	; 0x04
 d2e:	9e 01       	movw	r18, r28
 d30:	2e 5f       	subi	r18, 0xFE	; 254
 d32:	3f 4f       	sbci	r19, 0xFF	; 255
 d34:	69 2f       	mov	r22, r25
 d36:	a9 01       	movw	r20, r18
 d38:	0e 94 67 02 	call	0x4ce	; 0x4ce <DIO_enumGetPinValue>
		
		if (LOC_u8PinValue == 0) {
 d3c:	8a 81       	ldd	r24, Y+2	; 0x02
 d3e:	88 23       	and	r24, r24
 d40:	a1 f4       	brne	.+40     	; 0xd6a <SW_u8GetPressed+0x64>
			LOC_u8Result = SW_PRESSED;
 d42:	81 e0       	ldi	r24, 0x01	; 1
 d44:	89 83       	std	Y+1, r24	; 0x01
 d46:	11 c0       	rjmp	.+34     	; 0xd6a <SW_u8GetPressed+0x64>
		}
	}
	
	else if (Copy_structSwConfig.Pull_State == SW_Ext_PULL_DOWN) {
 d48:	8d 81       	ldd	r24, Y+5	; 0x05
 d4a:	82 30       	cpi	r24, 0x02	; 2
 d4c:	71 f4       	brne	.+28     	; 0xd6a <SW_u8GetPressed+0x64>
		DIO_enumGetPinValue (Copy_structSwConfig.Port, Copy_structSwConfig.Pin, &LOC_u8PinValue);
 d4e:	8b 81       	ldd	r24, Y+3	; 0x03
 d50:	9c 81       	ldd	r25, Y+4	; 0x04
 d52:	9e 01       	movw	r18, r28
 d54:	2e 5f       	subi	r18, 0xFE	; 254
 d56:	3f 4f       	sbci	r19, 0xFF	; 255
 d58:	69 2f       	mov	r22, r25
 d5a:	a9 01       	movw	r20, r18
 d5c:	0e 94 67 02 	call	0x4ce	; 0x4ce <DIO_enumGetPinValue>
		
		if (LOC_u8PinValue == 1) {
 d60:	8a 81       	ldd	r24, Y+2	; 0x02
 d62:	81 30       	cpi	r24, 0x01	; 1
 d64:	11 f4       	brne	.+4      	; 0xd6a <SW_u8GetPressed+0x64>
			LOC_u8Result = SW_PRESSED;
 d66:	81 e0       	ldi	r24, 0x01	; 1
 d68:	89 83       	std	Y+1, r24	; 0x01
		}		
	}
	
	return LOC_u8Result;
 d6a:	89 81       	ldd	r24, Y+1	; 0x01
}
 d6c:	0f 90       	pop	r0
 d6e:	0f 90       	pop	r0
 d70:	0f 90       	pop	r0
 d72:	0f 90       	pop	r0
 d74:	0f 90       	pop	r0
 d76:	cf 91       	pop	r28
 d78:	df 91       	pop	r29
 d7a:	08 95       	ret

00000d7c <main>:

SW_Type_t  SW2  = {SW_PORTA, SW_PIN7, SW_Int_PULL_UP};
LED_Type_t LED2 = {LED_PORTD, LED_PIN7, ACTIVE_HIGH} ;

void main()
{
 d7c:	df 93       	push	r29
 d7e:	cf 93       	push	r28
 d80:	cd b7       	in	r28, 0x3d	; 61
 d82:	de b7       	in	r29, 0x3e	; 62
	LED_voidInit   (LED1);
 d84:	60 91 60 00 	lds	r22, 0x0060
 d88:	70 91 61 00 	lds	r23, 0x0061
 d8c:	80 91 62 00 	lds	r24, 0x0062
 d90:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <LED_voidInit>
	SW_voidInit    (SW1) ;
 d94:	60 91 6a 00 	lds	r22, 0x006A
 d98:	70 91 6b 00 	lds	r23, 0x006B
 d9c:	80 91 6c 00 	lds	r24, 0x006C
 da0:	0e 94 65 06 	call	0xcca	; 0xcca <SW_voidInit>

	LED_voidInit   (LED2);
 da4:	60 91 66 00 	lds	r22, 0x0066
 da8:	70 91 67 00 	lds	r23, 0x0067
 dac:	80 91 68 00 	lds	r24, 0x0068
 db0:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <LED_voidInit>
	SW_voidInit    (SW2) ;
 db4:	60 91 63 00 	lds	r22, 0x0063
 db8:	70 91 64 00 	lds	r23, 0x0064
 dbc:	80 91 65 00 	lds	r24, 0x0065
 dc0:	0e 94 65 06 	call	0xcca	; 0xcca <SW_voidInit>

	while(1)
	{
		if (SW_u8GetPressed (SW1)) {
 dc4:	60 91 6a 00 	lds	r22, 0x006A
 dc8:	70 91 6b 00 	lds	r23, 0x006B
 dcc:	80 91 6c 00 	lds	r24, 0x006C
 dd0:	0e 94 83 06 	call	0xd06	; 0xd06 <SW_u8GetPressed>
 dd4:	88 23       	and	r24, r24
 dd6:	41 f0       	breq	.+16     	; 0xde8 <main+0x6c>
			LED_voidToggle (LED1);
 dd8:	60 91 60 00 	lds	r22, 0x0060
 ddc:	70 91 61 00 	lds	r23, 0x0061
 de0:	80 91 62 00 	lds	r24, 0x0062
 de4:	0e 94 51 06 	call	0xca2	; 0xca2 <LED_voidToggle>
		}

		if (SW_u8GetPressed (SW2)) {
 de8:	60 91 63 00 	lds	r22, 0x0063
 dec:	70 91 64 00 	lds	r23, 0x0064
 df0:	80 91 65 00 	lds	r24, 0x0065
 df4:	0e 94 83 06 	call	0xd06	; 0xd06 <SW_u8GetPressed>
 df8:	88 23       	and	r24, r24
 dfa:	49 f0       	breq	.+18     	; 0xe0e <main+0x92>
			LED_voidOn     (LED2);
 dfc:	60 91 66 00 	lds	r22, 0x0066
 e00:	70 91 67 00 	lds	r23, 0x0067
 e04:	80 91 68 00 	lds	r24, 0x0068
 e08:	0e 94 0d 06 	call	0xc1a	; 0xc1a <LED_voidOn>
 e0c:	db cf       	rjmp	.-74     	; 0xdc4 <main+0x48>
		}

		else if (!SW_u8GetPressed (SW2)) {
 e0e:	60 91 63 00 	lds	r22, 0x0063
 e12:	70 91 64 00 	lds	r23, 0x0064
 e16:	80 91 65 00 	lds	r24, 0x0065
 e1a:	0e 94 83 06 	call	0xd06	; 0xd06 <SW_u8GetPressed>
 e1e:	88 23       	and	r24, r24
 e20:	89 f6       	brne	.-94     	; 0xdc4 <main+0x48>
			LED_voidOff    (LED2);
 e22:	60 91 66 00 	lds	r22, 0x0066
 e26:	70 91 67 00 	lds	r23, 0x0067
 e2a:	80 91 68 00 	lds	r24, 0x0068
 e2e:	0e 94 2f 06 	call	0xc5e	; 0xc5e <LED_voidOff>
 e32:	c8 cf       	rjmp	.-112    	; 0xdc4 <main+0x48>

00000e34 <_exit>:
 e34:	f8 94       	cli

00000e36 <__stop_program>:
 e36:	ff cf       	rjmp	.-2      	; 0xe36 <__stop_program>
